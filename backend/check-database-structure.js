const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const supabaseUrl = 'https://ciasxktujslgsdgylimv.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNpYXN4a3R1anNsZ3NkZ3lsaW12Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzU1NTU2NSwiZXhwIjoyMDYzMTMxNTY1fQ.R2IieQgCFPQ5sgEqPSJmF9uB1hZasJHg5enl2alJpn4';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkDatabaseStructure() {
  console.log('üè• KI·ªÇM TRA C·∫§U TR√öC DATABASE HOSPITAL MANAGEMENT SYSTEM');
  console.log('='.repeat(70));

  try {
    // 1. Ki·ªÉm tra c√°c b·∫£ng ch√≠nh
    console.log('\nüìã 1. DANH S√ÅCH C√ÅC B·∫¢NG CH√çNH:');
    console.log('-'.repeat(50));
    
    const tables = [
      'profiles', 'doctors', 'patients', 'departments', 'appointments', 
      'medical_records', 'doctor_reviews', 'doctor_work_schedules',
      'doctor_work_experiences', 'doctor_emergency_contacts', 'doctor_settings'
    ];

    for (const table of tables) {
      try {
        const { data, error, count } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`‚ùå ${table}: KH√îNG T·ªíN T·∫†I ho·∫∑c L·ªñI - ${error.message}`);
        } else {
          console.log(`‚úÖ ${table}: ${count || 0} records`);
        }
      } catch (err) {
        console.log(`‚ùå ${table}: L·ªñI - ${err.message}`);
      }
    }

    // 2. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng profiles
    console.log('\nüë§ 2. C·∫§U TR√öC B·∫¢NG PROFILES:');
    console.log('-'.repeat(50));
    
    const { data: profileSample } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profileSample && profileSample.length > 0) {
      const columns = Object.keys(profileSample[0]);
      console.log('C√°c c·ªôt:', columns.join(', '));
      console.log('M·∫´u d·ªØ li·ªáu:', JSON.stringify(profileSample[0], null, 2));
    }

    // 3. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng doctors
    console.log('\nüë®‚Äç‚öïÔ∏è 3. C·∫§U TR√öC B·∫¢NG DOCTORS:');
    console.log('-'.repeat(50));
    
    const { data: doctorSample } = await supabase
      .from('doctors')
      .select('*')
      .limit(1);
    
    if (doctorSample && doctorSample.length > 0) {
      const columns = Object.keys(doctorSample[0]);
      console.log('C√°c c·ªôt:', columns.join(', '));
      console.log('M·∫´u d·ªØ li·ªáu:', JSON.stringify(doctorSample[0], null, 2));
    }

    // 4. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng patients
    console.log('\nü§í 4. C·∫§U TR√öC B·∫¢NG PATIENTS:');
    console.log('-'.repeat(50));
    
    const { data: patientSample } = await supabase
      .from('patients')
      .select('*')
      .limit(1);
    
    if (patientSample && patientSample.length > 0) {
      const columns = Object.keys(patientSample[0]);
      console.log('C√°c c·ªôt:', columns.join(', '));
      console.log('M·∫´u d·ªØ li·ªáu:', JSON.stringify(patientSample[0], null, 2));
    }

    // 5. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng appointments
    console.log('\nüìÖ 5. C·∫§U TR√öC B·∫¢NG APPOINTMENTS:');
    console.log('-'.repeat(50));
    
    const { data: appointmentSample } = await supabase
      .from('appointments')
      .select('*')
      .limit(1);
    
    if (appointmentSample && appointmentSample.length > 0) {
      const columns = Object.keys(appointmentSample[0]);
      console.log('C√°c c·ªôt:', columns.join(', '));
      console.log('M·∫´u d·ªØ li·ªáu:', JSON.stringify(appointmentSample[0], null, 2));
    }

    // 6. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng departments
    console.log('\nüè¢ 6. C·∫§U TR√öC B·∫¢NG DEPARTMENTS:');
    console.log('-'.repeat(50));
    
    const { data: departmentSample } = await supabase
      .from('departments')
      .select('*')
      .limit(1);
    
    if (departmentSample && departmentSample.length > 0) {
      const columns = Object.keys(departmentSample[0]);
      console.log('C√°c c·ªôt:', columns.join(', '));
      console.log('M·∫´u d·ªØ li·ªáu:', JSON.stringify(departmentSample[0], null, 2));
    }

    // 7. Ki·ªÉm tra database functions
    console.log('\n‚öôÔ∏è 7. KI·ªÇM TRA DATABASE FUNCTIONS:');
    console.log('-'.repeat(50));
    
    try {
      const { data: functions } = await supabase.rpc('verify_hospital_functions');
      if (functions) {
        functions.forEach(func => {
          const status = func.exists ? '‚úÖ' : '‚ùå';
          console.log(`${status} ${func.function_name}`);
        });
      }
    } catch (err) {
      console.log('‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra functions:', err.message);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra database:', error.message);
  }
}

// Ch·∫°y ki·ªÉm tra
checkDatabaseStructure();
