const { createClient } = require('@supabase/supabase-js');

// Use service role key to bypass RLS
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createDoctorReviews() {
  console.log('‚≠ê Creating doctor reviews with service role...');
  
  const doctorId = 'GENE-DOC-202506-006';
  
  try {
    // Get some patient IDs
    const { data: patients, error: patientsError } = await supabase
      .from('patients')
      .select('patient_id')
      .limit(3);
      
    if (patientsError) {
      console.log('‚ùå Error getting patients:', patientsError.message);
      return;
    }
    
    if (!patients || patients.length === 0) {
      console.log('‚ùå No patients found in database');
      return;
    }
    
    console.log(`üìã Found ${patients.length} patients for reviews`);
    
    const reviews = [
      {
        review_id: 'REV-202506-001',
        doctor_id: doctorId,
        patient_id: patients[0].patient_id,
        rating: 5,
        review_text: 'B√°c sƒ© ƒê·ª©c r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. Kh√°m b·ªánh k·ªπ l∆∞·ª°ng v√† gi·∫£i th√≠ch r√µ r√†ng v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe.',
        review_date: new Date('2024-12-01').toISOString(),
        is_verified: true
      },
      {
        review_id: 'REV-202506-002',
        doctor_id: doctorId,
        patient_id: patients[1]?.patient_id || patients[0].patient_id,
        rating: 4,
        review_text: 'B√°c sƒ© c√≥ kinh nghi·ªám, ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£. Th√°i ƒë·ªô th√¢n thi·ªán v√† l·∫Øng nghe b·ªánh nh√¢n.',
        review_date: new Date('2024-11-15').toISOString(),
        is_verified: true
      },
      {
        review_id: 'REV-202506-003',
        doctor_id: doctorId,
        patient_id: patients[2]?.patient_id || patients[0].patient_id,
        rating: 5,
        review_text: 'R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• kh√°m ch·ªØa b·ªánh. B√°c sƒ© t∆∞ v·∫•n chi ti·∫øt v√† theo d√µi s√°t sao.',
        review_date: new Date('2024-11-01').toISOString(),
        is_verified: true
      }
    ];
    
    const { data: reviewData, error: reviewError } = await supabase
      .from('doctor_reviews')
      .insert(reviews)
      .select();
      
    if (reviewError) {
      console.log('‚ùå Error creating reviews:', reviewError.message);
      console.log('   Details:', reviewError);
    } else {
      console.log(`‚úÖ Created ${reviewData.length} patient reviews`);
      
      // Update doctor's total reviews count
      const { error: updateError } = await supabase
        .from('doctors')
        .update({
          total_reviews: reviewData.length,
          rating: 4.7 // Average of 5, 4, 5
        })
        .eq('doctor_id', doctorId);
        
      if (updateError) {
        console.log('‚ùå Error updating doctor stats:', updateError.message);
      } else {
        console.log('‚úÖ Updated doctor review statistics');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

createDoctorReviews().catch(console.error);
