services:
  # GraphQL Gateway - Unified GraphQL API over REST microservices
  graphql-gateway:
    build:
      context: .
      dockerfile: ./services/graphql-gateway/Dockerfile
    ports:
      - "3200:3200"
    environment:
      - NODE_ENV=development
      - PORT=3200
      - API_GATEWAY_URL=http://api-gateway:3100
      - AUTH_SERVICE_URL=http://api-gateway:3100/api/auth
      - DOCTOR_SERVICE_URL=http://api-gateway:3100/api/doctors
      - PATIENT_SERVICE_URL=http://api-gateway:3100/api/patients
      - APPOINTMENT_SERVICE_URL=http://api-gateway:3100/api/appointments
      - DEPARTMENT_SERVICE_URL=http://api-gateway:3100/api/departments
      - MEDICAL_RECORDS_SERVICE_URL=http://api-gateway:3100/api/medical-records
      - PRESCRIPTION_SERVICE_URL=http://api-gateway:3100/api/prescriptions
      - BILLING_SERVICE_URL=http://api-gateway:3100/api/billing
      - PAYMENT_SERVICE_URL=http://api-gateway:3100/api/payments
      - NOTIFICATION_SERVICE_URL=http://api-gateway:3100/api/notifications
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3100
      - DEFAULT_LANGUAGE=vi
      - TIMEZONE=Asia/Ho_Chi_Minh
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - core
      - full

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - "3100:3100"
    environment:
      - NODE_ENV=development
      - PORT=3100
      - AUTH_SERVICE_URL=http://auth-service:3001
      - DOCTOR_SERVICE_URL=http://doctor-service:3002
      - PATIENT_SERVICE_URL=http://patient-service:3003
      - APPOINTMENT_SERVICE_URL=http://appointment-service:3004
      - DEPARTMENT_SERVICE_URL=http://department-service:3005
      - MEDICAL_RECORDS_SERVICE_URL=http://medical-records-service:3006
      - PRESCRIPTION_SERVICE_URL=http://prescription-service:3009
      - BILLING_SERVICE_URL=http://billing-service:3008
      - PAYMENT_SERVICE_URL=http://payment-service:3009
      - NOTIFICATION_SERVICE_URL=http://notification-service:3011
      - GRAPHQL_GATEWAY_URL=http://graphql-gateway:3200
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Auth Service - Using Supabase Auth
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - ./services/auth-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Doctor Service
  doctor-service:
    build:
      context: .
      dockerfile: ./services/doctor-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      # Pure API Gateway Communication - All service calls go through API Gateway
      - API_GATEWAY_URL=http://api-gateway:3100
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Patient Service - ENABLED
  patient-service:
    build:
      context: .
      dockerfile: ./services/patient-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Appointment Service - ENABLED
  appointment-service:
    build:
      context: .
      dockerfile: ./services/appointment-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      # Pure API Gateway Communication - All service calls go through API Gateway
      - API_GATEWAY_URL=http://api-gateway:3100
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Department Service - ENABLED
  department-service:
    build:
      context: .
      dockerfile: ./services/department-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Medical Records Service - ENABLED
  medical-records-service:
    build:
      context: .
      dockerfile: ./services/medical-records-service/Dockerfile
    ports:
      - "3006:3006"
    env_file:
      - ./services/medical-records-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3006
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      # Pure API Gateway Communication - All service calls go through API Gateway
      - API_GATEWAY_URL=http://api-gateway:3100
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # ALL OTHER SERVICES DISABLED FOR DOCTOR-ONLY MODE
  # Uncomment these services when you want to enable full system

  # Prescription Service - ENABLED
  prescription-service:
    build:
      context: .
      dockerfile: ./services/prescription-service/Dockerfile
    ports:
      - "3007:3007"
    env_file:
      - ./services/prescription-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3007
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - DOCTOR_SERVICE_URL=http://doctor-service:3002
      - PATIENT_SERVICE_URL=http://patient-service:3003
      - MEDICAL_RECORDS_SERVICE_URL=http://medical-records-service:3006
      - NOTIFICATION_SERVICE_URL=http://notification-service:3011
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Billing Service - ENABLED
  billing-service:
    build:
      context: .
      dockerfile: ./services/billing-service/Dockerfile
    ports:
      - "3008:3008"
    env_file:
      - ./services/billing-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3008
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - APPOINTMENT_SERVICE_URL=http://appointment-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3011
      - STRIPE_SECRET_KEY=sk_test_your_stripe_key
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Payment Service - ENABLED (PayOS Integration)
  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
      args:
        - NODE_ENV=development
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=development
      - PORT=3009
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
      - PAYOS_ENVIRONMENT=${PAYOS_ENVIRONMENT:-sandbox}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
    # No database dependency - using Supabase
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full



  # Notification Service - ENABLED
  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    ports:
      - "3011:3011"
    env_file:
      - ./services/notification-service/.env
    environment:
      - NODE_ENV=development
      - PORT=3011
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your_email@gmail.com
      - SMTP_PASS=your_app_password
    depends_on:
      - redis
      - rabbitmq
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # # File Storage Service
  # file-storage-service:
  #   build: ./services/file-storage-service
  #   ports:
  #     - "3016:3016"
  #   environment:
  #     - NODE_ENV=development
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
  #     - REDIS_URL=redis://redis:6379
  #     - AUTH_SERVICE_URL=http://auth-service:3001
  #     - UPLOAD_PATH=/app/uploads
  #     - MAX_FILE_SIZE=10485760
  #   depends_on:
  #     - redis
  #   volumes:
  #     - file_uploads:/app/uploads
  #   networks:
  #     - hospital-network

  # # Audit & Logging Service
  # audit-service:
  #   build: ./services/audit-service
  #   ports:
  #     - "3017:3017"
  #   environment:
  #     - NODE_ENV=development
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
  #     - REDIS_URL=redis://redis:6379
  #     - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
  #   depends_on:
  #     - redis
  #     - rabbitmq
  #   networks:
  #     - hospital-network

  # # AI Chatbot Service
  # chatbot-service:
  #   build: ./services/chatbot-service
  #   ports:
  #     - "3018:3018"
  #   environment:
  #     - NODE_ENV=development
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
  #     - REDIS_URL=redis://redis:6379
  #     - AUTH_SERVICE_URL=http://auth-service:3001
  #     - OPENAI_API_KEY=your_openai_api_key
  #     - MEDICAL_RECORDS_SERVICE_URL=http://medical-records-service:3006
  #   depends_on:
  #     - redis
  #   networks:
  #     - hospital-network

  # # Frontend
  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "3100:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_GATEWAY_URL=http://localhost:3000
  #     - NODE_ENV=development
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - hospital-network

  # Databases - Only Doctor DB active for doctor-only mode
  # auth-db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: auth_db
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - auth_data:/var/lib/postgresql/data
  #     - ./services/auth-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - hospital-network

  doctor-db:
    image: postgres:15
    environment:
      POSTGRES_DB: doctor_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - doctor_data:/var/lib/postgresql/data
      - ./services/doctor-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"  # Expose for direct access
    networks:
      - hospital-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - core
      - full

  # patient-db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: patient_db
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - patient_data:/var/lib/postgresql/data
  #     - ./services/patient-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - hospital-network

  # appointment-db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: appointment_db
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - appointment_data:/var/lib/postgresql/data
  #     - ./services/appointment-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - hospital-network

  # department-db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: department_db
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - department_data:/var/lib/postgresql/data
  #     - ./services/department-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - hospital-network



  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    profiles:
      - core
      - full

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - core
      - full

  # Monitoring Stack - ENABLED
  prometheus:
    image: prom/prometheus:latest
    container_name: hospital-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - hospital-network
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - monitoring
      - full

  grafana:
    image: grafana/grafana:latest
    container_name: hospital-grafana
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - hospital-network
    depends_on:
      - prometheus
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - monitoring
      - full

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: hospital-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - hospital-network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

volumes:
  auth_data:
  doctor_data:
  patient_data:
  appointment_data:
  department_data:
  file_uploads:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  hospital-network:
    driver: bridge
