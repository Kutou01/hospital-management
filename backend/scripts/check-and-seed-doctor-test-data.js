const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkCurrentData() {
  console.log('üîç CHECKING CURRENT DATABASE DATA');
  console.log('='.repeat(50));

  try {
    // Check profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .order('created_at', { ascending: false });

    if (profilesError) {
      console.log('‚ùå Error checking profiles:', profilesError.message);
      return;
    }

    console.log(`üìã Profiles: ${profiles?.length || 0} records`);
    if (profiles && profiles.length > 0) {
      console.log('   Sample profiles:');
      profiles.slice(0, 3).forEach(p => {
        console.log(`   - ${p.full_name} (${p.role}) - ${p.email}`);
      });
    }

    // Check departments
    const { data: departments, error: deptError } = await supabase
      .from('departments')
      .select('*')
      .order('department_id');

    console.log(`\nüè• Departments: ${departments?.length || 0} records`);
    if (departments && departments.length > 0) {
      departments.forEach(d => {
        console.log(`   - ${d.department_id}: ${d.department_name}`);
      });
    }

    // Check specialties
    const { data: specialties, error: specError } = await supabase
      .from('specialties')
      .select('*')
      .order('specialty_id');

    console.log(`\nü©∫ Specialties: ${specialties?.length || 0} records`);
    if (specialties && specialties.length > 0) {
      specialties.slice(0, 5).forEach(s => {
        console.log(`   - ${s.specialty_id}: ${s.specialty_name} (${s.department_id})`);
      });
    }

    // Check doctors
    const { data: doctors, error: doctorsError } = await supabase
      .from('doctors')
      .select(`
        *,
        departments:department_id(department_name),
        specialties:specialty_id(specialty_name)
      `)
      .order('created_at', { ascending: false });

    console.log(`\nüë®‚Äç‚öïÔ∏è Doctors: ${doctors?.length || 0} records`);
    if (doctors && doctors.length > 0) {
      doctors.slice(0, 5).forEach(d => {
        console.log(`   - ${d.doctor_id}: ${d.full_name} (${d.specialization})`);
      });
    }

    // Check patients
    const { data: patients, error: patientsError } = await supabase
      .from('patients')
      .select('*')
      .order('created_at', { ascending: false });

    console.log(`\nü§í Patients: ${patients?.length || 0} records`);
    if (patients && patients.length > 0) {
      patients.slice(0, 3).forEach(p => {
        console.log(`   - ${p.patient_id}: ${p.full_name}`);
      });
    }

    // Check appointments
    const { data: appointments, error: appointmentsError } = await supabase
      .from('appointments')
      .select('*')
      .order('created_at', { ascending: false });

    console.log(`\nüìÖ Appointments: ${appointments?.length || 0} records`);
    if (appointments && appointments.length > 0) {
      appointments.slice(0, 3).forEach(a => {
        console.log(`   - ${a.appointment_id}: ${a.appointment_date} ${a.start_time} (${a.status})`);
      });
    }

    // Check doctor reviews
    const { data: reviews, error: reviewsError } = await supabase
      .from('doctor_reviews')
      .select('*')
      .order('created_at', { ascending: false });

    console.log(`\n‚≠ê Doctor Reviews: ${reviews?.length || 0} records`);
    if (reviews && reviews.length > 0) {
      reviews.slice(0, 3).forEach(r => {
        console.log(`   - Doctor ${r.doctor_id}: ${r.rating}/5 stars`);
      });
    }

    return {
      profiles: profiles?.length || 0,
      departments: departments?.length || 0,
      specialties: specialties?.length || 0,
      doctors: doctors?.length || 0,
      patients: patients?.length || 0,
      appointments: appointments?.length || 0,
      reviews: reviews?.length || 0,
      departmentsList: departments || [],
      specialtiesList: specialties || []
    };

  } catch (error) {
    console.error('‚ùå Error checking data:', error.message);
    return null;
  }
}

async function createTestData(currentData) {
  console.log('\nüöÄ CREATING COMPREHENSIVE TEST DATA');
  console.log('='.repeat(50));

  try {
    // Ensure we have departments
    if (currentData.departments === 0) {
      console.log('üìù Creating departments...');
      const departments = [
        { department_id: 'DEPT001', department_name: 'Tim m·∫°ch', description: 'Khoa Tim m·∫°ch' },
        { department_id: 'DEPT002', department_name: 'Th·∫ßn kinh', description: 'Khoa Th·∫ßn kinh' },
        { department_id: 'DEPT003', department_name: 'Nhi khoa', description: 'Khoa Nhi' },
        { department_id: 'DEPT004', department_name: 'S·∫£n ph·ª• khoa', description: 'Khoa S·∫£n ph·ª• khoa' },
        { department_id: 'DEPT005', department_name: 'Ngo·∫°i khoa', description: 'Khoa Ngo·∫°i' }
      ];

      const { error: deptError } = await supabase
        .from('departments')
        .upsert(departments);

      if (deptError) {
        console.log('‚ùå Error creating departments:', deptError.message);
        return;
      }
      console.log('‚úÖ Created 5 departments');
    }

    // Ensure we have specialties
    if (currentData.specialties === 0) {
      console.log('üìù Creating specialties...');
      const specialties = [
        { specialty_id: 'SPEC001', specialty_name: 'Tim m·∫°ch can thi·ªáp', department_id: 'DEPT001' },
        { specialty_id: 'SPEC002', specialty_name: 'Si√™u √¢m tim', department_id: 'DEPT001' },
        { specialty_id: 'SPEC003', specialty_name: 'Th·∫ßn kinh h·ªçc', department_id: 'DEPT002' },
        { specialty_id: 'SPEC004', specialty_name: 'Nhi tim m·∫°ch', department_id: 'DEPT003' },
        { specialty_id: 'SPEC005', specialty_name: 'Nhi ti√™u h√≥a', department_id: 'DEPT003' },
        { specialty_id: 'SPEC006', specialty_name: 'S·∫£n khoa', department_id: 'DEPT004' },
        { specialty_id: 'SPEC007', specialty_name: 'Ph·ª• khoa', department_id: 'DEPT004' },
        { specialty_id: 'SPEC008', specialty_name: 'Ngo·∫°i t·ªïng qu√°t', department_id: 'DEPT005' }
      ];

      const { error: specError } = await supabase
        .from('specialties')
        .upsert(specialties);

      if (specError) {
        console.log('‚ùå Error creating specialties:', specError.message);
        return;
      }
      console.log('‚úÖ Created 8 specialties');
    }

    // Create test doctor profiles if needed
    if (currentData.doctors < 5) {
      console.log('üìù Creating doctor test data...');
      
      const doctorProfiles = [
        {
          email: 'doctor1@hospital.com',
          role: 'doctor',
          full_name: 'BS. Nguy·ªÖn VƒÉn H√πng',
          phone_number: '0901234567',
          date_of_birth: '1980-05-15'
        },
        {
          email: 'doctor2@hospital.com',
          role: 'doctor',
          full_name: 'BS. Tr·∫ßn Th·ªã Lan',
          phone_number: '0901234568',
          date_of_birth: '1985-08-20'
        },
        {
          email: 'doctor3@hospital.com',
          role: 'doctor',
          full_name: 'BS. L√™ Minh Tu·∫•n',
          phone_number: '0901234569',
          date_of_birth: '1978-12-10'
        },
        {
          email: 'doctor4@hospital.com',
          role: 'doctor',
          full_name: 'BS. Ph·∫°m Th·ªã Mai',
          phone_number: '0901234570',
          date_of_birth: '1982-03-25'
        },
        {
          email: 'doctor5@hospital.com',
          role: 'doctor',
          full_name: 'BS. Ho√†ng VƒÉn Nam',
          phone_number: '0901234571',
          date_of_birth: '1975-11-08'
        }
      ];

      // Create profiles first
      const { data: createdProfiles, error: profileError } = await supabase
        .from('profiles')
        .upsert(doctorProfiles, { onConflict: 'email' })
        .select();

      if (profileError) {
        console.log('‚ùå Error creating doctor profiles:', profileError.message);
        return;
      }

      console.log(`‚úÖ Created ${createdProfiles.length} doctor profiles`);

      // Create doctor records
      const doctors = [
        {
          profile_id: createdProfiles[0].profile_id,
          full_name: 'BS. Nguy·ªÖn VƒÉn H√πng',
          specialization: 'Tim m·∫°ch can thi·ªáp',
          qualification: 'Ti·∫øn sƒ© Y khoa, Chuy√™n khoa II Tim m·∫°ch',
          department_id: 'DEPT001',
          specialty_id: 'SPEC001',
          license_number: 'VN-HM-1234',
          gender: 'male',
          phone_number: '0901234567',
          email: 'doctor1@hospital.com',
          experience_years: 15,
          consultation_fee: 500000,
          status: 'active'
        },
        {
          profile_id: createdProfiles[1].profile_id,
          full_name: 'BS. Tr·∫ßn Th·ªã Lan',
          specialization: 'Th·∫ßn kinh h·ªçc',
          qualification: 'Th·∫°c sƒ© Y khoa, Chuy√™n khoa I Th·∫ßn kinh',
          department_id: 'DEPT002',
          specialty_id: 'SPEC003',
          license_number: 'VN-HM-1235',
          gender: 'female',
          phone_number: '0901234568',
          email: 'doctor2@hospital.com',
          experience_years: 10,
          consultation_fee: 400000,
          status: 'active'
        },
        {
          profile_id: createdProfiles[2].profile_id,
          full_name: 'BS. L√™ Minh Tu·∫•n',
          specialization: 'Nhi tim m·∫°ch',
          qualification: 'Ti·∫øn sƒ© Y khoa, Chuy√™n khoa II Nhi',
          department_id: 'DEPT003',
          specialty_id: 'SPEC004',
          license_number: 'VN-HM-1236',
          gender: 'male',
          phone_number: '0901234569',
          email: 'doctor3@hospital.com',
          experience_years: 18,
          consultation_fee: 600000,
          status: 'active'
        },
        {
          profile_id: createdProfiles[3].profile_id,
          full_name: 'BS. Ph·∫°m Th·ªã Mai',
          specialization: 'S·∫£n khoa',
          qualification: 'Th·∫°c sƒ© Y khoa, Chuy√™n khoa I S·∫£n ph·ª• khoa',
          department_id: 'DEPT004',
          specialty_id: 'SPEC006',
          license_number: 'VN-HM-1237',
          gender: 'female',
          phone_number: '0901234570',
          email: 'doctor4@hospital.com',
          experience_years: 12,
          consultation_fee: 450000,
          status: 'active'
        },
        {
          profile_id: createdProfiles[4].profile_id,
          full_name: 'BS. Ho√†ng VƒÉn Nam',
          specialization: 'Ngo·∫°i t·ªïng qu√°t',
          qualification: 'Ti·∫øn sƒ© Y khoa, Chuy√™n khoa II Ngo·∫°i',
          department_id: 'DEPT005',
          specialty_id: 'SPEC008',
          license_number: 'VN-HM-1238',
          gender: 'male',
          phone_number: '0901234571',
          email: 'doctor5@hospital.com',
          experience_years: 20,
          consultation_fee: 550000,
          status: 'active'
        }
      ];

      const { data: createdDoctors, error: doctorError } = await supabase
        .from('doctors')
        .upsert(doctors, { onConflict: 'email' })
        .select();

      if (doctorError) {
        console.log('‚ùå Error creating doctors:', doctorError.message);
        return;
      }

      console.log(`‚úÖ Created ${createdDoctors.length} doctors with proper IDs`);
    }

    // Create test patients if needed
    if (currentData.patients < 3) {
      console.log('üìù Creating patient test data...');

      const patientProfiles = [
        {
          email: 'patient1@test.com',
          role: 'patient',
          full_name: 'Nguy·ªÖn Th·ªã Hoa',
          phone_number: '0987654321',
          date_of_birth: '1990-06-15'
        },
        {
          email: 'patient2@test.com',
          role: 'patient',
          full_name: 'Tr·∫ßn VƒÉn Minh',
          phone_number: '0987654322',
          date_of_birth: '1985-03-20'
        },
        {
          email: 'patient3@test.com',
          role: 'patient',
          full_name: 'L√™ Th·ªã Mai',
          phone_number: '0987654323',
          date_of_birth: '1992-12-10'
        }
      ];

      const { data: createdPatientProfiles, error: patientProfileError } = await supabase
        .from('profiles')
        .upsert(patientProfiles, { onConflict: 'email' })
        .select();

      if (patientProfileError) {
        console.log('‚ùå Error creating patient profiles:', patientProfileError.message);
      } else {
        const patients = [
          {
            profile_id: createdPatientProfiles[0].profile_id,
            full_name: 'Nguy·ªÖn Th·ªã Hoa',
            gender: 'female',
            phone_number: '0987654321',
            email: 'patient1@test.com',
            emergency_contact: '0912345678',
            blood_type: 'A+',
            allergies: 'Kh√¥ng c√≥',
            medical_history: 'Ti·ªÅn s·ª≠ cao huy·∫øt √°p'
          },
          {
            profile_id: createdPatientProfiles[1].profile_id,
            full_name: 'Tr·∫ßn VƒÉn Minh',
            gender: 'male',
            phone_number: '0987654322',
            email: 'patient2@test.com',
            emergency_contact: '0912345679',
            blood_type: 'O+',
            allergies: 'D·ªã ·ª©ng thu·ªëc kh√°ng sinh',
            medical_history: 'Ti·ªÅn s·ª≠ ƒë√°i th√°o ƒë∆∞·ªùng'
          },
          {
            profile_id: createdPatientProfiles[2].profile_id,
            full_name: 'L√™ Th·ªã Mai',
            gender: 'female',
            phone_number: '0987654323',
            email: 'patient3@test.com',
            emergency_contact: '0912345680',
            blood_type: 'B+',
            allergies: 'Kh√¥ng c√≥',
            medical_history: 'Kh·ªèe m·∫°nh'
          }
        ];

        const { data: createdPatients, error: patientError } = await supabase
          .from('patients')
          .upsert(patients, { onConflict: 'email' })
          .select();

        if (patientError) {
          console.log('‚ùå Error creating patients:', patientError.message);
        } else {
          console.log(`‚úÖ Created ${createdPatients.length} patients`);
        }
      }
    }

    // Create test appointments if needed
    if (currentData.appointments < 10) {
      console.log('üìù Creating appointment test data...');

      // Get existing doctors and patients
      const { data: existingDoctors } = await supabase
        .from('doctors')
        .select('doctor_id')
        .limit(3);

      const { data: existingPatients } = await supabase
        .from('patients')
        .select('patient_id')
        .limit(3);

      if (existingDoctors && existingPatients && existingDoctors.length > 0 && existingPatients.length > 0) {
        const today = new Date();
        const appointments = [];

        // Create appointments for different dates and times
        for (let i = 0; i < 12; i++) {
          const appointmentDate = new Date(today);
          appointmentDate.setDate(today.getDate() + (i - 6)); // Past, present, and future appointments

          const hour = 8 + (i % 8); // 8AM to 3PM
          const status = i < 4 ? 'completed' : i < 8 ? 'confirmed' : 'pending';

          appointments.push({
            doctor_id: existingDoctors[i % existingDoctors.length].doctor_id,
            patient_id: existingPatients[i % existingPatients.length].patient_id,
            appointment_date: appointmentDate.toISOString().split('T')[0],
            start_time: `${hour.toString().padStart(2, '0')}:00:00`,
            end_time: `${(hour + 1).toString().padStart(2, '0')}:00:00`,
            appointment_type: ['Kh√°m t·ªïng qu√°t', 'T√°i kh√°m', 'Kh√°m chuy√™n khoa'][i % 3],
            status: status,
            notes: `Ghi ch√∫ cu·ªôc h·∫πn ${i + 1}`,
            reason: ['ƒêau ng·ª±c', 'Kh√°m ƒë·ªãnh k·ª≥', 'Theo d√µi ƒëi·ªÅu tr·ªã'][i % 3]
          });
        }

        const { data: createdAppointments, error: appointmentError } = await supabase
          .from('appointments')
          .upsert(appointments)
          .select();

        if (appointmentError) {
          console.log('‚ùå Error creating appointments:', appointmentError.message);
        } else {
          console.log(`‚úÖ Created ${createdAppointments.length} appointments`);
        }
      }
    }

    // Create doctor reviews if needed
    if (currentData.reviews < 5) {
      console.log('üìù Creating doctor review test data...');

      const { data: existingDoctors } = await supabase
        .from('doctors')
        .select('doctor_id')
        .limit(5);

      const { data: existingPatients } = await supabase
        .from('patients')
        .select('patient_id')
        .limit(3);

      if (existingDoctors && existingPatients && existingDoctors.length > 0 && existingPatients.length > 0) {
        const reviews = [];
        const reviewComments = [
          'B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp',
          'Kh√°m b·ªánh k·ªπ l∆∞·ª°ng, gi·∫£i th√≠ch r√µ r√†ng',
          'Th√°i ƒë·ªô th√¢n thi·ªán, ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£',
          'B√°c sƒ© gi·ªèi, kinh nghi·ªám nhi·ªÅu',
          'R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• kh√°m ch·ªØa b·ªánh'
        ];

        for (let i = 0; i < 15; i++) {
          const rating = Math.floor(Math.random() * 2) + 4; // 4-5 stars mostly
          reviews.push({
            doctor_id: existingDoctors[i % existingDoctors.length].doctor_id,
            patient_id: existingPatients[i % existingPatients.length].patient_id,
            rating: rating,
            comment: reviewComments[i % reviewComments.length],
            review_date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
          });
        }

        const { data: createdReviews, error: reviewError } = await supabase
          .from('doctor_reviews')
          .upsert(reviews)
          .select();

        if (reviewError) {
          console.log('‚ùå Error creating reviews:', reviewError.message);
        } else {
          console.log(`‚úÖ Created ${createdReviews.length} doctor reviews`);
        }
      }
    }

    console.log('\n‚úÖ Test data creation completed!');

  } catch (error) {
    console.error('‚ùå Error creating test data:', error.message);
  }
}

async function main() {
  console.log('üè• HOSPITAL MANAGEMENT - DOCTOR SERVICE TEST DATA SETUP');
  console.log('='.repeat(60));
  
  const currentData = await checkCurrentData();
  
  if (!currentData) {
    console.log('‚ùå Failed to check current data');
    return;
  }

  console.log('\nüìä SUMMARY:');
  console.log(`   Profiles: ${currentData.profiles}`);
  console.log(`   Departments: ${currentData.departments}`);
  console.log(`   Specialties: ${currentData.specialties}`);
  console.log(`   Doctors: ${currentData.doctors}`);
  console.log(`   Patients: ${currentData.patients}`);
  console.log(`   Appointments: ${currentData.appointments}`);
  console.log(`   Reviews: ${currentData.reviews}`);

  if (currentData.doctors < 5 || currentData.departments === 0 || currentData.specialties === 0) {
    await createTestData(currentData);
  } else {
    console.log('\n‚úÖ Sufficient test data already exists!');
  }

  // Final verification
  console.log('\nüîç FINAL VERIFICATION:');
  await checkCurrentData();
}

main().catch(console.error);
