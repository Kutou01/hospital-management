#!/usr/bin/env node

/**
 * Check Existing Departments Script
 * Fetches all departments from Supabase to update seed data
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkExistingDepartments() {
  console.log('üè• Checking Existing Departments on Supabase');
  console.log('=============================================\n');

  try {
    const { data: departments, error } = await supabase
      .from('departments')
      .select('*')
      .order('dept_id');

    if (error) {
      console.log(`‚ùå Error fetching departments: ${error.message}`);
      return;
    }

    if (!departments || departments.length === 0) {
      console.log('‚ö†Ô∏è No departments found in database');
      return;
    }

    console.log(`üìä Found ${departments.length} departments:\n`);

    departments.forEach((dept, index) => {
      console.log(`${index + 1}. ${dept.dept_id} - ${dept.name}`);
      console.log(`   Code: ${dept.code || 'N/A'}`);
      console.log(`   Description: ${dept.description || 'N/A'}`);
      console.log(`   Active: ${dept.is_active !== false ? 'Yes' : 'No'}`);
      console.log('');
    });

    // Generate updated seed data structure
    console.log('üìã Updated Seed Data Structure:');
    console.log('===============================\n');

    console.log('const DEPARTMENTS = [');
    departments.forEach(dept => {
      console.log(`  { dept_id: '${dept.dept_id}', name: '${dept.name}', code: '${dept.code || dept.dept_id}' },`);
    });
    console.log('];');

    console.log('\nüéØ Recommended Doctor Distribution:');
    console.log('===================================');
    const doctorsPerDept = Math.floor(120 / departments.length); // 120 doctors total
    const remainder = 120 % departments.length;

    departments.forEach((dept, index) => {
      const doctorCount = doctorsPerDept + (index < remainder ? 1 : 0);
      console.log(`${dept.dept_id} (${dept.name}): ${doctorCount} doctors`);
    });

    console.log(`\nTotal: 120 doctors across ${departments.length} departments`);

    // Generate specialties mapping
    console.log('\nüè• Suggested Specialties by Department:');
    console.log('======================================');
    
    const specialtyMapping = generateSpecialtyMapping(departments);
    specialtyMapping.forEach(mapping => {
      console.log(`\n${mapping.dept_id} - ${mapping.name}:`);
      mapping.specialties.forEach(specialty => {
        console.log(`  - ${specialty}`);
      });
    });

    return departments;

  } catch (error) {
    console.error('‚ùå Error checking departments:', error);
  }
}

function generateSpecialtyMapping(departments) {
  const specialtyMap = {
    'CARD': ['Tim m·∫°ch', 'Tim m·∫°ch can thi·ªáp', 'Si√™u √¢m tim', 'ƒêi·ªán t√¢m ƒë·ªì'],
    'NEUR': ['Th·∫ßn kinh', 'Th·∫ßn kinh c·ªôt s·ªëng', 'ƒê·ªôt qu·ªµ', 'ƒê·ªông kinh'],
    'PEDI': ['Nhi khoa', 'Nhi tim m·∫°ch', 'Nhi h√¥ h·∫•p', 'Nhi ti√™u h√≥a'],
    'ORTH': ['Ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh', 'C·ªôt s·ªëng', 'Kh·ªõp', 'Th·ªÉ thao'],
    'DERM': ['Da li·ªÖu', 'Th·∫©m m·ªπ da', 'D·ªã ·ª©ng da', 'Da li·ªÖu nhi'],
    'OBGY': ['S·∫£n ph·ª• khoa', 'Thai s·∫£n', 'Ph·ª• khoa', 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh'],
    'SURG': ['Ph·∫´u thu·∫≠t t·ªïng qu√°t', 'Ph·∫´u thu·∫≠t n·ªôi soi', 'Ph·∫´u thu·∫≠t c·∫•p c·ª©u', 'Ph·∫´u thu·∫≠t gan m·∫≠t'],
    'INTE': ['N·ªôi t·ªïng qu√°t', 'N·ªôi ti·∫øt', 'Ti·ªÉu ƒë∆∞·ªùng', 'Tuy·∫øn gi√°p'],
    'EMER': ['C·∫•p c·ª©u', 'H·ªìi s·ª©c c·∫•p c·ª©u', 'Ch·ªëng ƒë·ªôc', 'C·∫•p c·ª©u ngo·∫°i khoa'],
    'RADI': ['Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'X-quang', 'CT Scanner', 'MRI', 'Si√™u √¢m'],
    'ANES': ['G√¢y m√™ h·ªìi s·ª©c', 'G√¢y t√™ v√πng', 'ƒêi·ªÅu tr·ªã ƒëau', 'H·ªìi s·ª©c sau m·ªï'],
    'ONCO': ['Ung b∆∞·ªõu', 'H√≥a tr·ªã', 'X·∫° tr·ªã', 'ChƒÉm s√≥c gi·∫£m nh·∫π']
  };

  return departments.map(dept => {
    const specialties = specialtyMap[dept.dept_id] || [
      dept.name,
      `${dept.name} chuy√™n s√¢u`,
      `${dept.name} c·∫•p c·ª©u`,
      `${dept.name} nhi`
    ];

    return {
      dept_id: dept.dept_id,
      name: dept.name,
      specialties: specialties
    };
  });
}

// Run check
if (require.main === module) {
  checkExistingDepartments().catch(error => {
    console.error('‚ùå Check failed:', error);
    process.exit(1);
  });
}

module.exports = { checkExistingDepartments, generateSpecialtyMapping };
