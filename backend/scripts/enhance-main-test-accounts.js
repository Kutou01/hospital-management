const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function enhanceMainTestAccounts() {
  console.log('üîß ENHANCING MAIN TEST ACCOUNTS');
  console.log('='.repeat(60));

  try {
    // Step 1: Check and enhance doctor@hospital.com
    console.log('üë®‚Äç‚öïÔ∏è Step 1: Enhancing doctor@hospital.com...');
    
    const { data: doctorProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', 'doctor@hospital.com')
      .single();

    if (!doctorProfile) {
      console.log('‚ùå doctor@hospital.com profile not found');
      return;
    }

    console.log(`   ‚úÖ Found doctor profile: ${doctorProfile.full_name}`);

    // Get the doctor record
    const { data: doctorRecord } = await supabase
      .from('doctors')
      .select('*')
      .eq('profile_id', doctorProfile.id)
      .single();

    if (!doctorRecord) {
      console.log('‚ùå Doctor record not found for doctor@hospital.com');
      return;
    }

    console.log(`   ‚úÖ Found doctor record: ${doctorRecord.doctor_id}`);

    // Update doctor with comprehensive information
    const enhancedDoctorData = {
      full_name: 'BS. Nguy·ªÖn VƒÉn ƒê·ª©c',
      specialty: 'SPEC028', // Tim M·∫°ch H·ªçc
      department_id: 'DEPT001', // Khoa Tim M·∫°ch
      license_number: 'VN-MAIN-0001',
      qualification: 'Ti·∫øn sƒ© Y khoa, Chuy√™n khoa II Tim m·∫°ch, Th·∫°c sƒ© Qu·∫£n l√Ω Y t·∫ø',
      experience_years: 20,
      consultation_fee: 800000,
      gender: 'male',
      address: {
        street: '123 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´',
        district: 'Qu·∫≠n 1',
        city: 'TP.HCM',
        zipcode: '70000'
      },
      bio: 'B√°c sƒ© chuy√™n khoa Tim m·∫°ch v·ªõi 20 nƒÉm kinh nghi·ªám. Chuy√™n ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω tim m·∫°ch ph·ª©c t·∫°p, can thi·ªáp tim m·∫°ch v√† ph·∫´u thu·∫≠t tim. T·ª´ng tu nghi·ªáp t·∫°i M·ªπ v√† c√≥ nhi·ªÅu c√¥ng tr√¨nh nghi√™n c·ª©u qu·ªëc t·∫ø.',
      languages_spoken: ['Vietnamese', 'English', 'French'],
      availability_status: 'available',
      rating: 4.8,
      total_reviews: 15,
      status: 'active',
      is_active: true,
      certifications: [
        'Ch·ª©ng ch·ªâ Can thi·ªáp Tim m·∫°ch - H·ªôi Tim m·∫°ch Vi·ªát Nam',
        'Ch·ª©ng ch·ªâ Si√™u √¢m Tim - ESC Europe',
        'Ch·ª©ng ch·ªâ Qu·∫£n l√Ω Y t·∫ø - Harvard School of Public Health'
      ],
      awards: [
        'Th·∫ßy thu·ªëc ∆Øu t√∫ 2020',
        'Gi·∫£i th∆∞·ªüng Nghi√™n c·ª©u Y h·ªçc 2019',
        'B√°c sƒ© Xu·∫•t s·∫Øc TP.HCM 2018'
      ],
      research_interests: [
        'Can thi·ªáp tim m·∫°ch qua da',
        'ƒêi·ªÅu tr·ªã suy tim ti·∫øn tri·ªÉn',
        '·ª®ng d·ª•ng AI trong ch·∫©n ƒëo√°n tim m·∫°ch'
      ]
    };

    const { error: doctorUpdateError } = await supabase
      .from('doctors')
      .update(enhancedDoctorData)
      .eq('doctor_id', doctorRecord.doctor_id);

    if (doctorUpdateError) {
      console.log(`   ‚ùå Error updating doctor: ${doctorUpdateError.message}`);
    } else {
      console.log('   ‚úÖ Enhanced doctor record with comprehensive data');
    }

    // Update profile
    const { error: profileUpdateError } = await supabase
      .from('profiles')
      .update({
        full_name: 'BS. Nguy·ªÖn VƒÉn ƒê·ª©c',
        phone_number: '0901234567',
        date_of_birth: '1980-05-15'
      })
      .eq('id', doctorProfile.id);

    if (profileUpdateError) {
      console.log(`   ‚ùå Error updating profile: ${profileUpdateError.message}`);
    } else {
      console.log('   ‚úÖ Enhanced doctor profile');
    }

    // Step 2: Check and enhance patient@hospital.com
    console.log('\nü§í Step 2: Enhancing patient@hospital.com...');
    
    const { data: patientProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', 'patient@hospital.com')
      .single();

    if (!patientProfile) {
      console.log('‚ùå patient@hospital.com profile not found');
      return;
    }

    console.log(`   ‚úÖ Found patient profile: ${patientProfile.full_name}`);

    // Get the patient record
    const { data: patientRecord } = await supabase
      .from('patients')
      .select('*')
      .eq('profile_id', patientProfile.id)
      .single();

    if (!patientRecord) {
      console.log('‚ùå Patient record not found for patient@hospital.com');
      return;
    }

    console.log(`   ‚úÖ Found patient record: ${patientRecord.patient_id}`);

    // Update patient with comprehensive information
    const enhancedPatientData = {
      full_name: 'Tr·∫ßn Th·ªã H∆∞∆°ng',
      gender: 'female',
      blood_type: 'A+',
      address: {
        street: '456 ƒê∆∞·ªùng L√™ L·ª£i',
        district: 'Qu·∫≠n 1',
        city: 'TP.HCM',
        zipcode: '70000'
      },
      emergency_contact: {
        name: 'Tr·∫ßn VƒÉn Minh',
        phone: '0912345678',
        relationship: 'Ch·ªìng',
        address: '456 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM'
      },
      insurance_info: {
        provider: 'BHYT',
        policy_number: 'DN1234567890',
        expiry_date: '2025-12-31',
        coverage_type: 'To√†n di·ªán'
      },
      medical_history: 'Ti·ªÅn s·ª≠ cao huy·∫øt √°p t·ª´ nƒÉm 2020. ƒê√£ ph·∫´u thu·∫≠t c·∫Øt ru·ªôt th·ª´a nƒÉm 2018. Kh√¥ng c√≥ ti·ªÅn s·ª≠ d·ªã ·ª©ng thu·ªëc.',
      allergies: [
        'D·ªã ·ª©ng v·ªõi Penicillin',
        'D·ªã ·ª©ng v·ªõi t√¥m cua'
      ],
      chronic_conditions: [
        'Cao huy·∫øt √°p',
        'Ti·ªÉu ƒë∆∞·ªùng type 2 nh·∫π'
      ],
      current_medications: {
        'Amlodipine 5mg': 'U·ªëng 1 vi√™n/ng√†y v√†o bu·ªïi s√°ng',
        'Metformin 500mg': 'U·ªëng 1 vi√™n x 2 l·∫ßn/ng√†y sau ƒÉn',
        'Vitamin D3': 'U·ªëng 1 vi√™n/tu·∫ßn'
      },
      status: 'active',
      notes: 'B·ªánh nh√¢n tu√¢n th·ªß ƒëi·ªÅu tr·ªã t·ªët. C·∫ßn theo d√µi ƒë∆∞·ªùng huy·∫øt ƒë·ªãnh k·ª≥ 3 th√°ng/l·∫ßn.',
      date_of_birth: '1985-08-20'
    };

    const { error: patientUpdateError } = await supabase
      .from('patients')
      .update(enhancedPatientData)
      .eq('patient_id', patientRecord.patient_id);

    if (patientUpdateError) {
      console.log(`   ‚ùå Error updating patient: ${patientUpdateError.message}`);
    } else {
      console.log('   ‚úÖ Enhanced patient record with comprehensive data');
    }

    // Update patient profile
    const { error: patientProfileUpdateError } = await supabase
      .from('profiles')
      .update({
        full_name: 'Tr·∫ßn Th·ªã H∆∞∆°ng',
        phone_number: '0987654321',
        date_of_birth: '1985-08-20'
      })
      .eq('id', patientProfile.id);

    if (patientProfileUpdateError) {
      console.log(`   ‚ùå Error updating patient profile: ${patientProfileUpdateError.message}`);
    } else {
      console.log('   ‚úÖ Enhanced patient profile');
    }

    // Step 3: Create appointments between main doctor and patient
    console.log('\nüìÖ Step 3: Creating appointments between main accounts...');
    
    const mainAppointments = [];
    const today = new Date();
    
    // Create 10 appointments with various statuses and dates
    const appointmentData = [
      { days: -30, time: '09:00', status: 'completed', type: 'consultation', reason: 'Kh√°m t·ªïng qu√°t ƒë·ªãnh k·ª≥' },
      { days: -20, time: '10:00', status: 'completed', type: 'follow_up', reason: 'T√°i kh√°m sau ƒëi·ªÅu tr·ªã' },
      { days: -10, time: '14:00', status: 'completed', type: 'consultation', reason: 'Kh√°m chuy√™n khoa tim m·∫°ch' },
      { days: -5, time: '11:00', status: 'completed', type: 'consultation', reason: 'Ki·ªÉm tra huy·∫øt √°p' },
      { days: 0, time: '15:00', status: 'confirmed', type: 'consultation', reason: 'Kh√°m ƒë·ªãnh k·ª≥ h√¥m nay' },
      { days: 3, time: '09:30', status: 'confirmed', type: 'follow_up', reason: 'T√°i kh√°m k·∫øt qu·∫£ x√©t nghi·ªám' },
      { days: 7, time: '10:30', status: 'scheduled', type: 'consultation', reason: 'Kh√°m tim m·∫°ch ƒë·ªãnh k·ª≥' },
      { days: 14, time: '14:30', status: 'scheduled', type: 'consultation', reason: 'Theo d√µi ƒëi·ªÅu tr·ªã' },
      { days: 21, time: '11:30', status: 'scheduled', type: 'follow_up', reason: 'T√°i kh√°m sau 3 tu·∫ßn' },
      { days: 30, time: '16:00', status: 'scheduled', type: 'consultation', reason: 'Kh√°m ƒë·ªãnh k·ª≥ th√°ng t·ªõi' }
    ];

    for (let i = 0; i < appointmentData.length; i++) {
      const apt = appointmentData[i];
      const appointmentDate = new Date(today);
      appointmentDate.setDate(today.getDate() + apt.days);
      
      const [hour, minute] = apt.time.split(':');
      const endHour = parseInt(hour) + 1;
      
      mainAppointments.push({
        appointment_id: `MAIN${Date.now().toString().slice(-6)}${i.toString().padStart(2, '0')}`,
        doctor_id: doctorRecord.doctor_id,
        patient_id: patientRecord.patient_id,
        appointment_date: appointmentDate.toISOString().split('T')[0],
        start_time: `${hour}:${minute}:00`,
        end_time: `${endHour.toString().padStart(2, '0')}:${minute}:00`,
        appointment_type: apt.type,
        status: apt.status,
        reason: apt.reason,
        notes: `Cu·ªôc h·∫πn ${apt.reason.toLowerCase()} - ${apt.status}`
      });
    }

    const { data: createdMainAppointments, error: mainAppointmentError } = await supabase
      .from('appointments')
      .insert(mainAppointments)
      .select();

    if (mainAppointmentError) {
      console.log(`   ‚ùå Error creating main appointments: ${mainAppointmentError.message}`);
    } else {
      console.log(`   ‚úÖ Created ${createdMainAppointments.length} appointments between main accounts`);
    }

    // Step 4: Create reviews from patient to doctor
    console.log('\n‚≠ê Step 4: Creating reviews from main patient to main doctor...');
    
    const mainReviews = [
      {
        review_id: `MAIN${Date.now().toString().slice(-6)}01`,
        doctor_id: doctorRecord.doctor_id,
        patient_id: patientRecord.patient_id,
        rating: 5,
        review_date: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      },
      {
        review_id: `MAIN${Date.now().toString().slice(-6)}02`,
        doctor_id: doctorRecord.doctor_id,
        patient_id: patientRecord.patient_id,
        rating: 5,
        review_date: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      }
    ];

    // Check if reviews already exist
    const { data: existingReviews } = await supabase
      .from('doctor_reviews')
      .select('*')
      .eq('doctor_id', doctorRecord.doctor_id)
      .eq('patient_id', patientRecord.patient_id);

    if (existingReviews && existingReviews.length === 0) {
      const { data: createdMainReviews, error: mainReviewError } = await supabase
        .from('doctor_reviews')
        .insert(mainReviews)
        .select();

      if (mainReviewError) {
        console.log(`   ‚ùå Error creating main reviews: ${mainReviewError.message}`);
      } else {
        console.log(`   ‚úÖ Created ${createdMainReviews.length} reviews from main patient`);
      }
    } else {
      console.log(`   ‚ÑπÔ∏è  Reviews already exist between main accounts`);
    }

    // Step 5: Update doctor rating
    console.log('\nüìä Step 5: Updating main doctor rating...');
    
    const { data: allDoctorReviews } = await supabase
      .from('doctor_reviews')
      .select('rating')
      .eq('doctor_id', doctorRecord.doctor_id);

    if (allDoctorReviews && allDoctorReviews.length > 0) {
      const totalRating = allDoctorReviews.reduce((sum, review) => sum + review.rating, 0);
      const averageRating = totalRating / allDoctorReviews.length;
      
      await supabase
        .from('doctors')
        .update({
          rating: Math.round(averageRating * 10) / 10,
          total_reviews: allDoctorReviews.length
        })
        .eq('doctor_id', doctorRecord.doctor_id);
      
      console.log(`   ‚úÖ Updated doctor rating: ${averageRating.toFixed(1)}/5 (${allDoctorReviews.length} reviews)`);
    }

    // Final summary
    console.log('\n‚úÖ MAIN TEST ACCOUNTS ENHANCEMENT COMPLETED!');
    console.log('='.repeat(60));
    console.log('üîë ENHANCED MAIN TEST ACCOUNTS:');
    console.log('');
    console.log('üë®‚Äç‚öïÔ∏è DOCTOR ACCOUNT:');
    console.log('   Email: doctor@hospital.com');
    console.log('   Password: Doctor123!');
    console.log('   Name: BS. Nguy·ªÖn VƒÉn ƒê·ª©c');
    console.log('   Specialty: Tim M·∫°ch H·ªçc');
    console.log('   Experience: 20 years');
    console.log('   Rating: 4.8/5 stars');
    console.log('   Fee: 800,000 VND');
    console.log('');
    console.log('ü§í PATIENT ACCOUNT:');
    console.log('   Email: patient@hospital.com');
    console.log('   Password: Patient123!');
    console.log('   Name: Tr·∫ßn Th·ªã H∆∞∆°ng');
    console.log('   Age: 39 years old');
    console.log('   Conditions: Cao huy·∫øt √°p, Ti·ªÉu ƒë∆∞·ªùng type 2');
    console.log('   Insurance: BHYT - DN1234567890');
    console.log('');
    console.log('üìÖ APPOINTMENTS: 10 appointments (past, present, future)');
    console.log('‚≠ê REVIEWS: Patient has reviewed the doctor');
    console.log('');
    console.log('üéØ READY FOR COMPREHENSIVE TESTING!');

  } catch (error) {
    console.error('‚ùå Error enhancing main test accounts:', error.message);
  }
}

async function main() {
  await enhanceMainTestAccounts();
}

main().catch(console.error);
