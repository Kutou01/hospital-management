const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env' });

// Supabase configuration
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('üè• GENERATING RICH TEST DATA FOR DOCTOR PROFILE');
console.log('==============================================\n');

// Vietnamese patient names
const vietnameseNames = [
  'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ VƒÉn C∆∞·ªùng', 'Ph·∫°m Th·ªã Dung',
  'Ho√†ng VƒÉn Em', 'V≈© Th·ªã Ph∆∞∆°ng', 'ƒê·∫∑ng VƒÉn Giang', 'B√πi Th·ªã Hoa',
  'ƒêinh VƒÉn Inh', 'Cao Th·ªã Kim', 'L√Ω VƒÉn Long', 'Phan Th·ªã Mai',
  'T·∫° VƒÉn Nam', 'ƒê·ªó Th·ªã Oanh', 'V√µ VƒÉn Ph√∫c', 'Chu Th·ªã Qu·ª≥nh',
  'H·ªì VƒÉn R·ªìng', 'L∆∞u Th·ªã S∆∞∆°ng', 'M√£ VƒÉn T√†i', '√îng Th·ªã Uy√™n'
];

// Vietnamese review texts
const vietnameseReviews = [
  'B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. Gi·∫£i th√≠ch r√µ r√†ng v·ªÅ t√¨nh tr·∫°ng b·ªánh.',
  'Ph·∫´u thu·∫≠t th√†nh c√¥ng, b√°c sƒ© c√≥ tay ngh·ªÅ cao. R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª•.',
  'B√°c sƒ© kh√°m r·∫•t k·ªπ, tuy nhi√™n th·ªùi gian ch·ªù h∆°i l√¢u.',
  'ƒêi·ªÅu tr·ªã hi·ªáu qu·∫£, b·ªánh ƒë√£ kh·ªèi ho√†n to√†n. C·∫£m ∆°n b√°c sƒ© r·∫•t nhi·ªÅu.',
  'B√°c sƒ© th√¢n thi·ªán, t∆∞ v·∫•n chi ti·∫øt. S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.',
  'Kh√°m b·ªánh nhanh ch√≥ng, ch·∫©n ƒëo√°n ch√≠nh x√°c. R·∫•t chuy√™n nghi·ªáp.',
  'B√°c sƒ© c√≥ kinh nghi·ªám, ƒëi·ªÅu tr·ªã ƒë√∫ng c√°ch. B·ªánh ƒë√£ thuy√™n gi·∫£m nhi·ªÅu.',
  'Th√°i ƒë·ªô t·ªët, gi·∫£i th√≠ch d·ªÖ hi·ªÉu. C·∫£m th·∫•y an t√¢m khi kh√°m ·ªü ƒë√¢y.',
  'B√°c sƒ© r·∫•t ki√™n nh·∫´n, l·∫Øng nghe t√¢m s·ª± c·ªßa b·ªánh nh√¢n.',
  'ƒêi·ªÅu tr·ªã th√†nh c√¥ng, kh√¥ng c√≥ bi·∫øn ch·ª©ng. R·∫•t tin t∆∞·ªüng b√°c sƒ©.'
];

async function generateRichTestData() {
  try {
    console.log('üìä Step 1: Updating existing appointments with new fields...');
    
    // Update existing appointments with patient_type and priority
    const { data: existingAppointments, error: fetchError } = await supabase
      .from('appointments')
      .select('appointment_id');

    if (fetchError) {
      console.error('‚ùå Error fetching appointments:', fetchError);
      return;
    }

    // Update existing appointments
    for (const apt of existingAppointments || []) {
      const patientType = Math.random() > 0.6 ? 'new' : 'returning';
      const priority = Math.random() > 0.9 ? 'urgent' : 'normal';
      const rating = Math.floor(Math.random() * 2) + 4; // 4-5 stars

      await supabase
        .from('appointments')
        .update({
          patient_type: patientType,
          priority: priority,
          appointment_rating: rating,
          consultation_duration: Math.floor(Math.random() * 30) + 20 // 20-50 minutes
        })
        .eq('appointment_id', apt.appointment_id);
    }

    console.log(`‚úÖ Updated ${existingAppointments?.length || 0} existing appointments`);

    console.log('\nüìÖ Step 2: Generating additional appointments...');
    
    // Get test doctor
    const { data: testDoctor, error: doctorError } = await supabase
      .from('doctors')
      .select('doctor_id')
      .eq('doctor_id', 'GENE-DOC-202506-006')
      .single();

    if (doctorError || !testDoctor) {
      console.error('‚ùå Test doctor not found');
      return;
    }

    // Get test patients
    const { data: testPatients, error: patientsError } = await supabase
      .from('patients')
      .select('patient_id')
      .limit(10);

    if (patientsError || !testPatients || testPatients.length === 0) {
      console.error('‚ùå No test patients found');
      return;
    }

    // Generate appointments for the last 30 days and next 7 days
    const appointments = [];
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 30);

    for (let i = 0; i < 37; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      
      // Skip weekends for some variety
      if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
        if (Math.random() > 0.3) continue;
      }

      // Generate 1-4 appointments per day
      const appointmentsPerDay = Math.floor(Math.random() * 4) + 1;
      
      for (let j = 0; j < appointmentsPerDay; j++) {
        const hour = 8 + Math.floor(Math.random() * 8); // 8 AM to 4 PM
        const minute = Math.random() > 0.5 ? 0 : 30;
        
        const appointmentDate = currentDate.toISOString().split('T')[0];
        const startTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
        const endHour = minute === 30 ? hour + 1 : hour;
        const endMinute = minute === 30 ? 0 : 30;
        const endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}:00`;
        
        // Determine status based on date
        let status = 'scheduled';
        if (currentDate < new Date()) {
          status = Math.random() > 0.1 ? 'completed' : 'cancelled';
        }

        const patientType = Math.random() > 0.4 ? 'returning' : 'new';
        const priority = Math.random() > 0.95 ? 'urgent' : 'normal';
        const rating = status === 'completed' ? Math.floor(Math.random() * 2) + 4 : null;

        appointments.push({
          appointment_id: `APT-${Math.floor(Math.random() * 900000) + 100000}`,
          doctor_id: testDoctor.doctor_id,
          patient_id: testPatients[Math.floor(Math.random() * testPatients.length)].patient_id,
          appointment_date: appointmentDate,
          start_time: startTime,
          end_time: endTime,
          appointment_type: 'consultation',
          status: status,
          reason: 'Kh√°m t·ªïng qu√°t',
          patient_type: patientType,
          priority: priority,
          consultation_duration: Math.floor(Math.random() * 30) + 20,
          appointment_rating: rating,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      }
    }

    // Insert appointments in batches
    const batchSize = 10;
    for (let i = 0; i < appointments.length; i += batchSize) {
      const batch = appointments.slice(i, i + batchSize);
      const { error: insertError } = await supabase
        .from('appointments')
        .insert(batch);

      if (insertError) {
        console.error('‚ùå Error inserting appointment batch:', insertError);
      }
    }

    console.log(`‚úÖ Generated ${appointments.length} additional appointments`);

    console.log('\n‚≠ê Step 3: Generating additional reviews...');
    
    // Generate more reviews
    const reviews = [];
    for (let i = 0; i < 15; i++) {
      const reviewDate = new Date();
      reviewDate.setDate(reviewDate.getDate() - Math.floor(Math.random() * 60));
      
      reviews.push({
        review_id: `REV-${Math.floor(Math.random() * 900000) + 100000}`,
        doctor_id: testDoctor.doctor_id,
        patient_id: testPatients[Math.floor(Math.random() * testPatients.length)].patient_id,
        rating: Math.floor(Math.random() * 2) + 4, // 4-5 stars mostly
        review_text: vietnameseReviews[Math.floor(Math.random() * vietnameseReviews.length)],
        review_date: reviewDate.toISOString(),
        is_verified: Math.random() > 0.3,
        helpful_count: Math.floor(Math.random() * 10),

        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    }

    const { error: reviewsError } = await supabase
      .from('doctor_reviews')
      .insert(reviews);

    if (reviewsError) {
      console.error('‚ùå Error inserting reviews:', reviewsError);
    } else {
      console.log(`‚úÖ Generated ${reviews.length} additional reviews`);
    }

    console.log('\nüìà Step 4: Generating performance metrics...');
    
    // Generate performance metrics for the last 30 days
    const metrics = [];
    for (let i = 0; i < 30; i++) {
      const metricDate = new Date();
      metricDate.setDate(metricDate.getDate() - i);
      
      const dateStr = metricDate.toISOString().split('T')[0];
      
      metrics.push({
        metric_id: `MET-${Math.floor(Math.random() * 900000) + 100000}`,
        doctor_id: testDoctor.doctor_id,
        metric_date: dateStr,
        total_appointments: Math.floor(Math.random() * 8) + 2,
        completed_appointments: Math.floor(Math.random() * 6) + 2,
        cancelled_appointments: Math.floor(Math.random() * 2),
        no_show_appointments: Math.floor(Math.random() * 1),
        new_patients: Math.floor(Math.random() * 3) + 1,
        returning_patients: Math.floor(Math.random() * 4) + 1,
        total_unique_patients: Math.floor(Math.random() * 6) + 3,
        average_consultation_time: Math.floor(Math.random() * 20) + 25,
        on_time_percentage: Math.floor(Math.random() * 20) + 80,
        patient_satisfaction_score: (Math.random() * 1 + 4).toFixed(2),
        success_rate: Math.floor(Math.random() * 15) + 85,
        total_revenue: (Math.random() * 2000000 + 1000000).toFixed(2),
        average_revenue_per_patient: (Math.random() * 300000 + 200000).toFixed(2),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    }

    // Insert metrics in batches
    for (let i = 0; i < metrics.length; i += batchSize) {
      const batch = metrics.slice(i, i + batchSize);
      const { error: metricsError } = await supabase
        .from('doctor_performance_metrics')
        .upsert(batch, { onConflict: 'doctor_id,metric_date' });

      if (metricsError) {
        console.error('‚ùå Error inserting metrics batch:', metricsError);
      }
    }

    console.log(`‚úÖ Generated ${metrics.length} performance metrics`);

    console.log('\nüéØ Step 5: Updating doctor rating based on reviews...');
    
    // Calculate and update doctor's overall rating
    const { data: allReviews, error: allReviewsError } = await supabase
      .from('doctor_reviews')
      .select('rating')
      .eq('doctor_id', testDoctor.doctor_id);

    if (!allReviewsError && allReviews && allReviews.length > 0) {
      const averageRating = allReviews.reduce((sum, review) => sum + review.rating, 0) / allReviews.length;
      
      await supabase
        .from('doctors')
        .update({
          rating: Math.round(averageRating * 100) / 100,
          total_reviews: allReviews.length
        })
        .eq('doctor_id', testDoctor.doctor_id);

      console.log(`‚úÖ Updated doctor rating: ${averageRating.toFixed(2)} (${allReviews.length} reviews)`);
    }

    console.log('\n‚úÖ RICH TEST DATA GENERATION COMPLETED!');
    console.log('=====================================');
    console.log(`üìä Generated data summary:`);
    console.log(`   ‚Ä¢ ${appointments.length} new appointments`);
    console.log(`   ‚Ä¢ ${reviews.length} new reviews`);
    console.log(`   ‚Ä¢ ${metrics.length} performance metrics`);
    console.log(`   ‚Ä¢ Updated doctor ratings`);
    console.log('\nüéâ Your doctor profile page now has rich data for testing!');

  } catch (error) {
    console.error('üí• Error generating test data:', error);
  }
}

// Run the data generation
generateRichTestData()
  .then(() => {
    console.log('\nüèÅ Test data generation completed successfully!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Test data generation failed:', error);
    process.exit(1);
  });
