#!/usr/bin/env node

/**
 * Comprehensive Test Data Seeding Script
 * Creates realistic data for testing Doctor and Patient services
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Will be populated from existing departments in database
let DEPARTMENTS = [];

// Generate doctors based on existing departments
async function generateDoctorProfiles() {
  // Fetch existing departments from database
  // Try both column naming conventions
  let { data: existingDepartments, error } = await supabase
    .from('departments')
    .select('dept_id, name, department_id, department_name, department_code')
    .order('dept_id');

  // If dept_id doesn't exist, try with original column names
  if (error && error.message.includes('dept_id')) {
    const { data: deptData, error: deptError } = await supabase
      .from('departments')
      .select('department_id, department_name, department_code')
      .order('department_id');

    if (!deptError && deptData) {
      // Map to expected format
      existingDepartments = deptData.map(dept => ({
        dept_id: dept.department_id,
        name: dept.department_name,
        code: dept.department_code
      }));
      error = null;
    }
  }

  if (error || !existingDepartments || existingDepartments.length === 0) {
    console.log('‚ö†Ô∏è No departments found, using default departments');
    // Fallback to default departments
    existingDepartments = [
      { dept_id: 'CARD', name: 'Tim m·∫°ch' },
      { dept_id: 'NEUR', name: 'Th·∫ßn kinh' },
      { dept_id: 'PEDI', name: 'Nhi khoa' },
      { dept_id: 'ORTH', name: 'Ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh' },
      { dept_id: 'DERM', name: 'Da li·ªÖu' }
    ];
  }

  // Update global DEPARTMENTS variable
  DEPARTMENTS = existingDepartments.map(dept => ({
    dept_id: dept.dept_id,
    name: dept.name,
    code: dept.dept_id
  }));

  console.log(`üìä Found ${DEPARTMENTS.length} departments for doctor generation`);

  const doctors = [];

  // Calculate doctors per department (aim for 120 total doctors)
  const totalDoctors = 120;
  const doctorsPerDept = Math.floor(totalDoctors / DEPARTMENTS.length);
  const remainder = totalDoctors % DEPARTMENTS.length;

  // Enhanced specialty mapping for all departments
  const specialtyMapping = {
    'CARD': ['Tim m·∫°ch', 'Tim m·∫°ch can thi·ªáp', 'Si√™u √¢m tim', 'ƒêi·ªán t√¢m ƒë·ªì'],
    'NEUR': ['Th·∫ßn kinh', 'Th·∫ßn kinh c·ªôt s·ªëng', 'ƒê·ªôt qu·ªµ', 'ƒê·ªông kinh'],
    'PEDI': ['Nhi khoa', 'Nhi tim m·∫°ch', 'Nhi h√¥ h·∫•p', 'Nhi ti√™u h√≥a'],
    'ORTH': ['Ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh', 'C·ªôt s·ªëng', 'Kh·ªõp', 'Th·ªÉ thao'],
    'DERM': ['Da li·ªÖu', 'Th·∫©m m·ªπ da', 'D·ªã ·ª©ng da', 'Da li·ªÖu nhi'],
    'OBGY': ['S·∫£n ph·ª• khoa', 'Thai s·∫£n', 'Ph·ª• khoa', 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh'],
    'SURG': ['Ph·∫´u thu·∫≠t t·ªïng qu√°t', 'Ph·∫´u thu·∫≠t n·ªôi soi', 'Ph·∫´u thu·∫≠t c·∫•p c·ª©u', 'Ph·∫´u thu·∫≠t gan m·∫≠t'],
    'INTE': ['N·ªôi t·ªïng qu√°t', 'N·ªôi ti·∫øt', 'Ti·ªÉu ƒë∆∞·ªùng', 'Tuy·∫øn gi√°p'],
    'EMER': ['C·∫•p c·ª©u', 'H·ªìi s·ª©c c·∫•p c·ª©u', 'Ch·ªëng ƒë·ªôc', 'C·∫•p c·ª©u ngo·∫°i khoa'],
    'RADI': ['Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', 'X-quang', 'CT Scanner', 'MRI', 'Si√™u √¢m'],
    'ANES': ['G√¢y m√™ h·ªìi s·ª©c', 'G√¢y t√™ v√πng', 'ƒêi·ªÅu tr·ªã ƒëau', 'H·ªìi s·ª©c sau m·ªï'],
    'ONCO': ['Ung b∆∞·ªõu', 'H√≥a tr·ªã', 'X·∫° tr·ªã', 'ChƒÉm s√≥c gi·∫£m nh·∫π']
  };

  const departments = DEPARTMENTS.map(dept => ({
    id: dept.dept_id,
    name: dept.name,
    specialties: specialtyMapping[dept.dept_id] || [
      dept.name,
      `${dept.name} chuy√™n s√¢u`,
      `${dept.name} c·∫•p c·ª©u`,
      `${dept.name} nhi`
    ]
  }));

  const firstNames = [
    'Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng',
    'B√πi', 'ƒê·ªó', 'H·ªì', 'Ng√¥', 'D∆∞∆°ng', 'L√Ω', 'ƒêinh', 'ƒê√†o', 'L∆∞∆°ng', 'T√¥'
  ];

  const maleMiddleNames = ['VƒÉn', 'ƒê·ª©c', 'Minh', 'Ho√†ng', 'Quang', 'Th√†nh', 'H·ªØu', 'C√¥ng', 'Thanh', 'Tu·∫•n'];
  const femaleMiddleNames = ['Th·ªã', 'Minh', 'Thu', 'H·ªìng', 'Lan', 'Mai', 'Kim', 'Thanh', 'Ng·ªçc', 'Ph∆∞∆°ng'];

  const maleLastNames = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'H·∫£i', 'Khang', 'Long', 'Nam', 'Phong', 'Qu√¢n', 'S∆°n', 'T√†i', 'Th·∫Øng', 'Vinh', 'Xu√¢n'];
  const femaleLastNames = ['Anh', 'B√≠ch', 'Chi', 'Dung', 'H√†', 'Linh', 'Loan', 'Nga', 'Oanh', 'Ph√∫c', 'Quy√™n', 'Th·∫£o', 'Uy√™n', 'V√¢n', 'Y·∫øn'];

  const qualifications = ['Th·∫°c sƒ© Y khoa', 'Ti·∫øn sƒ© Y khoa', 'B√°c sƒ© Chuy√™n khoa I', 'B√°c sƒ© Chuy√™n khoa II', 'Gi√°o s∆∞', 'Ph√≥ Gi√°o s∆∞'];

  departments.forEach((dept, deptIndex) => {
    // Calculate number of doctors for this department
    const doctorCount = doctorsPerDept + (deptIndex < remainder ? 1 : 0);
    console.log(`   Generating ${doctorCount} doctors for ${dept.name} (${dept.id})`);

    for (let i = 1; i <= doctorCount; i++) {
      const isGender = Math.random() > 0.4 ? 'male' : 'female'; // 60% male, 40% female
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
      const middleName = isGender === 'male'
        ? maleMiddleNames[Math.floor(Math.random() * maleMiddleNames.length)]
        : femaleMiddleNames[Math.floor(Math.random() * femaleMiddleNames.length)];
      const lastName = isGender === 'male'
        ? maleLastNames[Math.floor(Math.random() * maleLastNames.length)]
        : femaleLastNames[Math.floor(Math.random() * femaleLastNames.length)];

      const fullName = `BS. ${firstName} ${middleName} ${lastName}`;
      const email = `bs.${firstName.toLowerCase()}.${lastName.toLowerCase()}${i}@hospital.com`;
      const phone = `090${Math.floor(Math.random() * 9000000) + 1000000}`;
      const birthYear = 1970 + Math.floor(Math.random() * 25); // Age 30-55
      const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');
      const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');
      const dateOfBirth = `${birthYear}-${birthMonth}-${birthDay}`;

      const specialty = dept.specialties[Math.floor(Math.random() * dept.specialties.length)];
      const qualification = qualifications[Math.floor(Math.random() * qualifications.length)];
      const experienceYears = 2024 - birthYear - 25; // Assuming graduated at 25
      const consultationFee = (300000 + Math.floor(Math.random() * 500000)) / 1000 * 1000; // 300k-800k, rounded to thousands

      const bios = [
        `B√°c sƒ© ${specialty.toLowerCase()} v·ªõi ${experienceYears} nƒÉm kinh nghi·ªám. Chuy√™n ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω ph·ª©c t·∫°p.`,
        `Chuy√™n gia ${specialty.toLowerCase()} h√†ng ƒë·∫ßu v·ªõi nhi·ªÅu c√¥ng tr√¨nh nghi√™n c·ª©u.`,
        `B√°c sƒ© gi√†u kinh nghi·ªám trong lƒ©nh v·ª±c ${specialty.toLowerCase()}. T·∫≠n t√¢m v·ªõi b·ªánh nh√¢n.`,
        `${qualification} chuy√™n khoa ${specialty.toLowerCase()}. ƒê√†o t·∫°o t·∫°i c√°c b·ªánh vi·ªán l·ªõn.`,
        `B√°c sƒ© ${specialty.toLowerCase()} v·ªõi chuy√™n m√¥n cao v√† th√°i ƒë·ªô th√¢n thi·ªán.`
      ];

      const languages = [
        ['Vietnamese', 'English'],
        ['Vietnamese', 'English', 'French'],
        ['Vietnamese', 'English', 'Japanese'],
        ['Vietnamese', 'English', 'German'],
        ['Vietnamese']
      ];

      doctors.push({
        email,
        full_name: fullName,
        phone_number: phone,
        date_of_birth: dateOfBirth,
        specialty,
        qualification,
        department_id: dept.id,
        license_number: `VN-${dept.id}-${birthYear}-${String(i).padStart(3, '0')}`,
        gender: isGender,
        bio: bios[Math.floor(Math.random() * bios.length)],
        experience_years: Math.max(1, experienceYears),
        consultation_fee: consultationFee,
        languages_spoken: languages[Math.floor(Math.random() * languages.length)]
      });
    }
  });

  return doctors;
}

// DOCTOR_PROFILES will be generated dynamically based on existing departments

// Generate 30 patients
function generatePatientProfiles() {
  const patients = [];

  const firstNames = [
    'Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng',
    'B√πi', 'ƒê·ªó', 'H·ªì', 'Ng√¥', 'D∆∞∆°ng', 'L√Ω', 'ƒêinh', 'ƒê√†o', 'L∆∞∆°ng', 'T√¥'
  ];

  const maleMiddleNames = ['VƒÉn', 'ƒê·ª©c', 'Minh', 'Ho√†ng', 'Quang', 'Th√†nh', 'H·ªØu', 'C√¥ng', 'Thanh', 'Tu·∫•n'];
  const femaleMiddleNames = ['Th·ªã', 'Minh', 'Thu', 'H·ªìng', 'Lan', 'Mai', 'Kim', 'Thanh', 'Ng·ªçc', 'Ph∆∞∆°ng'];

  const maleLastNames = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'H·∫£i', 'Khang', 'Long', 'Nam', 'Phong', 'Qu√¢n', 'S∆°n', 'T√†i', 'Th·∫Øng', 'Vinh', 'Xu√¢n'];
  const femaleLastNames = ['Anh', 'B√≠ch', 'Chi', 'Dung', 'H√†', 'Linh', 'Loan', 'Nga', 'Oanh', 'Ph√∫c', 'Quy√™n', 'Th·∫£o', 'Uy√™n', 'V√¢n', 'Y·∫øn'];

  const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];
  const districts = [
    'Qu·∫≠n 1', 'Qu·∫≠n 2', 'Qu·∫≠n 3', 'Qu·∫≠n 4', 'Qu·∫≠n 5', 'Qu·∫≠n 6', 'Qu·∫≠n 7', 'Qu·∫≠n 8', 'Qu·∫≠n 9', 'Qu·∫≠n 10',
    'Qu·∫≠n 11', 'Qu·∫≠n 12', 'Qu·∫≠n B√¨nh Th·∫°nh', 'Qu·∫≠n G√≤ V·∫•p', 'Qu·∫≠n Ph√∫ Nhu·∫≠n', 'Qu·∫≠n T√¢n B√¨nh', 'Qu·∫≠n T√¢n Ph√∫'
  ];
  const streets = [
    'Nguy·ªÖn Hu·ªá', 'L√™ L·ª£i', 'V√µ VƒÉn T·∫ßn', 'Hai B√† Tr∆∞ng', 'Nguy·ªÖn Th·ªã Minh Khai', 'C√°ch M·∫°ng Th√°ng 8',
    'L√Ω T·ª± Tr·ªçng', 'Pasteur', 'ƒêi·ªán Bi√™n Ph·ªß', 'Nguy·ªÖn Du', 'Tr·∫ßn H∆∞ng ƒê·∫°o', 'L√™ Th√°nh T√¥n'
  ];

  const medicalHistories = [
    'Kh·ªèe m·∫°nh, kh√¥ng c√≥ ti·ªÅn s·ª≠ b·ªánh l√Ω',
    'Ti·ªÅn s·ª≠ cao huy·∫øt √°p gia ƒë√¨nh',
    'Ti·ªÅn s·ª≠ ti·ªÉu ƒë∆∞·ªùng type 2',
    'ƒê√£ ph·∫´u thu·∫≠t ru·ªôt th·ª´a nƒÉm 2020',
    'D·ªã ·ª©ng thu·ªëc kh√°ng sinh',
    'Ti·ªÅn s·ª≠ hen suy·ªÖn nh·∫π',
    'ƒê√£ sinh con, kh√¥ng c√≥ bi·∫øn ch·ª©ng',
    'Ti·ªÅn s·ª≠ g√£y x∆∞∆°ng ch√¢n tr√°i',
    'Vi√™m d·∫° d√†y m√£n t√≠nh',
    'C·∫≠n th·ªã, ƒëeo k√≠nh t·ª´ nh·ªè'
  ];

  const allergiesList = [
    [],
    ['penicillin'],
    ['seafood'],
    ['peanuts'],
    ['dust'],
    ['pollen'],
    ['penicillin', 'sulfa'],
    ['shellfish'],
    ['eggs'],
    ['milk']
  ];

  const relationships = ['spouse', 'parent', 'child', 'sibling', 'friend'];

  for (let i = 1; i <= 30; i++) {
    const isGender = Math.random() > 0.5 ? 'male' : 'female';
    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const middleName = isGender === 'male'
      ? maleMiddleNames[Math.floor(Math.random() * maleMiddleNames.length)]
      : femaleMiddleNames[Math.floor(Math.random() * femaleMiddleNames.length)];
    const lastName = isGender === 'male'
      ? maleLastNames[Math.floor(Math.random() * maleLastNames.length)]
      : femaleLastNames[Math.floor(Math.random() * femaleLastNames.length)];

    const fullName = `${firstName} ${middleName} ${lastName}`;
    const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${i}@gmail.com`;
    const phone = `098${Math.floor(Math.random() * 9000000) + 1000000}`;

    // Age range: 18-80
    const birthYear = 1944 + Math.floor(Math.random() * 60);
    const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');
    const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');
    const dateOfBirth = `${birthYear}-${birthMonth}-${birthDay}`;

    const bloodType = bloodTypes[Math.floor(Math.random() * bloodTypes.length)];
    const district = districts[Math.floor(Math.random() * districts.length)];
    const street = streets[Math.floor(Math.random() * streets.length)];
    const houseNumber = Math.floor(Math.random() * 999) + 1;

    // Emergency contact
    const emergencyGender = Math.random() > 0.5 ? 'male' : 'female';
    const emergencyFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const emergencyMiddleName = emergencyGender === 'male'
      ? maleMiddleNames[Math.floor(Math.random() * maleMiddleNames.length)]
      : femaleMiddleNames[Math.floor(Math.random() * femaleMiddleNames.length)];
    const emergencyLastName = emergencyGender === 'male'
      ? maleLastNames[Math.floor(Math.random() * maleLastNames.length)]
      : femaleLastNames[Math.floor(Math.random() * femaleLastNames.length)];
    const emergencyName = `${emergencyFirstName} ${emergencyMiddleName} ${emergencyLastName}`;
    const emergencyPhone = `097${Math.floor(Math.random() * 9000000) + 1000000}`;
    const relationship = relationships[Math.floor(Math.random() * relationships.length)];

    const medicalHistory = medicalHistories[Math.floor(Math.random() * medicalHistories.length)];
    const allergies = allergiesList[Math.floor(Math.random() * allergiesList.length)];

    const notes = [
      'B·ªánh nh√¢n h·ª£p t√°c t·ªët',
      'C·∫ßn theo d√µi ƒë·∫∑c bi·ªát',
      'B·ªánh nh√¢n lo l·∫Øng, c·∫ßn t∆∞ v·∫•n t√¢m l√Ω',
      'Tu√¢n th·ªß ƒëi·ªÅu tr·ªã t·ªët',
      'C·∫ßn nh·∫Øc nh·ªü u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
      'B·ªánh nh√¢n c√≥ ki·∫øn th·ª©c y t·∫ø c∆° b·∫£n',
      'Gia ƒë√¨nh h·ªó tr·ª£ t·ªët',
      'C·∫ßn gi·∫£i th√≠ch r√µ v·ªÅ b·ªánh',
      'B·ªánh nh√¢n tr·∫ª tu·ªïi, nƒÉng ƒë·ªông',
      'Ng∆∞·ªùi cao tu·ªïi, c·∫ßn h·ªó tr·ª£'
    ];

    patients.push({
      email,
      full_name: fullName,
      phone_number: phone,
      date_of_birth: dateOfBirth,
      gender: isGender,
      blood_type: bloodType,
      address: {
        street: `${houseNumber} ${street}`,
        district: district,
        city: 'TP. H·ªì Ch√≠ Minh'
      },
      emergency_contact: {
        name: emergencyName,
        phone: emergencyPhone,
        relationship: relationship
      },
      medical_history: medicalHistory,
      allergies: allergies,
      notes: notes[Math.floor(Math.random() * notes.length)]
    });
  }

  return patients;
}

const PATIENT_PROFILES = generatePatientProfiles();

// Foreign key verification
async function verifyForeignKeyConstraints() {
  try {
    // Check if departments table exists and has data
    const { data: depts, error: deptError } = await supabase
      .from('departments')
      .select('dept_id')
      .limit(1);

    if (deptError || !depts || depts.length === 0) {
      console.log('   ‚ö†Ô∏è Departments table is empty or missing');
      return false;
    }

    // Check if required tables exist
    const requiredTables = ['profiles', 'doctors', 'patients', 'appointments', 'medical_records', 'doctor_schedules', 'doctor_reviews'];

    for (const table of requiredTables) {
      const { error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`   ‚ö†Ô∏è Table '${table}' does not exist or is not accessible`);
        return false;
      }
    }

    return true;
  } catch (error) {
    console.log(`   ‚ùå Error verifying constraints: ${error.message}`);
    return false;
  }
}

async function seedTestData() {
  console.log('üå± Starting comprehensive test data seeding...\n');

  try {
    // Step 0: Verify foreign key constraints
    console.log('üîó Verifying foreign key constraints...');
    const constraintsOk = await verifyForeignKeyConstraints();
    if (!constraintsOk) {
      throw new Error('Foreign key constraints not properly configured');
    }
    console.log('‚úÖ Foreign key constraints verified\n');

    // Step 1: Ensure departments exist (no dependencies)
    await seedDepartments();

    // Step 2: Create doctor profiles and accounts (requires: departments)
    await seedDoctors();

    // Step 3: Create patient profiles and accounts (no dependencies except profiles)
    await seedPatients();

    // Step 4: Create doctor schedules (requires: doctors)
    await seedDoctorSchedules();

    // Step 5: Create sample appointments (requires: doctors, patients)
    await seedAppointments();

    // Step 6: Create sample medical records (requires: doctors, patients, appointments)
    await seedMedicalRecords();

    // Step 7: Create doctor reviews (requires: doctors, patients)
    await seedDoctorReviews();
    
    console.log('\nüéâ Test data seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`   üë®‚Äç‚öïÔ∏è Doctors: ~120 (distributed across ${DEPARTMENTS.length} departments)`);
    console.log(`   üë§ Patients: ${PATIENT_PROFILES.length}`);
    console.log(`   üè• Departments: ${DEPARTMENTS.length} (using existing departments)`);
    console.log(`   üìÖ Appointments: Sample appointments created`);
    console.log(`   üìã Medical Records: Sample records created`);
    console.log(`   ‚≠ê Reviews: Sample reviews created`);
    console.log('\nüè• Department breakdown:');
    const totalDoctors = 120;
    const doctorsPerDept = Math.floor(totalDoctors / DEPARTMENTS.length);
    const remainder = totalDoctors % DEPARTMENTS.length;

    DEPARTMENTS.forEach((dept, index) => {
      const doctorCount = doctorsPerDept + (index < remainder ? 1 : 0);
      console.log(`   - ${dept.name} (${dept.dept_id}): ${doctorCount} doctors`);
    });

  } catch (error) {
    console.error('‚ùå Error seeding test data:', error);
  }
}

async function seedDepartments() {
  console.log('üè• Checking existing departments...');

  // Fetch existing departments with flexible column names
  let { data: existingDepartments, error: fetchError } = await supabase
    .from('departments')
    .select('dept_id, name, department_id, department_name, department_code')
    .order('dept_id');

  // If dept_id doesn't exist, try with original column names
  if (fetchError && fetchError.message.includes('dept_id')) {
    const { data: deptData, error: deptError } = await supabase
      .from('departments')
      .select('department_id, department_name, department_code')
      .order('department_id');

    if (!deptError && deptData) {
      // Map to expected format
      existingDepartments = deptData.map(dept => ({
        dept_id: dept.department_id,
        name: dept.department_name,
        code: dept.department_code
      }));
      fetchError = null;
    }
  }

  if (fetchError) {
    console.log(`   ‚ö†Ô∏è Error fetching departments: ${fetchError.message}`);
    return;
  }

  if (existingDepartments && existingDepartments.length > 0) {
    console.log(`   ‚úÖ Found ${existingDepartments.length} existing departments:`);
    existingDepartments.forEach(dept => {
      console.log(`      - ${dept.dept_id}: ${dept.name}`);
    });

    // Update global DEPARTMENTS variable with existing departments
    DEPARTMENTS = existingDepartments.map(dept => ({
      dept_id: dept.dept_id,
      name: dept.name,
      code: dept.dept_id
    }));

    console.log(`   ‚ÑπÔ∏è Using existing departments for doctor generation`);
  } else {
    console.log('   ‚ö†Ô∏è No departments found, this may cause issues with doctor creation');
  }
}

async function seedDoctors() {
  console.log('\nüë®‚Äç‚öïÔ∏è Seeding doctors...');

  // Generate doctor profiles based on existing departments
  const DOCTOR_PROFILES = await generateDoctorProfiles();
  console.log(`üìä Generated ${DOCTOR_PROFILES.length} doctor profiles`);

  for (const doctorData of DOCTOR_PROFILES) {
    try {
      // Create auth user
      const { data: authData, error: authError } = await supabase.auth.admin.createUser({
        email: doctorData.email,
        password: 'doctor123456',
        email_confirm: true,
        user_metadata: {
          full_name: doctorData.full_name,
          role: 'doctor'
        }
      });

      if (authError) {
        console.log(`   ‚ö†Ô∏è Auth for ${doctorData.full_name}: ${authError.message}`);
        continue;
      }

      const userId = authData.user.id;

      // Create profile
      const { error: profileError } = await supabase
        .from('profiles')
        .upsert({
          id: userId,
          email: doctorData.email,
          full_name: doctorData.full_name,
          phone_number: doctorData.phone_number,
          date_of_birth: doctorData.date_of_birth,
          role: 'doctor',
          is_active: true,
          email_verified: true
        }, { onConflict: 'id' });

      if (profileError) {
        console.log(`   ‚ö†Ô∏è Profile for ${doctorData.full_name}: ${profileError.message}`);
        continue;
      }

      // Create doctor record
      const { error: doctorError } = await supabase
        .from('doctors')
        .upsert({
          profile_id: userId,
          specialty: doctorData.specialty,
          qualification: doctorData.qualification,
          department_id: doctorData.department_id,
          license_number: doctorData.license_number,
          gender: doctorData.gender,
          bio: doctorData.bio,
          experience_years: doctorData.experience_years,
          consultation_fee: doctorData.consultation_fee,
          languages_spoken: doctorData.languages_spoken,
          availability_status: 'available',
          rating: 4.5 + Math.random() * 0.5, // Random rating 4.5-5.0
          total_reviews: Math.floor(Math.random() * 50) + 10
        }, { onConflict: 'profile_id' });

      if (doctorError) {
        console.log(`   ‚ö†Ô∏è Doctor record for ${doctorData.full_name}: ${doctorError.message}`);
      } else {
        console.log(`   ‚úÖ Doctor: ${doctorData.full_name}`);
      }

    } catch (error) {
      console.log(`   ‚ùå Error creating doctor ${doctorData.full_name}: ${error.message}`);
    }
  }
}

async function seedPatients() {
  console.log('\nüë§ Seeding patients...');
  
  for (const patientData of PATIENT_PROFILES) {
    try {
      // Create auth user
      const { data: authData, error: authError } = await supabase.auth.admin.createUser({
        email: patientData.email,
        password: 'patient123456',
        email_confirm: true,
        user_metadata: {
          full_name: patientData.full_name,
          role: 'patient'
        }
      });

      if (authError) {
        console.log(`   ‚ö†Ô∏è Auth for ${patientData.full_name}: ${authError.message}`);
        continue;
      }

      const userId = authData.user.id;

      // Create profile
      const { error: profileError } = await supabase
        .from('profiles')
        .upsert({
          id: userId,
          email: patientData.email,
          full_name: patientData.full_name,
          phone_number: patientData.phone_number,
          date_of_birth: patientData.date_of_birth,
          role: 'patient',
          is_active: true,
          email_verified: true
        }, { onConflict: 'id' });

      if (profileError) {
        console.log(`   ‚ö†Ô∏è Profile for ${patientData.full_name}: ${profileError.message}`);
        continue;
      }

      // Create patient record
      const { error: patientError } = await supabase
        .from('patients')
        .upsert({
          profile_id: userId,
          gender: patientData.gender,
          blood_type: patientData.blood_type,
          address: patientData.address,
          emergency_contact: patientData.emergency_contact,
          medical_history: patientData.medical_history,
          allergies: patientData.allergies,
          status: 'active',
          notes: patientData.notes
        }, { onConflict: 'profile_id' });

      if (patientError) {
        console.log(`   ‚ö†Ô∏è Patient record for ${patientData.full_name}: ${patientError.message}`);
      } else {
        console.log(`   ‚úÖ Patient: ${patientData.full_name}`);
      }

    } catch (error) {
      console.log(`   ‚ùå Error creating patient ${patientData.full_name}: ${error.message}`);
    }
  }
}

async function seedDoctorSchedules() {
  console.log('\nüìÖ Seeding doctor schedules...');
  
  // Get all doctors
  const { data: doctors, error } = await supabase
    .from('doctors')
    .select('doctor_id');

  if (error || !doctors) {
    console.log('   ‚ö†Ô∏è Could not fetch doctors for schedules');
    return;
  }

  for (const doctor of doctors) {
    // Create weekly schedule (Monday to Friday)
    for (let day = 1; day <= 5; day++) {
      const { error: scheduleError } = await supabase
        .from('doctor_schedules')
        .upsert({
          doctor_id: doctor.doctor_id,
          day_of_week: day,
          start_time: '08:00',
          end_time: '17:00',
          is_available: true,
          break_start: '12:00',
          break_end: '13:00',
          max_appointments: 16,
          slot_duration: 30
        }, { onConflict: 'doctor_id,day_of_week' });

      if (scheduleError) {
        console.log(`   ‚ö†Ô∏è Schedule for ${doctor.doctor_id} day ${day}: ${scheduleError.message}`);
      }
    }
    console.log(`   ‚úÖ Schedule for doctor: ${doctor.doctor_id}`);
  }
}

async function seedAppointments() {
  console.log('\nüìÖ Seeding sample appointments...');

  // Get doctors and patients
  const { data: doctors } = await supabase.from('doctors').select('doctor_id').limit(20);
  const { data: patients } = await supabase.from('patients').select('patient_id').limit(30);

  if (!doctors || !patients || doctors.length === 0 || patients.length === 0) {
    console.log('   ‚ö†Ô∏è No doctors or patients found for appointments');
    return;
  }

  const appointmentTypes = ['consultation', 'follow_up', 'emergency', 'routine_checkup'];
  const statuses = ['scheduled', 'completed', 'cancelled'];
  const appointmentNotes = [
    'Kh√°m t·ªïng qu√°t ƒë·ªãnh k·ª≥',
    'T√°i kh√°m sau ƒëi·ªÅu tr·ªã',
    'Kh√°m c·∫•p c·ª©u',
    'Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥',
    'T∆∞ v·∫•n ƒëi·ªÅu tr·ªã',
    'Kh√°m chuy√™n khoa',
    'Theo d√µi sau ph·∫´u thu·∫≠t',
    'Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t'
  ];

  // Create 50 sample appointments
  const appointments = [];
  for (let i = 0; i < 50; i++) {
    const doctor = doctors[Math.floor(Math.random() * doctors.length)];
    const patient = patients[Math.floor(Math.random() * patients.length)];

    // Random date within last 30 days to next 30 days
    const randomDays = Math.floor(Math.random() * 60) - 30;
    const appointmentDate = new Date(Date.now() + randomDays * 24 * 60 * 60 * 1000);

    // Random time between 8:00 and 17:00
    const hour = 8 + Math.floor(Math.random() * 9);
    const minute = Math.random() > 0.5 ? '00' : '30';
    const appointmentTime = `${String(hour).padStart(2, '0')}:${minute}`;

    appointments.push({
      doctor_id: doctor.doctor_id,
      patient_id: patient.patient_id,
      appointment_date: appointmentDate.toISOString().split('T')[0],
      appointment_time: appointmentTime,
      status: statuses[Math.floor(Math.random() * statuses.length)],
      appointment_type: appointmentTypes[Math.floor(Math.random() * appointmentTypes.length)],
      notes: appointmentNotes[Math.floor(Math.random() * appointmentNotes.length)]
    });
  }

  let successCount = 0;
  for (const appointment of appointments) {
    const { error } = await supabase
      .from('appointments')
      .insert(appointment);

    if (error) {
      console.log(`   ‚ö†Ô∏è Appointment: ${error.message}`);
    } else {
      successCount++;
    }
  }

  console.log(`   ‚úÖ Created ${successCount} appointments`);
}

async function seedMedicalRecords() {
  console.log('\nüìã Seeding sample medical records...');

  // Get completed appointments
  const { data: appointments } = await supabase
    .from('appointments')
    .select('appointment_id, doctor_id, patient_id, appointment_date')
    .eq('status', 'completed')
    .limit(30);

  if (!appointments || appointments.length === 0) {
    console.log('   ‚ö†Ô∏è No completed appointments found for medical records');
    console.log('   ‚ÑπÔ∏è This is normal if appointments were just created');

    // Try to get any appointments and mark some as completed
    const { data: anyAppointments } = await supabase
      .from('appointments')
      .select('appointment_id, doctor_id, patient_id, appointment_date')
      .limit(15);

    if (anyAppointments && anyAppointments.length > 0) {
      // Mark first 15 appointments as completed
      for (const apt of anyAppointments) {
        await supabase
          .from('appointments')
          .update({ status: 'completed' })
          .eq('appointment_id', apt.appointment_id);
      }

      console.log(`   ‚úÖ Marked ${anyAppointments.length} appointments as completed`);

      // Use these appointments for medical records
      const appointmentsToUse = anyAppointments;
      await createMedicalRecordsForAppointments(appointmentsToUse);
    } else {
      console.log('   ‚ö†Ô∏è No appointments found at all');
    }
    return;
  }

  await createMedicalRecordsForAppointments(appointments);
}

async function createMedicalRecordsForAppointments(appointments) {

  const chiefComplaints = [
    'ƒêau ƒë·∫ßu, ch√≥ng m·∫∑t',
    'Ho, s·ªët nh·∫π',
    'ƒêau b·ª•ng, bu·ªìn n√¥n',
    'Kh√≥ th·ªü, ƒëau ng·ª±c',
    'ƒêau l∆∞ng, t√™ ch√¢n',
    'M·ªát m·ªèi, ch√°n ƒÉn',
    'ƒêau kh·ªõp, s∆∞ng t·∫•y',
    'R·ªëi lo·∫°n ti√™u h√≥a',
    'M·∫•t ng·ªß, lo √¢u',
    'Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥'
  ];

  const diagnoses = [
    'TƒÉng huy·∫øt √°p nh·∫π',
    'Vi√™m ƒë∆∞·ªùng h√¥ h·∫•p tr√™n',
    'Vi√™m d·∫° d√†y c·∫•p',
    'R·ªëi lo·∫°n nh·ªãp tim',
    'Tho√°t v·ªã ƒëƒ©a ƒë·ªám',
    'Thi·∫øu m√°u nh·∫π',
    'Vi√™m kh·ªõp d·∫°ng th·∫•p',
    'H·ªôi ch·ª©ng ru·ªôt k√≠ch th√≠ch',
    'R·ªëi lo·∫°n lo √¢u',
    'S·ª©c kh·ªèe b√¨nh th∆∞·ªùng'
  ];

  const treatmentPlans = [
    'Thu·ªëc h·∫° huy·∫øt √°p, theo d√µi huy·∫øt √°p h√†ng ng√†y',
    'Kh√°ng sinh, thu·ªëc ho, ngh·ªâ ng∆°i',
    'Thu·ªëc kh√°ng acid, ch·∫ø ƒë·ªô ƒÉn nh·∫π',
    'Thu·ªëc ƒëi·ªÅu h√≤a nh·ªãp tim, theo d√µi ECG',
    'Thu·ªëc gi·∫£m ƒëau, v·∫≠t l√Ω tr·ªã li·ªáu',
    'B·ªï sung s·∫Øt, vitamin, dinh d∆∞·ª°ng',
    'Thu·ªëc ch·ªëng vi√™m, t·∫≠p luy·ªán nh·∫π',
    'Thu·ªëc ƒëi·ªÅu ch·ªânh ti√™u h√≥a, ch·∫ø ƒë·ªô ƒÉn',
    'Thu·ªëc an th·∫ßn nh·∫π, t∆∞ v·∫•n t√¢m l√Ω',
    'Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh'
  ];

  const recordNotes = [
    'B·ªánh nh√¢n c·∫ßn t√°i kh√°m sau 2 tu·∫ßn',
    'Theo d√µi tri·ªáu ch·ª©ng, li√™n h·ªá n·∫øu c√≥ bi·∫øn ch·ª©ng',
    'Tu√¢n th·ªß ƒëi·ªÅu tr·ªã, u·ªëng thu·ªëc ƒë√∫ng gi·ªù',
    'T√°i kh√°m sau 1 th√°ng ƒë·ªÉ ƒë√°nh gi√°',
    'C·∫ßn thay ƒë·ªïi l·ªëi s·ªëng, t·∫≠p th·ªÉ d·ª•c',
    'B·ªánh nh√¢n ƒë√£ hi·ªÉu r√µ v·ªÅ b·ªánh',
    'Gia ƒë√¨nh c·∫ßn h·ªó tr·ª£ ƒëi·ªÅu tr·ªã',
    'K·∫øt qu·∫£ x√©t nghi·ªám b√¨nh th∆∞·ªùng',
    'C·∫ßn theo d√µi l√¢u d√†i',
    'T√¨nh tr·∫°ng ·ªïn ƒë·ªãnh'
  ];

  let successCount = 0;
  for (const appointment of appointments) {
    const randomIndex = Math.floor(Math.random() * chiefComplaints.length);

    const { error } = await supabase
      .from('medical_records')
      .insert({
        appointment_id: appointment.appointment_id,
        doctor_id: appointment.doctor_id,
        patient_id: appointment.patient_id,
        visit_date: appointment.appointment_date,
        chief_complaint: chiefComplaints[randomIndex],
        diagnosis: diagnoses[randomIndex],
        treatment_plan: treatmentPlans[randomIndex],
        notes: recordNotes[randomIndex],
        status: 'active'
      });

    if (error) {
      console.log(`   ‚ö†Ô∏è Medical record: ${error.message}`);
    } else {
      successCount++;
    }
  }

  console.log(`   ‚úÖ Created ${successCount} medical records`);
}

async function seedDoctorReviews() {
  console.log('\n‚≠ê Seeding doctor reviews...');

  // Get doctors and patients (ensure they exist)
  const { data: doctors, error: doctorError } = await supabase
    .from('doctors')
    .select('doctor_id')
    .limit(50);

  const { data: patients, error: patientError } = await supabase
    .from('patients')
    .select('patient_id')
    .limit(30);

  if (doctorError || patientError) {
    console.log('   ‚ö†Ô∏è Error fetching doctors or patients for reviews');
    return;
  }

  if (!doctors || !patients || doctors.length === 0 || patients.length === 0) {
    console.log('   ‚ö†Ô∏è No doctors or patients found for reviews');
    console.log(`   üìä Found: ${doctors?.length || 0} doctors, ${patients?.length || 0} patients`);
    return;
  }

  console.log(`   üìä Creating reviews for ${doctors.length} doctors and ${patients.length} patients`);

  const reviewTexts = {
    5: [
      'B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. Gi·∫£i th√≠ch r√µ r√†ng v·ªÅ t√¨nh tr·∫°ng b·ªánh.',
      'Xu·∫•t s·∫Øc! B√°c sƒ© c√≥ kinh nghi·ªám v√† th√°i ƒë·ªô r·∫•t t·ªët.',
      'R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª•. B√°c sƒ© t∆∞ v·∫•n chi ti·∫øt v√† hi·ªáu qu·∫£.',
      'B√°c sƒ© gi·ªèi chuy√™n m√¥n, th√¢n thi·ªán v√† nhi·ªát t√¨nh.',
      'ƒêi·ªÅu tr·ªã hi·ªáu qu·∫£, theo d√µi b·ªánh nh√¢n chu ƒë√°o.'
    ],
    4: [
      'Kh√°m b·ªánh k·ªπ l∆∞·ª°ng, th√°i ƒë·ªô th√¢n thi·ªán. Th·ªùi gian ch·ªù h∆°i l√¢u.',
      'B√°c sƒ© t·ªët, ch·ªâ c√≥ ƒëi·ªÅu ph√≤ng kh√°m h∆°i nh·ªè.',
      'Chuy√™n m√¥n t·ªët, tuy nhi√™n c·∫ßn c·∫£i thi·ªán th·ªùi gian kh√°m.',
      'H√†i l√≤ng v·ªõi k·∫øt qu·∫£ ƒëi·ªÅu tr·ªã, s·∫Ω quay l·∫°i l·∫ßn sau.',
      'B√°c sƒ© nhi·ªát t√¨nh, gi·∫£i th√≠ch d·ªÖ hi·ªÉu.'
    ],
    3: [
      'B√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát.',
      'Kh√°m nhanh, ch∆∞a ƒë∆∞·ª£c t∆∞ v·∫•n k·ªπ l∆∞·ª°ng.',
      'B√°c sƒ© OK, nh∆∞ng th·ªùi gian kh√°m h∆°i v·ªôi.',
      'T·∫°m ƒë∆∞·ª£c, c·∫ßn c·∫£i thi·ªán th√°i ƒë·ªô ph·ª•c v·ª•.',
      'Chuy√™n m√¥n ·ªïn, c·∫ßn th√™m th·ªùi gian t∆∞ v·∫•n.'
    ],
    2: [
      'Th√°i ƒë·ªô ch∆∞a th√¢n thi·ªán, kh√°m h∆°i v·ªôi v√†ng.',
      'Kh√¥ng h√†i l√≤ng v·ªõi c√°ch t∆∞ v·∫•n c·ªßa b√°c sƒ©.',
      'Th·ªùi gian ch·ªù qu√° l√¢u, kh√°m kh√¥ng k·ªπ.',
      'C·∫ßn c·∫£i thi·ªán th√°i ƒë·ªô ph·ª•c v·ª•.',
      'Ch∆∞a ƒë∆∞·ª£c gi·∫£i th√≠ch r√µ v·ªÅ b·ªánh.'
    ],
    1: [
      'R·∫•t kh√¥ng h√†i l√≤ng v·ªõi d·ªãch v·ª•.',
      'Th√°i ƒë·ªô kh√¥ng chuy√™n nghi·ªáp.',
      'Kh√°m kh√¥ng k·ªπ, t∆∞ v·∫•n sai.',
      'S·∫Ω kh√¥ng quay l·∫°i l·∫ßn sau.',
      'C·∫ßn c·∫£i thi·ªán to√†n b·ªô quy tr√¨nh.'
    ]
  };

  // Create 150 reviews (average 3 reviews per doctor)
  const reviews = [];
  for (let i = 0; i < 150; i++) {
    const doctor = doctors[Math.floor(Math.random() * doctors.length)];
    const patient = patients[Math.floor(Math.random() * patients.length)];

    // Weighted rating distribution (more positive reviews)
    const ratingWeights = [1, 2, 3, 4, 5]; // 1-5 stars
    const weights = [5, 10, 15, 35, 35]; // 5% 1-star, 10% 2-star, 15% 3-star, 35% 4-star, 35% 5-star

    let rating = 5;
    const random = Math.random() * 100;
    let cumulative = 0;
    for (let j = 0; j < weights.length; j++) {
      cumulative += weights[j];
      if (random <= cumulative) {
        rating = ratingWeights[j];
        break;
      }
    }

    const reviewTextArray = reviewTexts[rating];
    const reviewText = reviewTextArray[Math.floor(Math.random() * reviewTextArray.length)];

    // Random date within last 6 months
    const randomDays = Math.floor(Math.random() * 180);
    const reviewDate = new Date(Date.now() - randomDays * 24 * 60 * 60 * 1000);

    reviews.push({
      doctor_id: doctor.doctor_id,
      patient_id: patient.patient_id,
      rating: rating,
      review_text: reviewText,
      review_date: reviewDate.toISOString(),
      is_verified: Math.random() > 0.2 // 80% verified reviews
    });
  }

  let successCount = 0;
  for (const review of reviews) {
    const { error } = await supabase
      .from('doctor_reviews')
      .insert(review);

    if (error) {
      console.log(`   ‚ö†Ô∏è Review: ${error.message}`);
    } else {
      successCount++;
    }
  }

  console.log(`   ‚úÖ Created ${successCount} doctor reviews`);
}

// Run the seeding
if (require.main === module) {
  seedTestData().catch(error => {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  });
}

module.exports = { seedTestData };
