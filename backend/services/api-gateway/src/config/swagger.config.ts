import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import { Express } from 'express';
import { baseOpenAPIConfig } from '@hospital/shared/dist/config/openapi.config';
import { doctorSchemas, doctorPaths } from '@hospital/shared/dist/schemas/doctor.schemas';

/**
 * Swagger/OpenAPI 3.0 configuration for API Gateway
 */
const swaggerOptions = {
  definition: {
    ...baseOpenAPIConfig,
    info: {
      ...baseOpenAPIConfig.info,
      title: 'Hospital Management API Gateway',
      description: `
# üè• Hospital Management System API Gateway

**C·ªïng API trung t√¢m** cho h·ªá th·ªëng qu·∫£n l√Ω b·ªánh vi·ªán v·ªõi ki·∫øn tr√∫c microservices.

## üåü T√≠nh nƒÉng ch√≠nh

### üîê **Authentication & Authorization**
- JWT Bearer token authentication
- Role-based access control (Doctor, Patient, Admin)
- Session management
- Password reset & email verification

### üë®‚Äç‚öïÔ∏è **Doctor Management**
- Qu·∫£n l√Ω h·ªì s∆° b√°c sƒ©
- L·ªãch l√†m vi·ªác v√† ca tr·ª±c
- Kinh nghi·ªám v√† chuy√™n m√¥n
- ƒê√°nh gi√° t·ª´ b·ªánh nh√¢n

### üè• **Patient Management**
- ƒêƒÉng k√Ω v√† qu·∫£n l√Ω b·ªánh nh√¢n
- H·ªì s∆° y t·∫ø
- L·ªãch s·ª≠ kh√°m b·ªánh

### üìÖ **Appointment System**
- ƒê·∫∑t l·ªãch h·∫πn online
- Qu·∫£n l√Ω l·ªãch h·∫πn
- X√°c nh·∫≠n v√† h·ªßy l·ªãch
- Th√¥ng b√°o real-time

### üè¢ **Department & Specialty**
- Qu·∫£n l√Ω khoa ph√≤ng
- Chuy√™n khoa y t·∫ø
- Ph√≤ng kh√°m v√† thi·∫øt b·ªã

### üí≥ **Payment Integration**
- Thanh to√°n ti·ªÅn m·∫∑t
- PayOS integration
- VNPay (coming soon)
- H√≥a ƒë∆°n ƒëi·ªán t·ª≠

## üöÄ **API Versioning**

API h·ªó tr·ª£ versioning qua:
- Header: \`X-API-Version: v2\`
- URL path: \`/api/v2/doctors\`
- Accept header: \`application/vnd.hospital.v2+json\`

**Phi√™n b·∫£n hi·ªán t·∫°i:** v2.0.0  
**Phi√™n b·∫£n ƒë∆∞·ª£c h·ªó tr·ª£:** v1, v2

## üáªüá≥ **Vietnamese Support**

T·∫•t c·∫£ API responses v√† error messages ƒë·ªÅu h·ªó tr·ª£ **ti·∫øng Vi·ªát**:
- Validation errors: "Email ph·∫£i l√† email h·ª£p l·ªá"
- Business logic errors: "B√°c sƒ© kh√¥ng c√≥ l·ªãch"
- System errors: "L·ªói h·ªá th·ªëng"

## üì± **Real-time Features**

- WebSocket connections cho notifications
- Live appointment updates
- Doctor availability status
- Patient queue management

## üîí **Security**

- Rate limiting: 1000 requests/15 minutes
- Request ID tracing
- Input sanitization
- CORS protection
- Helmet security headers

## üìä **Monitoring**

- Health checks: \`/health\`
- Metrics: \`/metrics\` (Prometheus format)
- Service status: \`/services\`

---

**üè• Ph√°t tri·ªÉn b·ªüi:** Hospital Management Team  
**üìß Li√™n h·ªá:** admin@hospital.com  
**üìñ T√†i li·ªáu:** [API Documentation](/docs)
      `
    },
    // Merge schemas from shared config
    components: {
      ...baseOpenAPIConfig.components,
      schemas: {
        ...baseOpenAPIConfig.components?.schemas,
        ...doctorSchemas
      }
    }
  },
  apis: [
    './src/routes/*.ts',
    './src/controllers/*.ts',
    '../doctor-service/src/routes/*.ts',
    '../auth-service/src/routes/*.ts',
    '../patient-service/src/routes/*.ts',
    '../appointment-service/src/routes/*.ts',
    '../department-service/src/routes/*.ts'
  ]
};

/**
 * Generate OpenAPI specification
 */
export const swaggerSpec = swaggerJsdoc(swaggerOptions) as any;

// Add doctor paths to the spec
if (swaggerSpec.paths) {
  Object.assign(swaggerSpec.paths, doctorPaths);
} else {
  swaggerSpec.paths = doctorPaths;
}

/**
 * Setup Swagger UI for API Gateway
 */
export function setupSwagger(app: Express) {
  // Swagger UI options
  const swaggerUiOptions = {
    customCss: `
      .swagger-ui .topbar { 
        display: none; 
      }
      .swagger-ui .info .title {
        color: #0ea5e9;
      }
      .swagger-ui .scheme-container {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
      }
      .swagger-ui .btn.authorize {
        background-color: #10b981;
        border-color: #10b981;
      }
      .swagger-ui .btn.authorize:hover {
        background-color: #059669;
        border-color: #059669;
      }
    `,
    customSiteTitle: 'Hospital Management API Documentation',
    customfavIcon: '/favicon.ico',
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
      filter: true,
      showExtensions: true,
      showCommonExtensions: true,
      docExpansion: 'list',
      defaultModelsExpandDepth: 2,
      defaultModelExpandDepth: 2,
      tryItOutEnabled: true
    }
  };

  // Serve Swagger UI
  app.use('/docs', swaggerUi.serve);
  app.get('/docs', swaggerUi.setup(swaggerSpec, swaggerUiOptions));

  // Serve OpenAPI spec as JSON
  app.get('/openapi.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(swaggerSpec);
  });

  console.log('üìö Swagger UI available at: /docs');
  console.log('üìÑ OpenAPI JSON spec at: /openapi.json');
}

/**
 * Add OpenAPI documentation to existing routes
 */
export function addOpenAPIDocumentation() {
  return {
    // Health check documentation
    healthCheck: {
      tags: ['Health'],
      summary: 'Ki·ªÉm tra tr·∫°ng th√°i API Gateway',
      description: 'Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API Gateway v√† c√°c dependencies',
      responses: {
        '200': {
          description: 'API Gateway ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/HealthCheckResponse'
              }
            }
          }
        },
        '503': {
          description: 'API Gateway ho·∫∑c dependencies g·∫∑p s·ª± c·ªë',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/HealthCheckResponse'
              }
            }
          }
        }
      }
    },

    // Service status documentation
    serviceStatus: {
      tags: ['Health'],
      summary: 'Tr·∫°ng th√°i c√°c microservices',
      description: 'Ki·ªÉm tra tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ microservices trong h·ªá th·ªëng',
      responses: {
        '200': {
          description: 'Tr·∫°ng th√°i c√°c services',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  success: { type: 'boolean' },
                  data: {
                    type: 'object',
                    properties: {
                      gateway: { $ref: '#/components/schemas/HealthCheckResponse' },
                      auth: { $ref: '#/components/schemas/HealthCheckResponse' },
                      doctor: { $ref: '#/components/schemas/HealthCheckResponse' },
                      patient: { $ref: '#/components/schemas/HealthCheckResponse' },
                      appointment: { $ref: '#/components/schemas/HealthCheckResponse' },
                      department: { $ref: '#/components/schemas/HealthCheckResponse' }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    // Metrics documentation
    metrics: {
      tags: ['Monitoring'],
      summary: 'Prometheus metrics',
      description: 'Endpoint cung c·∫•p metrics cho Prometheus monitoring',
      responses: {
        '200': {
          description: 'Prometheus metrics',
          content: {
            'text/plain': {
              schema: {
                type: 'string',
                example: `# HELP api_gateway_requests_total Total number of requests
# TYPE api_gateway_requests_total counter
api_gateway_requests_total{method="GET",status="200"} 1234

# HELP api_gateway_request_duration_seconds Request duration in seconds
# TYPE api_gateway_request_duration_seconds histogram
api_gateway_request_duration_seconds_bucket{le="0.1"} 100
api_gateway_request_duration_seconds_bucket{le="0.5"} 200
api_gateway_request_duration_seconds_bucket{le="1.0"} 300`
              }
            }
          }
        }
      }
    }
  };
}

/**
 * Validate OpenAPI specification
 */
export function validateOpenAPISpec() {
  try {
    // Basic validation
    if (!swaggerSpec.openapi) {
      throw new Error('Missing OpenAPI version');
    }
    
    if (!swaggerSpec.info || !swaggerSpec.info.title || !swaggerSpec.info.version) {
      throw new Error('Missing required info fields');
    }

    if (!swaggerSpec.paths || Object.keys(swaggerSpec.paths).length === 0) {
      console.warn('‚ö†Ô∏è No API paths defined in OpenAPI spec');
    }

    console.log('‚úÖ OpenAPI specification is valid');
    console.log(`üìã API Title: ${swaggerSpec.info.title}`);
    console.log(`üî¢ API Version: ${swaggerSpec.info.version}`);
    console.log(`üìä Total paths: ${Object.keys(swaggerSpec.paths || {}).length}`);
    console.log(`üì¶ Total schemas: ${Object.keys(swaggerSpec.components?.schemas || {}).length}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå OpenAPI specification validation failed:', error);
    return false;
  }
}

/**
 * Export OpenAPI spec for other services
 */
export { swaggerSpec as openAPISpec };
