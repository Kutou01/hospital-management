#!/usr/bin/env node

/**
 * Populate enum tables with sample data
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function populateEnumTables() {
  console.log('üîÑ Populating enum tables with sample data...\n');

  try {
    // 1. Check if diagnosis already has data
    console.log('üìã Checking diagnosis data...');
    const { data: existingDiagnosis } = await supabase.from('diagnosis').select('*').limit(1);

    if (existingDiagnosis && existingDiagnosis.length > 0) {
      console.log('‚úÖ Diagnosis table already has data, skipping...');
    } else {
      const diagnosisData = [
        {
          diagnosis_code: 'I10',
          diagnosis_name: 'Cao huy·∫øt √°p',
          category: 'Tim m·∫°ch',
          description: 'TƒÉng huy·∫øt √°p nguy√™n ph√°t',
          is_active: true
        },
        {
          diagnosis_code: 'E11',
          diagnosis_name: 'Ti·ªÉu ƒë∆∞·ªùng type 2',
          category: 'N·ªôi ti·∫øt',
          description: 'ƒê√°i th√°o ƒë∆∞·ªùng kh√¥ng ph·ª• thu·ªôc insulin',
          is_active: true
        },
        {
          diagnosis_code: 'J18',
          diagnosis_name: 'Vi√™m ph·ªïi',
          category: 'H√¥ h·∫•p',
          description: 'Vi√™m ph·ªïi do vi khu·∫©n',
          is_active: true
        }
      ];

      const { error: diagnosisError } = await supabase
        .from('diagnosis')
        .insert(diagnosisData);

      if (diagnosisError) {
        console.log(`‚ùå Diagnosis error: ${diagnosisError.message}`);
      } else {
        console.log(`‚úÖ Added ${diagnosisData.length} diagnosis records`);
      }
    }

    // 2. Medications data (simple structure)
    console.log('\nüíä Adding medications data...');
    const medicationsData = [
      {
        medication_name: 'Paracetamol 500mg',
        description: 'Thu·ªëc gi·∫£m ƒëau, h·∫° s·ªët',
        is_active: true
      },
      {
        medication_name: 'Amoxicillin 250mg',
        description: 'Kh√°ng sinh nh√≥m penicillin',
        is_active: true
      },
      {
        medication_name: 'Metformin 500mg',
        description: 'Thu·ªëc ƒëi·ªÅu tr·ªã ti·ªÉu ƒë∆∞·ªùng',
        is_active: true
      },
      {
        medication_name: 'Amlodipine 5mg',
        description: 'Thu·ªëc h·∫° huy·∫øt √°p',
        is_active: true
      },
      {
        medication_name: 'Omeprazole 20mg',
        description: 'Thu·ªëc ·ª©c ch·∫ø b∆°m proton',
        is_active: true
      }
    ];

    const { error: medicationsError } = await supabase
      .from('medications')
      .insert(medicationsData);

    if (medicationsError) {
      console.log(`‚ùå Medications error: ${medicationsError.message}`);
    } else {
      console.log(`‚úÖ Added ${medicationsData.length} medication records`);
    }

    // 3. Status values data (need to find correct structure)
    console.log('\nüìä Adding status values data...');
    const statusData = [
      {
        status_type: 'general',
        status_value: 'Ho·∫°t ƒë·ªông',
        description: 'Tr·∫°ng th√°i ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        is_active: true
      },
      {
        status_type: 'general',
        status_value: 'T·∫°m ng∆∞ng',
        description: 'T·∫°m th·ªùi ng∆∞ng ho·∫°t ƒë·ªông',
        is_active: true
      },
      {
        status_type: 'appointment',
        status_value: 'Ch·ªù x·ª≠ l√Ω',
        description: 'ƒêang ch·ªù ƒë∆∞·ª£c x·ª≠ l√Ω',
        is_active: true
      },
      {
        status_type: 'appointment',
        status_value: 'Ho√†n th√†nh',
        description: 'ƒê√£ ho√†n th√†nh',
        is_active: true
      },
      {
        status_type: 'appointment',
        status_value: 'ƒê√£ h·ªßy',
        description: 'ƒê√£ b·ªã h·ªßy b·ªè',
        is_active: true
      }
    ];

    const { error: statusError } = await supabase
      .from('status_values')
      .insert(statusData);

    if (statusError) {
      console.log(`‚ùå Status values error: ${statusError.message}`);
    } else {
      console.log(`‚úÖ Added ${statusData.length} status value records`);
    }

    console.log('\nüéâ All enum tables populated successfully!');

  } catch (error) {
    console.error('‚ùå Error populating enum tables:', error);
  }
}

populateEnumTables();
