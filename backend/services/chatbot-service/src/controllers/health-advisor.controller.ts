import { Request, Response } from 'express';
import { HealthAdvisorService } from '../services/health-advisor.service';
import logger from '../utils/logger';

export class HealthAdvisorController {
  private healthAdvisorService: HealthAdvisorService;

  constructor() {
    this.healthAdvisorService = new HealthAdvisorService();
  }

  /**
   * POST /api/health/analyze-symptoms
   * Ph√¢n t√≠ch tri·ªáu ch·ª©ng v√† ƒë∆∞a ra khuy·∫øn ngh·ªã
   */
  async analyzeSymptoms(req: Request, res: Response): Promise<void> {
    try {
      const { symptoms, user_input } = req.body;

      if (!user_input || typeof user_input !== 'string') {
        res.status(400).json({
          success: false,
          message: 'Vui l√≤ng m√¥ t·∫£ tri·ªáu ch·ª©ng c·ªßa b·∫°n',
          error: 'user_input is required and must be a string'
        });
        return;
      }

      logger.info('Analyzing symptoms for user input:', { user_input });

      const result = await this.healthAdvisorService.analyzeSymptoms(user_input);

      res.json({
        success: true,
        message: 'Ph√¢n t√≠ch tri·ªáu ch·ª©ng th√†nh c√¥ng',
        data: {
          consultation_result: result,
          recommendations: {
            specialty: result.recommended_specialty,
            urgency: result.urgency_level,
            should_see_doctor_immediately: result.should_see_doctor
          },
          advice: {
            preparation: result.preparation_advice,
            general: result.general_advice,
            reasoning: result.reasoning
          }
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error in analyzeSymptoms:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch tri·ªáu ch·ª©ng',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * GET /api/health/specialties
   * L·∫•y danh s√°ch chuy√™n khoa c√≥ s·∫µn
   */
  async getAvailableSpecialties(req: Request, res: Response): Promise<void> {
    try {
      const specialties = await this.healthAdvisorService.getAvailableSpecialties();

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch chuy√™n khoa th√†nh c√¥ng',
        data: {
          specialties,
          total: specialties.length
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error in getAvailableSpecialties:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch chuy√™n khoa',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * POST /api/health/post-treatment-advice
   * L·∫•y l·ªùi khuy√™n chƒÉm s√≥c sau ƒëi·ªÅu tr·ªã
   */
  async getPostTreatmentAdvice(req: Request, res: Response): Promise<void> {
    try {
      const { specialty } = req.body;

      if (!specialty || typeof specialty !== 'string') {
        res.status(400).json({
          success: false,
          message: 'Vui l√≤ng cung c·∫•p th√¥ng tin chuy√™n khoa',
          error: 'specialty is required and must be a string'
        });
        return;
      }

      const advice = await this.healthAdvisorService.getPostTreatmentAdvice(specialty);

      res.json({
        success: true,
        message: 'L·∫•y l·ªùi khuy√™n chƒÉm s√≥c sau ƒëi·ªÅu tr·ªã th√†nh c√¥ng',
        data: {
          specialty,
          advice,
          total_advice: advice.length
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error in getPostTreatmentAdvice:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y l·ªùi khuy√™n chƒÉm s√≥c',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * POST /api/health/quick-consultation
   * T∆∞ v·∫•n nhanh d·ª±a tr√™n tri·ªáu ch·ª©ng ƒë∆°n gi·∫£n
   */
  async quickConsultation(req: Request, res: Response): Promise<void> {
    try {
      const { symptoms_text, age, gender } = req.body;

      if (!symptoms_text) {
        res.status(400).json({
          success: false,
          message: 'Vui l√≤ng m√¥ t·∫£ tri·ªáu ch·ª©ng',
          error: 'symptoms_text is required'
        });
        return;
      }

      // Ph√¢n t√≠ch tri·ªáu ch·ª©ng
      const analysis = await this.healthAdvisorService.analyzeSymptoms(symptoms_text);

      // T·∫°o response ƒë∆°n gi·∫£n cho chatbot
      const response = this.generateChatbotResponse(analysis);

      res.json({
        success: true,
        message: 'T∆∞ v·∫•n nhanh th√†nh c√¥ng',
        data: {
          chatbot_response: response,
          detailed_analysis: analysis,
          user_info: { age, gender }
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error in quickConsultation:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi t∆∞ v·∫•n',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * GET /api/health/emergency-symptoms
   * L·∫•y danh s√°ch tri·ªáu ch·ª©ng c·∫ßn c·∫•p c·ª©u
   */
  async getEmergencySymptoms(req: Request, res: Response): Promise<void> {
    try {
      const emergencySymptoms = [
        {
          symptom: 'ƒêau ng·ª±c d·ªØ d·ªôi',
          description: 'ƒêau ng·ª±c nh∆∞ b·ªã ƒë√® n·∫∑ng, lan ra tay tr√°i, c·ªï, h√†m',
          action: 'G·ªçi c·∫•p c·ª©u 115 ngay l·∫≠p t·ª©c'
        },
        {
          symptom: 'Kh√≥ th·ªü nghi√™m tr·ªçng',
          description: 'Kh√¥ng th·ªÉ n√≥i ƒë∆∞·ª£c c√¢u ho√†n ch·ªânh, m√¥i t√≠m',
          action: 'ƒê·∫øn c·∫•p c·ª©u ngay l·∫≠p t·ª©c'
        },
        {
          symptom: 'ƒê·ªôt qu·ªµ',
          description: 'M√©o mi·ªáng, y·∫øu li·ªát m·ªôt b√™n, n√≥i kh√≥, ƒëau ƒë·∫ßu d·ªØ d·ªôi',
          action: 'G·ªçi c·∫•p c·ª©u 115 ngay'
        },
        {
          symptom: 'S·ªët cao tr√™n 39¬∞C',
          description: 'S·ªët cao k√®m co gi·∫≠t, m√™ s·∫£ng',
          action: 'ƒê·∫øn b·ªánh vi·ªán ngay'
        },
        {
          symptom: 'Ch·∫£y m√°u kh√¥ng c·∫ßm ƒë∆∞·ª£c',
          description: 'Ch·∫£y m√°u nhi·ªÅu, kh√¥ng th·ªÉ c·∫ßm m√°u',
          action: '√âp c·∫ßm m√°u v√† ƒë·∫øn c·∫•p c·ª©u'
        }
      ];

      res.json({
        success: true,
        message: 'Danh s√°ch tri·ªáu ch·ª©ng c·∫•p c·ª©u',
        data: {
          emergency_symptoms: emergencySymptoms,
          emergency_hotline: '115',
          note: 'Khi g·∫∑p c√°c tri·ªáu ch·ª©ng n√†y, h√£y t√¨m ki·∫øm s·ª± tr·ª£ gi√∫p y t·∫ø ngay l·∫≠p t·ª©c'
        },
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error in getEmergencySymptoms:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * T·∫°o response cho chatbot d·ªÖ hi·ªÉu
   */
  private generateChatbotResponse(analysis: any): string {
    // N·∫øu l√† c√¢u h·ªèi ngo√†i lƒ©nh v·ª±c, ch·ªâ tr·∫£ v·ªÅ reasoning
    if (analysis.recommended_specialty === '' && analysis.confidence_score === 0) {
      return analysis.reasoning;
    }

    let response = '';

    if (analysis.symptoms_detected.length > 0) {
      response += `D·ª±a tr√™n tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£, t√¥i nh·∫≠n th·∫•y: ${analysis.symptoms_detected.map((s: any) => s.name_vi).join(', ')}.\n\n`;
    }

    response += `${analysis.reasoning}\n\n`;

    if (analysis.should_see_doctor) {
      response += `‚ö†Ô∏è **Khuy·∫øn ngh·ªã**: B·∫°n n√™n ƒë·∫øn kh√°m b√°c sƒ© chuy√™n khoa **${analysis.recommended_specialty}** s·ªõm nh·∫•t c√≥ th·ªÉ.\n\n`;
    } else {
      response += `üí° **Khuy·∫øn ngh·ªã**: B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch kh√°m chuy√™n khoa **${analysis.recommended_specialty}** ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt.\n\n`;
    }

    response += `üìã **Chu·∫©n b·ªã kh√°m b·ªánh**: ${analysis.preparation_advice}\n\n`;

    if (analysis.general_advice.length > 0) {
      response += `üè• **L·ªùi khuy√™n chung**:\n`;
      analysis.general_advice.forEach((advice: string, index: number) => {
        response += `${index + 1}. ${advice}\n`;
      });
    }

    return response;
  }

  /**
   * POST /api/health/chat
   * Chat v·ªõi Gemini AI - endpoint ch√≠nh cho chatbot
   */
  async chatWithAI(req: Request, res: Response): Promise<void> {
    try {
      const { message, conversation_history } = req.body;

      if (!message || typeof message !== 'string') {
        res.status(400).json({
          success: false,
          message: 'Vui l√≤ng nh·∫≠p tin nh·∫Øn',
          error: 'message is required and must be a string'
        });
        return;
      }

      logger.info('Processing chat message:', { message });

      const response = await this.healthAdvisorService.chatWithAI(message, conversation_history);

      res.json({
        success: true,
        message: 'Chat th√†nh c√¥ng',
        data: {
          user_message: message,
          ai_response: response,
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      logger.error('Error in chatWithAI:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * GET /api/health/test
   * Test endpoint ƒë·ªÉ ki·ªÉm tra service
   */
  async testHealthService(req: Request, res: Response): Promise<void> {
    try {
      res.json({
        success: true,
        message: 'Health Advisor Service ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        data: {
          service: 'Health Advisor Service',
          version: '1.0.0',
          features: [
            'Ph√¢n t√≠ch tri·ªáu ch·ª©ng',
            'Khuy·∫øn ngh·ªã chuy√™n khoa',
            'L·ªùi khuy√™n chu·∫©n b·ªã kh√°m b·ªánh',
            'ChƒÉm s√≥c sau ƒëi·ªÅu tr·ªã',
            'T∆∞ v·∫•n c·∫•p c·ª©u',
            'Chat v·ªõi Gemini AI'
          ]
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      logger.error('Error in testHealthService:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
}
