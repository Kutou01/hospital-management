import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import logger from '../utils/logger';

interface Symptom {
  symptom_id: string;
  name_vi: string;
  name_en?: string;
  description: string;
  severity_level: number;
  category: string;
  keywords: string[];
}

interface SpecialtyRecommendation {
  recommendation_id: string;
  symptom_combinations: string[];
  recommended_specialty: string;
  confidence_score: number;
  reasoning_vi: string;
  urgency_level: 'low' | 'medium' | 'high' | 'emergency';
  preparation_instructions: string;
}

interface HealthAdvice {
  advice_id: string;
  category: 'preparation' | 'post_treatment' | 'general';
  title_vi: string;
  content_vi: string;
  applicable_specialties: string[];
  tags: string[];
}

interface HealthConsultationResult {
  symptoms_detected: Symptom[];
  recommended_specialty: string;
  confidence_score: number;
  urgency_level: string;
  reasoning: string;
  preparation_advice: string;
  general_advice: string[];
  should_see_doctor: boolean;
}

interface GeminiAnalysis {
  hasHealthContent: boolean;
  suggestedSpecialty?: string;
  urgencyLevel?: 'low' | 'medium' | 'high' | 'emergency';
  additionalSymptoms?: string[];
  confidence: number;
}

interface GeminiAnalysis {
  hasHealthContent: boolean;
  suggestedSpecialty?: string;
  urgencyLevel?: 'low' | 'medium' | 'high' | 'emergency';
  additionalSymptoms?: string[];
  confidence: number;
}

export class HealthAdvisorService {
  private supabase: SupabaseClient;
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    const geminiApiKey = process.env.GEMINI_API_KEY;

    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('Missing Supabase configuration for Health Advisor Service');
    }

    if (!geminiApiKey) {
      throw new Error('Missing Gemini API Key for Health Advisor Service');
    }

    this.supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    // Initialize Gemini AI
    this.genAI = new GoogleGenerativeAI(geminiApiKey);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  }

  /**
   * Ph√¢n t√≠ch tri·ªáu ch·ª©ng t·ª´ text ng∆∞·ªùi d√πng nh·∫≠p v·ªõi Enhanced Analysis
   */
  async analyzeSymptoms(userInput: string): Promise<HealthConsultationResult> {
    try {
      logger.info('Analyzing symptoms from user input:', { userInput });

      // 0. Ki·ªÉm tra xem c√¢u h·ªèi c√≥ thu·ªôc lƒ©nh v·ª±c y t·∫ø kh√¥ng
      if (!this.isHealthRelatedQuestion(userInput)) {
        return this.getOutOfScopeResponse();
      }

      // 1. T√¨m pattern ph√¢n t√≠ch chi ti·∫øt t·ª´ Enhanced Analysis
      const enhancedPattern = await this.findEnhancedAnalysisPattern(userInput);

      if (enhancedPattern) {
        // S·ª≠ d·ª•ng Enhanced Analysis
        return await this.generateEnhancedResponse(userInput, enhancedPattern);
      }

      // 2. Fallback to traditional method n·∫øu kh√¥ng t√¨m th·∫•y pattern
      const detectedSymptoms = await this.detectSymptomsFromText(userInput);
      const geminiAnalysis = await this.analyzeWithGemini(userInput, detectedSymptoms);

      if (detectedSymptoms.length === 0 && !geminiAnalysis.hasHealthContent) {
        return this.getGeneralHealthAdvice();
      }

      // 3. T√¨m khuy·∫øn ngh·ªã chuy√™n khoa
      const recommendation = await this.findSpecialtyRecommendation(detectedSymptoms);

      // 4. L·∫•y l·ªùi khuy√™n chu·∫©n b·ªã
      const preparationAdvice = await this.getPreparationAdvice(recommendation?.recommended_specialty);

      // 5. L·∫•y l·ªùi khuy√™n chung
      const generalAdvice = await this.getGeneralAdviceBySymptoms(detectedSymptoms);

      // 6. T·∫°o c√¢u tr·∫£ l·ªùi th√¥ng minh v·ªõi Gemini
      const intelligentResponse = await this.generateIntelligentResponse(
        userInput,
        detectedSymptoms,
        recommendation,
        preparationAdvice,
        generalAdvice
      );

      return {
        symptoms_detected: detectedSymptoms,
        recommended_specialty: recommendation?.recommended_specialty || geminiAnalysis.suggestedSpecialty || 'Kh√°m t·ªïng qu√°t',
        confidence_score: recommendation?.confidence_score || 0.5,
        urgency_level: recommendation?.urgency_level || geminiAnalysis.urgencyLevel || 'medium',
        reasoning: intelligentResponse || recommendation?.reasoning_vi || 'D·ª±a tr√™n tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£',
        preparation_advice: preparationAdvice,
        general_advice: generalAdvice,
        should_see_doctor: this.shouldSeeDoctorImmediately(detectedSymptoms, recommendation)
      };

    } catch (error) {
      logger.error('Error analyzing symptoms:', error);
      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch tri·ªáu ch·ª©ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }



  /**
   * L·∫•y c√¢u h·ªèi follow-up th√¥ng minh
   */
  private async getIntelligentFollowup(pattern: any): Promise<any> {
    try {
      // X√°c ƒë·ªãnh category d·ª±a tr√™n specialty
      const categoryMap: { [key: string]: string } = {
        'Th·∫ßn kinh': 'neurological',
        'Ti√™u h√≥a': 'gastrointestinal',
        'H√¥ h·∫•p': 'respiratory',
        'Tim m·∫°ch': 'cardiovascular',
        'N·ªôi khoa': 'internal_medicine'
      };

      const category = categoryMap[pattern.recommended_specialty] || 'general';
      const primarySymptom = pattern.symptom_keywords[0] || 'unknown';

      const { data, error } = await this.supabase.rpc('get_intelligent_followup', {
        symptom_cat: category,
        symptom: primarySymptom
      });

      if (error) {
        logger.error('Error getting followup questions:', error);
        return null;
      }

      return data && data.length > 0 ? data[0] : null;
    } catch (error) {
      logger.error('Exception getting followup questions:', error);
      return null;
    }
  }

  /**
   * T·∫°o ph·∫£n h·ªìi theo ng·ªØ c·∫£nh
   */
  private async generateContextualResponse(pattern: any): Promise<any> {
    try {
      const contextType = this.determineContextType(pattern);
      const symptomPattern = pattern.symptom_keywords[0] || 'general';

      const { data, error } = await this.supabase.rpc('generate_contextual_response', {
        ctx_type: contextType,
        symptom_pat: symptomPattern,
        age_group: 'adult'
      });

      if (error) {
        logger.error('Error generating contextual response:', error);
        return null;
      }

      return data && data.length > 0 ? data[0] : null;
    } catch (error) {
      logger.error('Exception generating contextual response:', error);
      return null;
    }
  }

  /**
   * X√°c ƒë·ªãnh lo·∫°i ng·ªØ c·∫£nh d·ª±a tr√™n pattern
   */
  private determineContextType(pattern: any): string {
    if (pattern.urgency_level === 'emergency') {
      return 'emergency';
    } else if (pattern.urgency_level === 'urgent') {
      return 'follow_up';
    } else {
      return 'first_time';
    }
  }

  /**
   * X√¢y d·ª±ng ph·∫£n h·ªìi chi ti·∫øt
   */
  private buildDetailedResponse(pattern: any, followupQuestions: any, contextualResponse: any): string {
    let response = '';

    // 1. Ph√¢n t√≠ch chi ti·∫øt
    if (pattern.detailed_analysis) {
      response += `ü©∫ **Ph√¢n t√≠ch tri·ªáu ch·ª©ng:**\n${pattern.detailed_analysis}\n\n`;
    }

    // 2. C√¢u h·ªèi follow-up
    if (followupQuestions && followupQuestions.questions) {
      response += `‚ùì **ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:**\n`;

      const questions = followupQuestions.questions;
      Object.keys(questions).forEach((key, index) => {
        if (questions[key].question) {
          response += `${index + 1}. ${questions[key].question}\n`;
        }
      });
      response += '\n';
    } else if (pattern.analysis_questions && pattern.analysis_questions.length > 0) {
      response += `‚ùì **ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:**\n`;
      pattern.analysis_questions.slice(0, 3).forEach((question: string, index: number) => {
        response += `${index + 1}. ${question}\n`;
      });
      response += '\n';
    }

    // 3. Nguy√™n nh√¢n c√≥ th·ªÉ
    if (pattern.possible_causes && pattern.possible_causes.length > 0) {
      response += `üîç **Nguy√™n nh√¢n c√≥ th·ªÉ:**\n`;
      pattern.possible_causes.slice(0, 4).forEach((cause: string) => {
        response += `‚Ä¢ ${cause}\n`;
      });
      response += '\n';
    }

    // 4. L·ªùi khuy√™n t·ª± chƒÉm s√≥c
    if (pattern.self_care_advice && pattern.self_care_advice.length > 0) {
      response += `üí° **L·ªùi khuy√™n t·ª± chƒÉm s√≥c:**\n`;
      pattern.self_care_advice.slice(0, 4).forEach((advice: string) => {
        response += `‚Ä¢ ${advice}\n`;
      });
      response += '\n';
    }

    // 5. D·∫•u hi·ªáu c·∫£nh b√°o
    if (pattern.red_flags && pattern.red_flags.length > 0) {
      response += `üö® **C·∫ßn ƒë·∫øn b·ªánh vi·ªán ngay n·∫øu c√≥:**\n`;
      pattern.red_flags.slice(0, 3).forEach((flag: string) => {
        response += `‚Ä¢ ${flag}\n`;
      });
      response += '\n';
    }

    // 6. Khi n√†o c·∫ßn g·∫∑p b√°c sƒ©
    if (pattern.when_to_see_doctor) {
      response += `üè• **Khi n√†o c·∫ßn g·∫∑p b√°c sƒ©:**\n${pattern.when_to_see_doctor}\n\n`;
    }

    // 7. Khuy·∫øn ngh·ªã chuy√™n khoa
    if (pattern.recommended_specialty) {
      response += `üë®‚Äç‚öïÔ∏è **Khuy·∫øn ngh·ªã kh√°m:** Chuy√™n khoa **${pattern.recommended_specialty}**`;
    }

    return response.trim();
  }

  /**
   * L∆∞u l·ªãch s·ª≠ ph√¢n t√≠ch
   */
  private async saveAnalysisHistory(userInput: string, pattern: any, response: string): Promise<void> {
    try {
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

      const { error } = await this.supabase
        .from('detailed_analysis_history')
        .insert({
          session_id: sessionId,
          user_input: userInput,
          detected_patterns: [pattern.pattern_name],
          analysis_result: {
            pattern_name: pattern.pattern_name,
            confidence: pattern.confidence_score,
            specialty: pattern.recommended_specialty,
            urgency: pattern.urgency_level
          },
          followup_questions_asked: pattern.analysis_questions || [],
          final_recommendation: response,
          confidence_score: pattern.confidence_score || 80
        });

      if (error) {
        logger.error('Error saving analysis history:', error);
      }
    } catch (error) {
      logger.error('Exception saving analysis history:', error);
    }
  }

  /**
   * T√¨m pattern ph√¢n t√≠ch chi ti·∫øt t·ª´ Enhanced Analysis
   */
  private async findEnhancedAnalysisPattern(userInput: string): Promise<any> {
    try {
      const { data, error } = await this.supabase.rpc('find_symptom_analysis_pattern', {
        user_input: userInput
      });

      if (error) {
        logger.error('Error finding enhanced pattern:', error);
        return null;
      }

      return data && data.length > 0 ? data[0] : null;
    } catch (error) {
      logger.error('Exception finding enhanced pattern:', error);
      return null;
    }
  }

  /**
   * T·∫°o ph·∫£n h·ªìi chi ti·∫øt t·ª´ Enhanced Analysis
   */
  private async generateEnhancedResponse(userInput: string, pattern: any): Promise<HealthConsultationResult> {
    try {
      // 1. L·∫•y c√¢u h·ªèi follow-up th√¥ng minh
      const followupQuestions = await this.getIntelligentFollowup(pattern);

      // 2. T·∫°o ph·∫£n h·ªìi theo ng·ªØ c·∫£nh
      const contextualResponse = await this.generateContextualResponse(pattern);

      // 3. T·∫°o c√¢u tr·∫£ l·ªùi chi ti·∫øt
      const detailedResponse = this.buildDetailedResponse(pattern, followupQuestions, contextualResponse);

      // 4. L∆∞u l·ªãch s·ª≠ ph√¢n t√≠ch
      await this.saveAnalysisHistory(userInput, pattern, detailedResponse);

      return {
        symptoms_detected: [],
        recommended_specialty: pattern.recommended_specialty || 'Kh√°m t·ªïng qu√°t',
        confidence_score: (pattern.confidence_score || 80) / 100,
        urgency_level: pattern.urgency_level || 'routine',
        reasoning: detailedResponse,
        preparation_advice: 'Mang theo gi·∫•y t·ªù t√πy th√¢n, th·∫ª BHYT v√† k·∫øt qu·∫£ x√©t nghi·ªám c≈© (n·∫øu c√≥)',
        general_advice: pattern.self_care_advice || [],
        should_see_doctor: pattern.urgency_level === 'emergency' || pattern.urgency_level === 'urgent'
      };

    } catch (error) {
      logger.error('Error generating enhanced response:', error);
      throw error;
    }
  }

  /**
   * Ph√°t hi·ªán tri·ªáu ch·ª©ng t·ª´ text
   */
  private async detectSymptomsFromText(text: string): Promise<Symptom[]> {
    const normalizedText = text.toLowerCase();
    
    const { data: symptoms, error } = await this.supabase
      .from('symptoms')
      .select('*');

    if (error) {
      logger.error('Error fetching symptoms:', error);
      return [];
    }

    const detectedSymptoms: Symptom[] = [];

    for (const symptom of symptoms) {
      // Ki·ªÉm tra keywords
      const hasKeyword = symptom.keywords.some((keyword: string) => 
        normalizedText.includes(keyword.toLowerCase())
      );

      // Ki·ªÉm tra t√™n tri·ªáu ch·ª©ng
      const hasName = normalizedText.includes(symptom.name_vi.toLowerCase());

      if (hasKeyword || hasName) {
        detectedSymptoms.push(symptom);
      }
    }

    return detectedSymptoms;
  }

  /**
   * T√¨m khuy·∫øn ngh·ªã chuy√™n khoa d·ª±a tr√™n tri·ªáu ch·ª©ng
   */
  private async findSpecialtyRecommendation(symptoms: Symptom[]): Promise<SpecialtyRecommendation | null> {
    if (symptoms.length === 0) return null;

    const symptomIds = symptoms.map(s => s.symptom_id);

    const { data: recommendations, error } = await this.supabase
      .from('specialty_recommendations')
      .select('*')
      .order('confidence_score', { ascending: false });

    if (error) {
      logger.error('Error fetching recommendations:', error);
      return null;
    }

    // T√¨m recommendation c√≥ ƒë·ªô kh·ªõp cao nh·∫•t
    let bestMatch: SpecialtyRecommendation | null = null;
    let bestScore = 0;

    for (const rec of recommendations) {
      const matchCount = rec.symptom_combinations.filter((symptomId: string) => 
        symptomIds.includes(symptomId)
      ).length;

      const matchScore = matchCount / rec.symptom_combinations.length;
      
      if (matchScore > bestScore && matchScore > 0.3) { // √çt nh·∫•t 30% kh·ªõp
        bestScore = matchScore;
        bestMatch = rec;
      }
    }

    return bestMatch;
  }

  /**
   * L·∫•y l·ªùi khuy√™n chu·∫©n b·ªã kh√°m b·ªánh
   */
  private async getPreparationAdvice(specialty?: string): Promise<string> {
    const { data: advice, error } = await this.supabase
      .from('health_advice')
      .select('*')
      .eq('category', 'preparation')
      .limit(1);

    if (error || !advice || advice.length === 0) {
      return 'Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß gi·∫•y t·ªù t√πy th√¢n, th·∫ª BHYT (n·∫øu c√≥), v√† danh s√°ch thu·ªëc ƒëang s·ª≠ d·ª•ng.';
    }

    return advice[0].content_vi;
  }

  /**
   * L·∫•y l·ªùi khuy√™n chung d·ª±a tr√™n tri·ªáu ch·ª©ng
   */
  private async getGeneralAdviceBySymptoms(symptoms: Symptom[]): Promise<string[]> {
    const categories = [...new Set(symptoms.map(s => s.category))];

    const { data: advice, error } = await this.supabase
      .from('health_advice')
      .select('*')
      .eq('category', 'general')
      .limit(3);

    if (error || !advice) {
      return [
        'Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß v√† u·ªëng nhi·ªÅu n∆∞·ªõc',
        'Theo d√µi tri·ªáu ch·ª©ng v√† ghi ch√©p l·∫°i',
        'Tr√°nh t·ª± √Ω d√πng thu·ªëc kh√¥ng c√≥ ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ©'
      ];
    }

    return advice.map(a => a.content_vi);
  }

  /**
   * Ki·ªÉm tra xem c√¢u h·ªèi c√≥ thu·ªôc lƒ©nh v·ª±c y t·∫ø kh√¥ng
   */
  private isHealthRelatedQuestion(userInput: string): boolean {
    const healthKeywords = [
      // Tri·ªáu ch·ª©ng c∆° b·∫£n
      'ƒëau', 'nh·ª©c', 'm·ªát', 's·ªët', 'ho', 'kh√≥ th·ªü', 'ch√≥ng m·∫∑t', 'bu·ªìn n√¥n', 'n√¥n', 'ti√™u ch·∫£y',
      't√°o b√≥n', 'ƒëau b·ª•ng', 'ƒëau ƒë·∫ßu', 'ƒëau ng·ª±c', 'ƒëau l∆∞ng', 'ƒëau kh·ªõp', 's∆∞ng', 'vi√™m',
      'ng·ª©a', 'ph√°t ban', 'd·ªã ·ª©ng', 'c·∫£m l·∫°nh', 'c√∫m', 'ho khan', 'ho c√≥ ƒë·ªùm', 'kh√†n ti·∫øng',

      // B·ªô ph·∫≠n c∆° th·ªÉ
      'ƒë·∫ßu', 'm·∫Øt', 'tai', 'm≈©i', 'h·ªçng', 'c·ªï', 'vai', 'tay', 'ng·ª±c', 'l∆∞ng', 'b·ª•ng', 'ch√¢n',
      'tim', 'ph·ªïi', 'gan', 'th·∫≠n', 'd·∫° d√†y', 'ru·ªôt', 'x∆∞∆°ng', 'kh·ªõp', 'da', 't√≥c', 'm√≥ng',

      // Y t·∫ø chung
      'b·ªánh', 'thu·ªëc', 'ƒëi·ªÅu tr·ªã', 'kh√°m', 'b√°c sƒ©', 'b·ªánh vi·ªán', 'ph√≤ng kh√°m', 'x√©t nghi·ªám',
      'ch·∫©n ƒëo√°n', 'tri·ªáu ch·ª©ng', 'd·∫•u hi·ªáu', 's·ª©c kh·ªèe', 'y t·∫ø', 'ch·ªØa', 'u·ªëng thu·ªëc',
      't√°i kh√°m', 'c·∫•p c·ª©u', 'kh·∫©n c·∫•p', 'nguy hi·ªÉm', 'nghi√™m tr·ªçng',

      // Chuy√™n khoa
      'n·ªôi khoa', 'ngo·∫°i khoa', 's·∫£n ph·ª• khoa', 'nhi khoa', 'tim m·∫°ch', 'th·∫ßn kinh',
      'ti√™u h√≥a', 'h√¥ h·∫•p', 'da li·ªÖu', 'm·∫Øt', 'tai m≈©i h·ªçng', 'rƒÉng h√†m m·∫∑t',
      'ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh', 't√¢m th·∫ßn', 'dinh d∆∞·ª°ng'
    ];

    const input = userInput.toLowerCase();
    return healthKeywords.some(keyword => input.includes(keyword));
  }

  /**
   * Tr·∫£ v·ªÅ response cho c√¢u h·ªèi ngo√†i lƒ©nh v·ª±c
   */
  private getOutOfScopeResponse(): HealthConsultationResult {
    return {
      symptoms_detected: [],
      recommended_specialty: '',
      confidence_score: 0,
      urgency_level: 'low',
      reasoning: 'Xin l·ªói, c√¢u h·ªèi c·ªßa b·∫°n kh√¥ng thu·ªôc lƒ©nh v·ª±c t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi. Vui l√≤ng h·ªèi c√¢u h·ªèi kh√°c. Xin c·∫£m ∆°n!',
      preparation_advice: '',
      general_advice: [],
      should_see_doctor: false
    };
  }

  /**
   * L·∫•y l·ªùi khuy√™n s·ª©c kh·ªèe chung
   */
  private getGeneralHealthAdvice(): HealthConsultationResult {
    return {
      symptoms_detected: [],
      recommended_specialty: 'Kh√°m t·ªïng qu√°t',
      confidence_score: 0.5,
      urgency_level: 'low',
      reasoning: 'Kh√¥ng ph√°t hi·ªán tri·ªáu ch·ª©ng c·ª• th·ªÉ t·ª´ m√¥ t·∫£ c·ªßa b·∫°n',
      preparation_advice: 'Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß gi·∫•y t·ªù v√† m√¥ t·∫£ chi ti·∫øt t√¨nh tr·∫°ng s·ª©c kh·ªèe v·ªõi b√°c sƒ©',
      general_advice: [
        'Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh',
        'T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n',
        'ƒÇn u·ªëng c√¢n b·∫±ng dinh d∆∞·ª°ng',
        'Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥'
      ],
      should_see_doctor: false
    };
  }

  /**
   * Ki·ªÉm tra c√≥ c·∫ßn kh√°m b√°c sƒ© ngay l·∫≠p t·ª©c kh√¥ng
   */
  private shouldSeeDoctorImmediately(symptoms: Symptom[], recommendation: SpecialtyRecommendation | null): boolean {
    // CH·ªà c·∫£nh b√°o c·∫•p c·ª©u khi th·ª±c s·ª± nghi√™m tr·ªçng

    // Ki·ªÉm tra m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ª±c cao (level 5)
    const hasCriticalSeverity = symptoms.some(s => s.severity_level === 5);

    // Ki·ªÉm tra m·ª©c ƒë·ªô kh·∫©n c·∫•p th·ª±c s·ª± (ch·ªâ emergency)
    const isEmergency = recommendation?.urgency_level === 'emergency';

    // Ki·ªÉm tra t·ª´ kh√≥a c·∫•p c·ª©u trong tri·ªáu ch·ª©ng
    const hasEmergencyKeywords = symptoms.some(s =>
      s.keywords.some(keyword =>
        ['c·∫•p c·ª©u', 'nguy hi·ªÉm', 'nghi√™m tr·ªçng', 'kh·∫©n c·∫•p', 'd·ªØ d·ªôi'].includes(keyword.toLowerCase())
      )
    );

    // CH·ªà tr·∫£ v·ªÅ true khi th·ª±c s·ª± c·∫ßn c·∫•p c·ª©u
    return hasCriticalSeverity || isEmergency || hasEmergencyKeywords;
  }

  /**
   * L·∫•y danh s√°ch chuy√™n khoa c√≥ s·∫µn
   */
  async getAvailableSpecialties(): Promise<string[]> {
    try {
      const { data: departments, error } = await this.supabase
        .from('departments')
        .select('name');

      if (error) {
        logger.error('Error fetching departments:', error);
        return ['Kh√°m t·ªïng qu√°t', 'Tim m·∫°ch', 'Ti√™u h√≥a', 'H√¥ h·∫•p', 'Th·∫ßn kinh'];
      }

      return departments.map(d => d.name);
    } catch (error) {
      logger.error('Error getting available specialties:', error);
      return ['Kh√°m t·ªïng qu√°t'];
    }
  }

  /**
   * L·∫•y l·ªùi khuy√™n chƒÉm s√≥c sau ƒëi·ªÅu tr·ªã
   */
  async getPostTreatmentAdvice(specialty: string): Promise<string[]> {
    try {
      const { data: advice, error } = await this.supabase
        .from('health_advice')
        .select('*')
        .eq('category', 'post_treatment')
        .contains('applicable_specialties', [specialty]);

      if (error || !advice || advice.length === 0) {
        return [
          'Tu√¢n th·ªß ƒë√∫ng ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ©',
          'U·ªëng thu·ªëc ƒë√∫ng li·ªÅu l∆∞·ª£ng v√† th·ªùi gian',
          'T√°i kh√°m theo l·ªãch h·∫πn',
          'Li√™n h·ªá b√°c sƒ© n·∫øu c√≥ tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng'
        ];
      }

      return advice.map(a => a.content_vi);
    } catch (error) {
      logger.error('Error getting post-treatment advice:', error);
      return ['Tu√¢n th·ªß ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ© v√† t√°i kh√°m ƒë√∫ng h·∫πn'];
    }
  }

  /**
   * Ph√¢n t√≠ch v·ªõi Gemini AI
   */
  private async analyzeWithGemini(userInput: string, detectedSymptoms: Symptom[]): Promise<GeminiAnalysis> {
    try {
      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω y t·∫ø AI chuy√™n nghi·ªáp. H√£y ph√¢n t√≠ch c√¢u h·ªèi sau c·ªßa b·ªánh nh√¢n b·∫±ng ti·∫øng Vi·ªát:

"${userInput}"

Tri·ªáu ch·ª©ng ƒë√£ ph√°t hi·ªán t·ª´ database: ${detectedSymptoms.map(s => s.name_vi).join(', ')}

H√£y tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON v·ªõi c√°c th√¥ng tin sau:
{
  "hasHealthContent": true/false,
  "suggestedSpecialty": "t√™n chuy√™n khoa n·∫øu c√≥",
  "urgencyLevel": "low/medium/high/emergency",
  "additionalSymptoms": ["tri·ªáu ch·ª©ng b·ªï sung n·∫øu c√≥"],
  "confidence": 0.0-1.0
}

L∆∞u √Ω:
- Ch·ªâ tr·∫£ l·ªùi v·ªÅ c√°c v·∫•n ƒë·ªÅ y t·∫ø
- Kh√¥ng ƒë∆∞a ra ch·∫©n ƒëo√°n c·ª• th·ªÉ
- Khuy·∫øn ngh·ªã g·∫∑p b√°c sƒ© khi c·∫ßn thi·∫øt
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      // Parse JSON response
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const analysis = JSON.parse(jsonMatch[0]);
          return {
            hasHealthContent: analysis.hasHealthContent || false,
            suggestedSpecialty: analysis.suggestedSpecialty,
            urgencyLevel: analysis.urgencyLevel || 'medium',
            additionalSymptoms: analysis.additionalSymptoms || [],
            confidence: analysis.confidence || 0.5
          };
        }
      } catch (parseError) {
        logger.warn('Failed to parse Gemini JSON response:', parseError);
      }

      // Fallback analysis
      return {
        hasHealthContent: this.isHealthRelatedQuestion(userInput),
        confidence: 0.3
      };

    } catch (error) {
      logger.error('Error analyzing with Gemini:', error);
      return {
        hasHealthContent: this.isHealthRelatedQuestion(userInput),
        confidence: 0.2
      };
    }
  }

  /**
   * T·∫°o c√¢u tr·∫£ l·ªùi th√¥ng minh v·ªõi Gemini AI
   */
  private async generateIntelligentResponse(
    userInput: string,
    symptoms: Symptom[],
    recommendation: SpecialtyRecommendation | null,
    preparationAdvice: string,
    generalAdvice: string[]
  ): Promise<string> {
    try {
      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω y t·∫ø AI chuy√™n nghi·ªáp t·∫°i b·ªánh vi·ªán. H√£y t·∫°o c√¢u tr·∫£ l·ªùi t∆∞ v·∫•n cho b·ªánh nh√¢n d·ª±a tr√™n th√¥ng tin sau:

C√¢u h·ªèi c·ªßa b·ªánh nh√¢n: "${userInput}"

Th√¥ng tin ph√¢n t√≠ch:
- Tri·ªáu ch·ª©ng ph√°t hi·ªán: ${symptoms.map(s => s.name_vi).join(', ')}
- Chuy√™n khoa ƒë·ªÅ xu·∫•t: ${recommendation?.recommended_specialty || 'Kh√°m t·ªïng qu√°t'}
- M·ª©c ƒë·ªô kh·∫©n c·∫•p: ${recommendation?.urgency_level || 'medium'}
- L·ªùi khuy√™n chu·∫©n b·ªã: ${preparationAdvice}
- L·ªùi khuy√™n chung: ${generalAdvice.join(', ')}

Y√™u c·∫ßu:
1. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp
2. Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ tri·ªáu ch·ª©ng
3. ƒê∆∞a ra khuy·∫øn ngh·ªã chuy√™n khoa ph√π h·ª£p
4. Kh√¥ng ƒë∆∞a ra ch·∫©n ƒëo√°n c·ª• th·ªÉ
5. Khuy·∫øn kh√≠ch g·∫∑p b√°c sƒ© khi c·∫ßn thi·∫øt
6. ƒê·ªô d√†i kho·∫£ng 100-150 t·ª´
7. K·∫øt th√∫c b·∫±ng l·ªùi ƒë·ªông vi√™n

H√£y t·∫°o c√¢u tr·∫£ l·ªùi t∆∞ v·∫•n:
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      return text.trim();

    } catch (error) {
      logger.error('Error generating intelligent response:', error);
      return recommendation?.reasoning_vi || 'D·ª±a tr√™n tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£, t√¥i khuy√™n b·∫°n n√™n g·∫∑p b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t.';
    }
  }

  /**
   * Ki·ªÉm tra tri·ªáu ch·ª©ng c·∫•p c·ª©u t·ª´ database training data
   */
  private async checkEmergencySymptoms(userMessage: string): Promise<string | null> {
    try {
      const normalizedMessage = userMessage.toLowerCase();

      // T√¨m trong database training data cho emergency combinations
      const { data: emergencyData, error } = await this.supabase
        .from('chatbot_training_data')
        .select('*')
        .eq('category', 'emergency_combinations')
        .eq('is_active', true);

      if (error || !emergencyData) {
        return null;
      }

      // Ki·ªÉm tra t·ª´ng pattern c·∫•p c·ª©u
      for (const emergency of emergencyData) {
        const keywords = emergency.keywords || [];
        let matchCount = 0;

        // ƒê·∫øm s·ªë t·ª´ kh√≥a kh·ªõp
        for (const keyword of keywords) {
          if (normalizedMessage.includes(keyword.toLowerCase())) {
            matchCount++;
          }
        }

        // N·∫øu kh·ªõp >= 2 t·ª´ kh√≥a quan tr·ªçng ‚Üí c·∫•p c·ª©u
        if (matchCount >= 2) {
          logger.warn('EMERGENCY SYMPTOMS DETECTED:', { userMessage, matchedKeywords: keywords });
          return emergency.answer;
        }
      }

      return null;
    } catch (error) {
      logger.error('Error checking emergency symptoms:', error);
      return null;
    }
  }

  /**
   * Chat conversation v·ªõi Gemini AI - method ch√≠nh cho chatbot
   */
  async chatWithAI(userMessage: string, conversationHistory?: string[]): Promise<string> {
    try {
      logger.info('Processing chat message:', { userMessage });

      // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi y t·∫ø kh√¥ng
      if (!this.isHealthRelatedQuestion(userMessage)) {
        return 'Xin l·ªói, c√¢u h·ªèi c·ªßa b·∫°n kh√¥ng thu·ªôc lƒ©nh v·ª±c t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi. Vui l√≤ng h·ªèi c√¢u h·ªèi kh√°c. Xin c·∫£m ∆°n!';
      }

      // B∆Ø·ªöC 1: Ki·ªÉm tra t·ªï h·ª£p tri·ªáu ch·ª©ng c·∫•p c·ª©u TR∆Ø·ªöC KHI g·ªçi Gemini
      const emergencyResponse = await this.checkEmergencySymptoms(userMessage);
      if (emergencyResponse) {
        return emergencyResponse;
      }

      // T·∫°o context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
      const context = conversationHistory ?
        `L·ªãch s·ª≠ h·ªôi tho·∫°i:\n${conversationHistory.slice(-4).join('\n')}\n\n` : '';

      const prompt = `
B·∫°n l√† tr·ª£ l√Ω y t·∫ø AI th√¥ng minh c·ªßa b·ªánh vi·ªán, chuy√™n t∆∞ v·∫•n s·ª©c kh·ªèe b·∫±ng ti·∫øng Vi·ªát.

${context}C√¢u h·ªèi hi·ªán t·∫°i: "${userMessage}"

‚ö†Ô∏è **QUAN TR·ªåNG - PH√ÅT HI·ªÜN C·∫§P C·ª®U:**
N·∫øu b·ªánh nh√¢n m√¥ t·∫£ T·ªî H·ª¢P tri·ªáu ch·ª©ng nghi√™m tr·ªçng, B·∫ÆT BU·ªòC ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng: üö® **C·∫¢NH B√ÅO C·∫§P C·ª®U** üö®

C√°c t·ªï h·ª£p c·∫•p c·ª©u:
- "s·ªët cao + ƒëau ƒë·∫ßu d·ªØ d·ªôi" ‚Üí VI√äM M√ÄNG N√ÉO ‚Üí G·ªåI 115 NGAY!
- "ƒëau ƒë·∫ßu + bu·ªìn n√¥n + nh√¨n m·ªù" ‚Üí TƒÇNG √ÅP L·ª∞C N·ªòI S·ªå ‚Üí G·ªåI 115 NGAY!
- "ƒëau ng·ª±c + kh√≥ th·ªü" ‚Üí NH·ªíI M√ÅU C∆† TIM ‚Üí G·ªåI 115 NGAY!
- "ƒëau b·ª•ng d·ªØ d·ªôi + n√¥n ra m√°u" ‚Üí XU·∫§T HUY·∫æT TI√äU H√ìA ‚Üí G·ªåI 115 NGAY!
- "ch√≥ng m·∫∑t + ng·∫•t x·ªâu" ‚Üí R·ªêI LO·∫†N NH·ªäP TIM ‚Üí G·ªåI 115 NGAY!

**FORMAT TR·∫ÆC L·ªúI B·∫ÆT BU·ªòC:**

üîç **PH√ÇN T√çCH TRI·ªÜU CH·ª®NG:**
[M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ tri·ªáu ch·ª©ng]

üè• **KHUY·∫æN NGH·ªä CHUY√äN KHOA:**
[T√™n chuy√™n khoa ph√π h·ª£p]

‚ö° **M·ª®C ƒê·ªò KH·∫®N C·∫§P:**
[Th·∫•p/Trung b√¨nh/Cao/C·∫•p c·ª©u]

üí° **H∆Ø·ªöNG D·∫™N X·ª¨ L√ù:**
[2-3 b∆∞·ªõc x·ª≠ l√Ω ban ƒë·∫ßu]

üìã **CHU·∫®N B·ªä KH√ÅM:**
[Nh·ªØng g√¨ c·∫ßn chu·∫©n b·ªã khi ƒëi kh√°m]

H√£y tr·∫£ l·ªùi theo c√°c nguy√™n t·∫Øc sau:
1. **∆ØU TI√äN TUY·ªÜT ƒê·ªêI**: Ph√°t hi·ªán v√† c·∫£nh b√°o c·∫•p c·ª©u!
2. **B·∫ÆT BU·ªòC** s·ª≠ d·ª•ng format tr√™n v·ªõi c√°c emoji v√† ti√™u ƒë·ªÅ
3. S·ª≠ d·ª•ng ti·∫øng Vi·ªát th√¢n thi·ªán, chuy√™n nghi·ªáp
4. M·ªói m·ª•c ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc (1-2 c√¢u)
5. KH√îNG ƒë∆∞a ra ch·∫©n ƒëo√°n c·ª• th·ªÉ
6. Khuy·∫øn kh√≠ch g·∫∑p b√°c sƒ© khi c·∫ßn thi·∫øt
7. K·∫øt th√∫c b·∫±ng c√¢u ƒë·ªông vi√™n

C√°c chuy√™n khoa c√≥ s·∫µn: Kh√°m t·ªïng qu√°t, Tim m·∫°ch, Ti√™u h√≥a, H√¥ h·∫•p, Th·∫ßn kinh, N·ªôi khoa, Ngo·∫°i khoa, S·∫£n ph·ª• khoa, Nhi khoa, Da li·ªÖu, M·∫Øt, Tai m≈©i h·ªçng, RƒÉng h√†m m·∫∑t, Ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh.

Tr·∫£ l·ªùi:
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      let text = response.text().trim();

      // Gi·ªõi h·∫°n ƒë·ªô d√†i response ƒë·ªÉ ph√π h·ª£p v·ªõi chat interface
      if (text.length > 500) {
        const sentences = text.split('. ');
        text = sentences.slice(0, 3).join('. ') + '.';
      }

      return text;

    } catch (error) {
      logger.error('Error in chat with AI:', error);
      return 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.';
    }
  }
}
