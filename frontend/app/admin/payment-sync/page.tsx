'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import {
  RefreshCw,
  Play,
  Square,
  Search,
  Settings,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle,
  Info,
  Eye,
  Users,
  TrendingUp,
  CreditCard
} from 'lucide-react';

export default function PaymentSyncAdminPage() {
    const [isRunning, setIsRunning] = useState(false);
    const [lastResult, setLastResult] = useState<any>(null);
    const [autoSync, setAutoSync] = useState(false);
    const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);
    const [recoveryResult, setRecoveryResult] = useState<any>(null);
    const [recoveryLoading, setRecoveryLoading] = useState(false);
    const [userStats, setUserStats] = useState<any>(null);

    // Ch·∫°y job ƒë·ªìng b·ªô th·ªß c√¥ng
    const runSyncJob = async () => {
        setIsRunning(true);
        try {
            const response = await fetch('/api/payment/sync-job', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer sync-job-secret-token',
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();
            setLastResult(result);
            
            if (result.success) {
                alert(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng!\nC·∫≠p nh·∫≠t: ${result.data.updated}/${result.data.total} thanh to√°n`);
                // Refresh th·ªëng k√™ ng∆∞·ªùi d√πng sau khi ƒë·ªìng b·ªô
                fetchUserStats();
            } else {
                alert(`‚ùå ƒê·ªìng b·ªô th·∫•t b·∫°i: ${result.error}`);
            }
        } catch (error) {
            console.error('Error running sync job:', error);
            alert('‚ùå L·ªói khi ch·∫°y job ƒë·ªìng b·ªô');
        } finally {
            setIsRunning(false);
        }
    };

    // B·∫≠t/t·∫Øt ƒë·ªìng b·ªô t·ª± ƒë·ªông
    const toggleAutoSync = () => {
        if (autoSync) {
            // T·∫Øt auto sync
            if (intervalId) {
                clearInterval(intervalId);
                setIntervalId(null);
            }
            setAutoSync(false);
            alert('üõë ƒê√£ t·∫Øt ƒë·ªìng b·ªô t·ª± ƒë·ªông');
        } else {
            // B·∫≠t auto sync (ch·∫°y m·ªói 1 ph√∫t)
            const id = setInterval(() => {
                runSyncJob();
            }, 1 * 60 * 1000); // 1 ph√∫t
            
            setIntervalId(id);
            setAutoSync(true);
            alert('üöÄ ƒê√£ b·∫≠t ƒë·ªìng b·ªô t·ª± ƒë·ªông (m·ªói 1 ph√∫t)');
        }
    };

    // Ch·∫°y recovery job
    const runRecoveryJob = async (hours: number = 24) => {
        setRecoveryLoading(true);
        try {
            const response = await fetch(`/api/payment/recovery?action=recover&hours=${hours}`);
            const result = await response.json();
            setRecoveryResult(result);

            if (result.success) {
                const { recovered, updated, summary } = result.data;
                alert(`‚úÖ Recovery ho√†n th√†nh!\n\nüìä K·∫øt qu·∫£:\n- Kh√¥i ph·ª•c: ${recovered} giao d·ªãch\n- C·∫≠p nh·∫≠t: ${updated} giao d·ªãch\n- PayOS: ${summary.payosTotal} giao d·ªãch\n- Database: ${summary.databaseTotal} giao d·ªãch`);
                // Refresh th·ªëng k√™ ng∆∞·ªùi d√πng sau khi recovery
                fetchUserStats();
            } else {
                alert(`‚ùå Recovery th·∫•t b·∫°i: ${result.error}`);
            }
        } catch (error) {
            console.error('Error running recovery job:', error);
            alert('‚ùå L·ªói khi ch·∫°y recovery job');
        } finally {
            setRecoveryLoading(false);
        }
    };

    // Ki·ªÉm tra giao d·ªãch s√≥t (kh√¥ng kh√¥i ph·ª•c)
    const checkMissingTransactions = async (hours: number = 24) => {
        setRecoveryLoading(true);
        try {
            const response = await fetch(`/api/payment/recovery?action=check&hours=${hours}`);
            const result = await response.json();

            if (result.success) {
                const { missing, statusMismatches, summary } = result.data;
                alert(`üîç Ki·ªÉm tra ho√†n th√†nh!\n\nüìä Ph√°t hi·ªán:\n- Giao d·ªãch b·ªã s√≥t: ${missing.length}\n- Tr·∫°ng th√°i sai: ${statusMismatches.length}\n- PayOS: ${summary.payosTotal} giao d·ªãch\n- Database: ${summary.databaseTotal} giao d·ªãch\n\n${missing.length > 0 || statusMismatches.length > 0 ? '‚ö†Ô∏è C√≥ giao d·ªãch c·∫ßn kh√¥i ph·ª•c!' : '‚úÖ T·∫•t c·∫£ giao d·ªãch ƒë·ªÅu ƒë·ªìng b·ªô!'}`);
            } else {
                alert(`‚ùå Ki·ªÉm tra th·∫•t b·∫°i: ${result.error}`);
            }
        } catch (error) {
            console.error('Error checking missing transactions:', error);
            alert('‚ùå L·ªói khi ki·ªÉm tra giao d·ªãch');
        } finally {
            setRecoveryLoading(false);
        }
    };

    // L·∫•y th·ªëng k√™ l·ªãch s·ª≠ thanh to√°n ng∆∞·ªùi d√πng
    const fetchUserStats = async () => {
        try {
            const response = await fetch('/api/patient/payment-history?page=1&limit=1');
            const data = await response.json();
            if (data.success) {
                setUserStats(data.data.summary);
            }
        } catch (error) {
            console.error('Error fetching user stats:', error);
        }
    };

    // Cleanup khi component unmount
    useEffect(() => {
        fetchUserStats();
        return () => {
            if (intervalId) {
                clearInterval(intervalId);
            }
        };
    }, [intervalId]);

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleString('vi-VN');
    };

    return (
        <div className="container mx-auto p-6 space-y-6">
            {/* Header */}
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-3xl font-bold tracking-tight flex items-center gap-2">
                        <RefreshCw className="h-8 w-8 text-blue-600" />
                        ƒê·ªìng b·ªô thanh to√°n PayOS
                    </h1>
                    <p className="text-muted-foreground mt-2">
                        Qu·∫£n l√Ω v√† ƒë·ªìng b·ªô tr·∫°ng th√°i thanh to√°n t·ª´ PayOS v·ªÅ h·ªá th·ªëng - C·∫≠p nh·∫≠t l·ªãch s·ª≠ thanh to√°n ng∆∞·ªùi d√πng
                    </p>
                </div>
                <div className="flex items-center gap-3">
                    <Badge variant={autoSync ? "default" : "secondary"} className="text-sm">
                        {autoSync ? "ƒêang ho·∫°t ƒë·ªông" : "ƒê√£ t·∫Øt"}
                    </Badge>
                    <Button asChild variant="outline" size="sm">
                        <Link href="/patient/payment-history">
                            <Eye className="h-4 w-4 mr-2" />
                            Xem l·ªãch s·ª≠ thanh to√°n
                        </Link>
                    </Button>
                    <Button asChild variant="outline" size="sm">
                        <Link href="/admin/all-payments">
                            <CreditCard className="h-4 w-4 mr-2" />
                            Qu·∫£n l√Ω t·∫•t c·∫£ thanh to√°n
                        </Link>
                    </Button>
                </div>
            </div>

            <Separator />

            {/* User Payment Stats */}
            {userStats && (
                <Card className="bg-gradient-to-r from-blue-50 to-green-50 border-blue-200">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2 text-blue-800">
                            <Users className="h-5 w-5" />
                            Th·ªëng k√™ l·ªãch s·ª≠ thanh to√°n ng∆∞·ªùi d√πng
                        </CardTitle>
                        <CardDescription>
                            D·ªØ li·ªáu ƒë·ªìng b·ªô t·ª´ PayOS hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <div className="text-center p-4 bg-white rounded-lg border">
                                <div className="text-2xl font-bold text-green-600">
                                    {userStats.totalPaid?.toLocaleString('vi-VN')}ƒë
                                </div>
                                <div className="text-sm text-gray-600">T·ªïng ƒë√£ thanh to√°n</div>
                            </div>
                            <div className="text-center p-4 bg-white rounded-lg border">
                                <div className="text-2xl font-bold text-blue-600">
                                    {userStats.totalTransactions || 0}
                                </div>
                                <div className="text-sm text-gray-600">S·ªë giao d·ªãch</div>
                            </div>
                            <div className="text-center p-4 bg-white rounded-lg border">
                                <div className="text-2xl font-bold text-emerald-600">
                                    {userStats.syncedPayments || 0}
                                </div>
                                <div className="text-sm text-gray-600">ƒê√£ ƒë·ªìng b·ªô PayOS</div>
                                <div className="text-xs text-emerald-600 mt-1">
                                    {userStats.syncRate?.toFixed(1) || 0}% t·ªïng s·ªë
                                </div>
                            </div>
                            <div className="text-center p-4 bg-white rounded-lg border">
                                <div className="text-2xl font-bold text-purple-600">
                                    {userStats.averageAmount?.toLocaleString('vi-VN') || 0}ƒë
                                </div>
                                <div className="text-sm text-gray-600">Trung b√¨nh/giao d·ªãch</div>
                            </div>
                        </div>
                        <div className="mt-4 flex justify-center">
                            <Button asChild variant="outline">
                                <Link href="/patient/payment-history">
                                    <Eye className="h-4 w-4 mr-2" />
                                    Xem chi ti·∫øt l·ªãch s·ª≠ thanh to√°n
                                </Link>
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            )}

            {/* Control Panel */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Settings className="h-5 w-5" />
                            ƒêi·ªÅu khi·ªÉn ƒë·ªìng b·ªô
                        </CardTitle>
                        <CardDescription>
                            Qu·∫£n l√Ω qu√° tr√¨nh ƒë·ªìng b·ªô thanh to√°n t·ª± ƒë·ªông v√† th·ªß c√¥ng
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="flex flex-col sm:flex-row gap-3">
                            <Button
                                onClick={runSyncJob}
                                disabled={isRunning}
                                className="flex items-center gap-2"
                                size="lg"
                            >
                                {isRunning ? (
                                    <>
                                        <RefreshCw className="h-4 w-4 animate-spin" />
                                        ƒêang ƒë·ªìng b·ªô...
                                    </>
                                ) : (
                                    <>
                                        <Play className="h-4 w-4" />
                                        ƒê·ªìng b·ªô ngay
                                    </>
                                )}
                            </Button>

                            <Button
                                onClick={toggleAutoSync}
                                variant={autoSync ? "destructive" : "default"}
                                className="flex items-center gap-2"
                                size="lg"
                            >
                                {autoSync ? (
                                    <>
                                        <Square className="h-4 w-4" />
                                        T·∫Øt t·ª± ƒë·ªông
                                    </>
                                ) : (
                                    <>
                                        <Play className="h-4 w-4" />
                                        B·∫≠t t·ª± ƒë·ªông
                                    </>
                                )}
                            </Button>
                        </div>

                        <Alert>
                            <Info className="h-4 w-4" />
                            <AlertDescription>
                                {autoSync
                                    ? "ƒê·ªìng b·ªô t·ª± ƒë·ªông ƒëang ch·∫°y m·ªói 1 ph√∫t ƒë·ªÉ ki·ªÉm tra thanh to√°n pending"
                                    : "ƒê·ªìng b·ªô t·ª± ƒë·ªông ƒë√£ t·∫Øt. B·∫°n c√≥ th·ªÉ ch·∫°y ƒë·ªìng b·ªô th·ªß c√¥ng b·∫•t k·ª≥ l√∫c n√†o"
                                }
                            </AlertDescription>
                        </Alert>
                    </CardContent>
                </Card>

                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Search className="h-5 w-5" />
                            Ki·ªÉm tra giao d·ªãch
                        </CardTitle>
                        <CardDescription>
                            So s√°nh v·ªõi PayOS ƒë·ªÉ t√¨m giao d·ªãch b·ªã s√≥t ho·∫∑c tr·∫°ng th√°i sai
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                            <Button
                                onClick={() => checkMissingTransactions(6)}
                                disabled={recoveryLoading}
                                variant="outline"
                                className="flex items-center gap-2"
                            >
                                {recoveryLoading ? (
                                    <RefreshCw className="h-4 w-4 animate-spin" />
                                ) : (
                                    <Search className="h-4 w-4" />
                                )}
                                Ki·ªÉm tra 6h
                            </Button>
                            <Button
                                onClick={() => checkMissingTransactions(24)}
                                disabled={recoveryLoading}
                                variant="outline"
                                className="flex items-center gap-2"
                            >
                                {recoveryLoading ? (
                                    <RefreshCw className="h-4 w-4 animate-spin" />
                                ) : (
                                    <Search className="h-4 w-4" />
                                )}
                                Ki·ªÉm tra 24h
                            </Button>
                            <Button
                                onClick={() => runRecoveryJob(24)}
                                disabled={recoveryLoading}
                                variant="destructive"
                                className="flex items-center gap-2"
                            >
                                {recoveryLoading ? (
                                    <RefreshCw className="h-4 w-4 animate-spin" />
                                ) : (
                                    <Settings className="h-4 w-4" />
                                )}
                                Kh√¥i ph·ª•c 24h
                            </Button>
                        </div>

                        <Alert>
                            <AlertTriangle className="h-4 w-4" />
                            <AlertDescription>
                                Ch·ª©c nƒÉng ki·ªÉm tra s·∫Ω so s√°nh d·ªØ li·ªáu v·ªõi PayOS ƒë·ªÉ ph√°t hi·ªán giao d·ªãch b·ªã s√≥t.
                                Kh√¥i ph·ª•c s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t c√°c giao d·ªãch b·ªã thi·∫øu.
                            </AlertDescription>
                        </Alert>
                    </CardContent>
                </Card>
            </div>



            {/* Last Result */}
            {lastResult && (
                <Card className={lastResult.success ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"}>
                    <CardHeader>
                        <CardTitle className={`flex items-center gap-2 ${lastResult.success ? 'text-green-800' : 'text-red-800'}`}>
                            {lastResult.success ? (
                                <>
                                    <CheckCircle className="h-5 w-5" />
                                    K·∫øt qu·∫£ l·∫ßn ch·∫°y cu·ªëi
                                </>
                            ) : (
                                <>
                                    <XCircle className="h-5 w-5" />
                                    L·ªói l·∫ßn ch·∫°y cu·ªëi
                                </>
                            )}
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        {lastResult.success && lastResult.data ? (
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <div className="text-center p-4 bg-white rounded-lg border">
                                    <div className="text-2xl font-bold text-blue-600">{lastResult.data.total}</div>
                                    <div className="text-sm text-muted-foreground">T·ªïng ki·ªÉm tra</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg border">
                                    <div className="text-2xl font-bold text-green-600">{lastResult.data.updated}</div>
                                    <div className="text-sm text-muted-foreground">ƒê√£ c·∫≠p nh·∫≠t</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg border">
                                    <div className="text-2xl font-bold text-purple-600">{lastResult.data.duration}ms</div>
                                    <div className="text-sm text-muted-foreground">Th·ªùi gian</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg border">
                                    <div className="text-2xl font-bold text-orange-600">
                                        {lastResult.data.total > 0
                                            ? `${((lastResult.data.updated / lastResult.data.total) * 100).toFixed(1)}%`
                                            : '0%'
                                        }
                                    </div>
                                    <div className="text-sm text-muted-foreground">T·ª∑ l·ªá th√†nh c√¥ng</div>
                                </div>
                            </div>
                        ) : (
                            <Alert variant="destructive">
                                <XCircle className="h-4 w-4" />
                                <AlertDescription>
                                    {lastResult.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}
                                </AlertDescription>
                            </Alert>
                        )}
                    </CardContent>
                </Card>
            )}

            {/* Instructions */}
            <Card className="bg-blue-50 border-blue-200">
                <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-blue-800">
                        <Info className="h-5 w-5" />
                        H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
                    </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4 text-blue-700">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="flex items-start gap-3">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <RefreshCw className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                                <h4 className="font-semibold">ƒê·ªìng b·ªô th·ªß c√¥ng</h4>
                                <p className="text-sm text-blue-600">Nh·∫•n "ƒê·ªìng b·ªô ngay" ƒë·ªÉ ki·ªÉm tra ngay l·∫≠p t·ª©c</p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <Clock className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                                <h4 className="font-semibold">ƒê·ªìng b·ªô t·ª± ƒë·ªông</h4>
                                <p className="text-sm text-blue-600">B·∫≠t ƒë·ªÉ t·ª± ƒë·ªông ch·∫°y m·ªói 1 ph√∫t</p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <Search className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                                <h4 className="font-semibold">Ki·ªÉm tra giao d·ªãch</h4>
                                <p className="text-sm text-blue-600">T√¨m v√† kh√¥i ph·ª•c giao d·ªãch b·ªã s√≥t</p>
                            </div>
                        </div>
                    </div>

                    <Alert className="bg-blue-100 border-blue-300">
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription className="text-blue-800">
                            <strong>L∆∞u √Ω:</strong> H·ªá th·ªëng ch·ªâ ki·ªÉm tra c√°c thanh to√°n c√≥ tr·∫°ng th√°i "pending" ho·∫∑c "processing"
                            v√† c√≥ m√£ ƒë∆°n h√†ng (order_code) h·ª£p l·ªá t·ª´ PayOS.
                        </AlertDescription>
                    </Alert>
                </CardContent>
            </Card>
        </div>
    );
}
