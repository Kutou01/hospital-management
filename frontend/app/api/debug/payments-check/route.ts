import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';

export async function GET(request: NextRequest) {
    try {
        const supabase = await createClient();

        // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ query params n·∫øu c√≥
        const { searchParams } = new URL(request.url);
        const patientId = searchParams.get('patientId');
        const orderCode = searchParams.get('orderCode');

        console.log('üîç [Payments Debug] Request params:', { patientId, orderCode });

        // X√°c th·ª±c ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ admin ho·∫∑c ch√≠nh ng∆∞·ªùi d√πng ƒë∆∞·ª£c xem
        const authHeader = request.headers.get('authorization');
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return NextResponse.json({
                success: false,
                error: 'Unauthorized'
            }, { status: 401 });
        }

        const { data: { user } } = await supabase.auth.getUser(authHeader.replace('Bearer ', ''));
        if (!user) {
            return NextResponse.json({
                success: false,
                error: 'Invalid token'
            }, { status: 401 });
        }

        const { data: profile } = await supabase
            .from('profiles')
            .select('role')
            .eq('id', user.id)
            .single();

        // Ch·ªâ cho ph√©p admin xem t·∫•t c·∫£
        const isAdmin = profile?.role === 'admin';

        // 1. L·∫•y th√¥ng tin t·∫•t c·∫£ c√°c thanh to√°n g·∫ßn nh·∫•t
        let paymentsQuery = supabase.from('payments').select('*');

        // N·∫øu kh√¥ng ph·∫£i admin v√† c√≥ patientId, ch·ªâ l·∫•y thanh to√°n c·ªßa b·ªánh nh√¢n ƒë√≥
        if (!isAdmin && patientId) {
            paymentsQuery = paymentsQuery.eq('patient_id', patientId);
        }

        // N·∫øu c√≥ orderCode, l·ªçc theo orderCode
        if (orderCode) {
            paymentsQuery = paymentsQuery.eq('order_code', orderCode);
        }

        // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn v√† gi·ªõi h·∫°n 30 thanh to√°n
        paymentsQuery = paymentsQuery.order('created_at', { ascending: false }).limit(30);

        const { data: payments, error: paymentsError } = await paymentsQuery;

        if (paymentsError) {
            console.error('‚ùå [Payments Debug] Error fetching payments:', paymentsError);
            return NextResponse.json({
                success: false,
                error: paymentsError.message
            }, { status: 500 });
        }

        // 2. N·∫øu l√† admin, l·∫•y th√™m thanh to√°n kh√¥ng c√≥ patient_id
        let paymentsWithoutPatientId = [];
        if (isAdmin) {
            const { data: nullPatientPayments } = await supabase
                .from('payments')
                .select('*')
                .is('patient_id', null)
                .order('created_at', { ascending: false })
                .limit(20);

            paymentsWithoutPatientId = nullPatientPayments || [];
        }

        // 3. L·∫•y th√¥ng tin h·ªì s∆° b·ªánh nh√¢n
        let patientInfo = null;
        if (patientId) {
            const { data: patient } = await supabase
                .from('patients')
                .select(`
                    patient_id,
                    full_name,
                    profile:profiles!patients_profile_id_fkey (
                        id,
                        email
                    )
                `)
                .eq('patient_id', patientId)
                .single();

            patientInfo = patient;
        }

        // 4. T√¨m t·∫•t c·∫£ c√°c h·ªì s∆° b·ªánh nh√¢n li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const { data: userPatients } = await supabase
            .from('patients')
            .select(`
                patient_id,
                full_name,
                profile:profiles!patients_profile_id_fkey (
                    id,
                    email
                )
            `)
            .eq('profile_id', user.id);

        // 5. L·∫•y th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const { data: currentUserProfile } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', user.id)
            .single();

        // 6. L·∫•y t·∫•t c·∫£ c√°c thanh to√°n li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const relatedPayments = [];
        if (userPatients && userPatients.length > 0) {
            const patientIds = userPatients.map(p => p.patient_id);

            const { data: userRelatedPayments } = await supabase
                .from('payments')
                .select('*')
                .in('patient_id', patientIds)
                .order('created_at', { ascending: false });

            if (userRelatedPayments) {
                relatedPayments.push(...userRelatedPayments);
            }
        }

        // T√¨m c√°c thanh to√°n c√≥ th·ªÉ li√™n quan ƒë·∫øn email ng∆∞·ªùi d√πng
        if (currentUserProfile?.email) {
            const { data: emailRelatedPayments } = await supabase
                .from('payments')
                .select('*')
                .ilike('description', `%${currentUserProfile.email}%`)
                .order('created_at', { ascending: false });

            if (emailRelatedPayments) {
                relatedPayments.push(...emailRelatedPayments);
            }
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return NextResponse.json({
            success: true,
            data: {
                userInfo: {
                    id: user.id,
                    email: user.email,
                    isAdmin
                },
                patients: userPatients || [],
                currentUserProfile,
                payments: payments || [],
                paymentsWithoutPatientId,
                relatedPayments,
                patientInfo
            }
        });

    } catch (error: any) {
        console.error('‚ùå [Payments Debug] Error:', error);
        return NextResponse.json({
            success: false,
            error: error.message || 'Internal server error'
        }, { status: 500 });
    }
} 