import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import crypto from 'crypto';

// Auto-sync job ch·∫°y m·ªói 30 gi√¢y ƒë·ªÉ ƒë·ªìng b·ªô payments t·ª´ PayOS
export async function POST(request: NextRequest) {
    try {
        console.log('üîÑ [Auto Sync] Starting automatic payment synchronization...');
        const startTime = Date.now();

        const supabase = await createClient();

        // 1. L·∫•y danh s√°ch payments pending trong 48h qua (m·ªü r·ªông th·ªùi gian t√¨m ki·∫øm)
        const twoDaysAgo = new Date(Date.now() - 48 * 60 * 60 * 1000);
        const { data: pendingPayments, error: fetchError } = await supabase
            .from('payments')
            .select('*')
            .in('status', ['pending', 'processing'])
            .gte('created_at', twoDaysAgo.toISOString())
            .order('created_at', { ascending: false })
            .limit(25); // Gi·ªõi h·∫°n 25 payments m·ªói l·∫ßn ƒë·ªÉ tr√°nh timeout

        if (fetchError) {
            console.error('‚ùå [Auto Sync] Error fetching pending payments:', fetchError);
            return NextResponse.json({
                success: false,
                error: 'Failed to fetch pending payments'
            }, { status: 500 });
        }

        // Kh·ªüi t·∫°o k·∫øt qu·∫£
        let updatedCount = 0;
        const results = [];

        // 2. Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c thanh to√°n ƒëang pending
        if (pendingPayments && pendingPayments.length > 0) {
            console.log(`üìã [Auto Sync] Found ${pendingPayments.length} pending payments to check`);

            // Ki·ªÉm tra t·ª´ng payment v·ªõi PayOS API
            for (const payment of pendingPayments) {
                try {
                    console.log(`üîç [Auto Sync] Checking payment ${payment.order_code}...`);

                    // G·ªçi PayOS API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
                    const payosStatus = await checkPayOSStatus(payment.order_code);

                    if (payosStatus && payosStatus.status === 'PAID') {
                        // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
                        const updateData: any = {
                            status: 'completed',
                            paid_at: new Date().toISOString(),
                            updated_at: new Date().toISOString(),
                            transaction_id: payosStatus.transactions?.[0]?.reference || `AUTO_SYNC_${payment.order_code}`
                        };

                        // Ki·ªÉm tra n·∫øu thi·∫øu patient_id nh∆∞ng c√≥ record_id
                        if (!payment.patient_id && payment.record_id) {
                            console.log(`üîç [Auto Sync] Payment missing patient_id, checking record_id: ${payment.record_id}`);

                            // L·∫•y patient_id t·ª´ b·∫£ng medical_records
                            const { data: recordData, error: recordError } = await supabase
                                .from('medical_records')
                                .select('patient_id, doctor_id')
                                .eq('record_id', payment.record_id)
                                .single();

                            if (!recordError && recordData && recordData.patient_id) {
                                updateData.patient_id = recordData.patient_id;
                                console.log(`‚úÖ [Auto Sync] Found patient_id ${recordData.patient_id} from record ${payment.record_id}`);

                                // Th√™m doctor_id n·∫øu c√≥
                                if (recordData.doctor_id) {
                                    updateData.doctor_id = recordData.doctor_id;
                                }
                            } else {
                                console.log(`‚ö†Ô∏è [Auto Sync] Could not find patient_id from record: ${recordError?.message || 'No data'}`);
                            }
                        }

                        // Ki·ªÉm tra trong b·∫£ng appointments n·∫øu v·∫´n ch∆∞a c√≥ patient_id
                        if (!updateData.patient_id && !payment.patient_id) {
                            try {
                                // T√¨m ki·∫øm trong b·∫£ng appointments d·ª±a v√†o payment_id
                                const { data: appointmentData } = await supabase
                                    .from('appointments')
                                    .select('patient_id, doctor_id')
                                    .eq('payment_id', payment.id)
                                    .single();

                                if (appointmentData && appointmentData.patient_id) {
                                    updateData.patient_id = appointmentData.patient_id;
                                    console.log(`‚úÖ [Auto Sync] Found patient_id ${appointmentData.patient_id} from appointment`);

                                    // Th√™m doctor_id n·∫øu c√≥
                                    if (appointmentData.doctor_id) {
                                        updateData.doctor_id = appointmentData.doctor_id;
                                    }
                                }
                            } catch (error) {
                                console.log(`‚ö†Ô∏è [Auto Sync] Error checking appointments:`, error);
                            }
                        }

                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh completed
                        const { error: updateError } = await supabase
                            .from('payments')
                            .update(updateData)
                            .eq('id', payment.id);

                        if (updateError) {
                            console.error(`‚ùå [Auto Sync] Error updating payment ${payment.order_code}:`, updateError);
                            results.push({
                                order_code: payment.order_code,
                                status: 'error',
                                message: updateError.message
                            });
                        } else {
                            console.log(`‚úÖ [Auto Sync] Updated payment ${payment.order_code} to completed${updateData.patient_id ? ` with patient_id: ${updateData.patient_id}` : ''}`);
                            updatedCount++;
                            results.push({
                                order_code: payment.order_code,
                                status: 'updated',
                                message: 'Payment status updated to completed'
                            });
                        }
                    } else {
                        console.log(`‚ÑπÔ∏è [Auto Sync] Payment ${payment.order_code} still pending on PayOS`);
                        results.push({
                            order_code: payment.order_code,
                            status: 'unchanged',
                            message: 'Still pending on PayOS'
                        });
                    }

                    // Delay 300ms gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
                    await new Promise(resolve => setTimeout(resolve, 300));

                } catch (error) {
                    console.error(`‚ùå [Auto Sync] Error checking payment ${payment.order_code}:`, error);
                    results.push({
                        order_code: payment.order_code,
                        status: 'error',
                        message: error instanceof Error ? error.message : 'Unknown error'
                    });
                }
            }
        } else {
            console.log('‚úÖ [Auto Sync] No pending payments to sync');
        }

        // 3. CH·ª®C NƒÇNG M·ªöI: T√¨m c√°c thanh to√°n m·ªõi t·ª´ PayOS (ch·∫°y m·ªói 10 l·∫ßn)
        // S·ª≠ d·ª•ng PayOS API ƒë·ªÉ l·∫•y danh s√°ch thanh to√°n g·∫ßn ƒë√¢y v√† th√™m v√†o database n·∫øu ch∆∞a c√≥
        try {
            // Ch·ªâ ch·∫°y ch·ª©c nƒÉng n√†y m·ªói 10 l·∫ßn ƒë·ªÉ tr√°nh qu√° t·∫£i
            const shouldFetchNewPayments = Math.random() < 0.3; // 30% c∆° h·ªôi ch·∫°y

            if (shouldFetchNewPayments) {
                console.log('üîç [Auto Sync] Checking for new payments from PayOS...');

                // L·∫•y danh s√°ch thanh to√°n m·ªõi nh·∫•t t·ª´ PayOS
                const recentPayments = await getRecentPayOSPayments();

                if (recentPayments && recentPayments.length > 0) {
                    console.log(`üìã [Auto Sync] Found ${recentPayments.length} recent payments from PayOS`);

                    let newPaymentsAdded = 0;

                    // Ki·ªÉm tra t·ª´ng payment v√† th√™m v√†o database n·∫øu ch∆∞a c√≥
                    for (const payosPayment of recentPayments) {
                        try {
                            const orderCode = payosPayment.orderCode.toString();

                            // Ki·ªÉm tra xem payment ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
                            const { data: existingPayment, error: checkError } = await supabase
                                .from('payments')
                                .select('id')
                                .eq('order_code', orderCode)
                                .maybeSingle();

                            if (checkError) {
                                console.error(`‚ùå [Auto Sync] Error checking payment ${orderCode}:`, checkError);
                                continue;
                            }

                            // N·∫øu payment ch∆∞a t·ªìn t·∫°i, th√™m v√†o database
                            if (!existingPayment) {
                                // Tr√≠ch xu·∫•t th√¥ng tin t·ª´ description n·∫øu c√≥
                                const description = payosPayment.description || '';

                                let patient_id = null;
                                let record_id = null;

                                // Tr√≠ch xu·∫•t patient_id t·ª´ description
                                const patientMatch = description.match(/patient_id:\s*([a-zA-Z0-9-]+)/);
                                if (patientMatch && patientMatch[1]) {
                                    patient_id = patientMatch[1];
                                }

                                // Tr√≠ch xu·∫•t record_id t·ª´ description
                                const recordMatch = description.match(/record_id:\s*([a-zA-Z0-9-]+)/);
                                if (recordMatch && recordMatch[1]) {
                                    record_id = recordMatch[1];
                                }

                                // Chu·∫©n b·ªã d·ªØ li·ªáu cho payment m·ªõi
                                const newPayment = {
                                    order_code: orderCode,
                                    amount: payosPayment.amount,
                                    status: payosPayment.status === 'PAID' ? 'completed' :
                                        payosPayment.status === 'CANCELLED' ? 'failed' : 'pending',
                                    description: description,
                                    payment_method: 'payos',
                                    patient_id: patient_id,
                                    record_id: record_id,
                                    created_at: payosPayment.createdAt || new Date().toISOString(),
                                    updated_at: new Date().toISOString(),
                                    paid_at: payosPayment.status === 'PAID' ?
                                        (payosPayment.transactions?.[0]?.transactionDateTime || new Date().toISOString()) : null,
                                    transaction_id: payosPayment.transactions?.[0]?.reference || null,
                                    payment_type: description.toLowerCase().includes('appointment') ? 'appointment' :
                                        description.toLowerCase().includes('record') ? 'medical_record' : 'other'
                                };

                                // Th√™m payment m·ªõi v√†o database
                                const { data: newPaymentData, error: insertError } = await supabase
                                    .from('payments')
                                    .insert(newPayment)
                                    .select()
                                    .single();

                                if (insertError) {
                                    console.error(`‚ùå [Auto Sync] Error adding new payment ${orderCode}:`, insertError);
                                } else {
                                    console.log(`‚úÖ [Auto Sync] Added new payment ${orderCode} to database`);
                                    newPaymentsAdded++;

                                    // Th√™m v√†o k·∫øt qu·∫£
                                    results.push({
                                        order_code: orderCode,
                                        status: 'added',
                                        message: 'New payment added from PayOS'
                                    });
                                }
                            }

                            // Delay nh·ªè gi·ªØa c√°c request
                            await new Promise(resolve => setTimeout(resolve, 100));

                        } catch (error) {
                            console.error('‚ùå [Auto Sync] Error processing PayOS payment:', error);
                        }
                    }

                    if (newPaymentsAdded > 0) {
                        console.log(`‚úÖ [Auto Sync] Added ${newPaymentsAdded} new payments from PayOS`);
                        updatedCount += newPaymentsAdded;
                    } else {
                        console.log('‚ÑπÔ∏è [Auto Sync] No new payments to add from PayOS');
                    }
                } else {
                    console.log('‚ÑπÔ∏è [Auto Sync] No recent payments found from PayOS');
                }
            }
        } catch (error) {
            console.error('‚ùå [Auto Sync] Error fetching new payments from PayOS:', error);
        }

        const duration = Date.now() - startTime;
        console.log(`üìä [Auto Sync] Completed: ${updatedCount} payments updated or added in ${duration}ms`);

        return NextResponse.json({
            success: true,
            message: `Auto sync completed: ${updatedCount} payments updated or added`,
            data: {
                checked: pendingPayments?.length || 0,
                updated: updatedCount,
                results: results,
                duration: duration
            }
        });

    } catch (error) {
        console.error('‚ùå [Auto Sync] Error in auto sync job:', error);
        return NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error'
        }, { status: 500 });
    }
}

// H√†m ki·ªÉm tra tr·∫°ng th√°i PayOS
async function checkPayOSStatus(orderCode: string) {
    try {
        const PAYOS_CLIENT_ID = process.env.PAYOS_CLIENT_ID!;
        const PAYOS_API_KEY = process.env.PAYOS_API_KEY!;
        const PAYOS_CHECKSUM_KEY = process.env.PAYOS_CHECKSUM_KEY!;

        // T·∫°o signature cho PayOS API
        const currentTime = Math.floor(Date.now() / 1000);
        const signaturePayload = `GET&https://api-merchant.payos.vn/v2/payment-requests/${orderCode}&${currentTime}`;

        const signature = crypto
            .createHmac('sha256', PAYOS_CHECKSUM_KEY)
            .update(signaturePayload)
            .digest('hex');

        const response = await fetch(`https://api-merchant.payos.vn/v2/payment-requests/${orderCode}`, {
            method: 'GET',
            headers: {
                'x-client-id': PAYOS_CLIENT_ID,
                'x-api-key': PAYOS_API_KEY,
                'x-partner-code': PAYOS_CLIENT_ID,
                'x-timestamp': currentTime.toString(),
                'x-signature': signature,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.log(`‚ö†Ô∏è PayOS API error for ${orderCode}: ${response.status} ${response.statusText}`);
            return null;
        }

        const data = await response.json();
        return data.data;

    } catch (error) {
        console.error(`‚ùå Error checking PayOS status for ${orderCode}:`, error);
        return null;
    }
}

// H√†m l·∫•y danh s√°ch thanh to√°n g·∫ßn ƒë√¢y t·ª´ PayOS
async function getRecentPayOSPayments() {
    try {
        const PAYOS_CLIENT_ID = process.env.PAYOS_CLIENT_ID!;
        const PAYOS_API_KEY = process.env.PAYOS_API_KEY!;
        const PAYOS_CHECKSUM_KEY = process.env.PAYOS_CHECKSUM_KEY!;

        // T·∫°o timestamp v√† signature
        const currentTime = Math.floor(Date.now() / 1000);

        // L·∫•y danh s√°ch thanh to√°n trong 48h qua
        const twoDaysAgo = new Date();
        twoDaysAgo.setHours(twoDaysAgo.getHours() - 48);

        // Tham s·ªë ƒë·ªÉ l·ªçc thanh to√°n
        const queryParams = new URLSearchParams({
            pageSize: '20', // L·∫•y 20 thanh to√°n m·ªói l·∫ßn
            page: '1',      // Trang ƒë·∫ßu ti√™n
            fromDate: twoDaysAgo.toISOString(), // 48h tr∆∞·ªõc
            toDate: new Date().toISOString()    // Hi·ªán t·∫°i
        });

        const apiUrl = `https://api-merchant.payos.vn/v2/payment-requests?${queryParams.toString()}`;

        // T·∫°o signature cho request
        const signaturePayload = `GET&${apiUrl}&${currentTime}`;
        const signature = crypto
            .createHmac('sha256', PAYOS_CHECKSUM_KEY)
            .update(signaturePayload)
            .digest('hex');

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'x-client-id': PAYOS_CLIENT_ID,
                'x-api-key': PAYOS_API_KEY,
                'x-partner-code': PAYOS_CLIENT_ID,
                'x-timestamp': currentTime.toString(),
                'x-signature': signature,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error(`‚ùå PayOS payment list API error: ${response.status} ${response.statusText}`);
            return null;
        }

        const result = await response.json();

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (result.error !== 0 || !result.data || !result.data.items) {
            console.error('‚ùå Invalid PayOS payment list response:', result.message || 'Unknown error');
            return null;
        }

        // L·ªçc c√°c thanh to√°n c√≥ tr·∫°ng th√°i PAID ho·∫∑c PENDING
        return result.data.items.filter((payment: any) =>
            payment.status === 'PAID' || payment.status === 'PENDING'
        );

    } catch (error) {
        console.error('‚ùå Error fetching recent PayOS payments:', error);
        return null;
    }
}

// GET method ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i auto sync
export async function GET(request: NextRequest) {
    return NextResponse.json({
        success: true,
        message: 'Auto sync endpoint is ready',
        timestamp: new Date().toISOString(),
        info: 'This endpoint automatically syncs pending payments with PayOS every 30 seconds'
    });
}
