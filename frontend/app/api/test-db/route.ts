import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';

export async function GET(request: NextRequest) {
    try {
        console.log('üöÄ [Test DB] Checking database connection...');
        const supabase = await createClient();

        // L·∫•y th√¥ng tin phi√™n ƒëƒÉng nh·∫≠p hi·ªán t·∫°i
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();

        if (sessionError) {
            console.error('‚ùå [Test DB] Session error:', sessionError);
            return NextResponse.json({
                success: false,
                error: `Session error: ${sessionError.message}`
            }, { status: 401 });
        }

        // Th√¥ng tin ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
        let userInfo = null;
        let patientInfo = null;

        if (session) {
            // L·∫•y th√¥ng tin profile
            const { data: profile, error: profileError } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', session.user.id)
                .single();

            userInfo = profile;

            // N·∫øu l√† b·ªánh nh√¢n, l·∫•y th√¥ng tin b·ªánh nh√¢n
            if (profile && profile.role === 'patient') {
                const { data: patient, error: patientError } = await supabase
                    .from('patients')
                    .select('*')
                    .eq('profile_id', profile.id)
                    .single();

                patientInfo = patient;

                // N·∫øu t√¨m th·∫•y b·ªánh nh√¢n, ki·ªÉm tra thanh to√°n c·ªßa h·ªç
                if (patient) {
                    const { data: payments, error: paymentsError } = await supabase
                        .from('payments')
                        .select('*')
                        .eq('patient_id', patient.patient_id)
                        .order('created_at', { ascending: false });

                    if (paymentsError) {
                        console.error('‚ùå [Test DB] Error fetching patient payments:', paymentsError);
                    } else {
                        console.log(`‚úÖ [Test DB] Found ${payments?.length || 0} payments for patient ${patient.patient_id}`);

                        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi d·ªØ li·ªáu chi ti·∫øt
                        return NextResponse.json({
                            success: true,
                            data: {
                                session: {
                                    user_id: session.user.id,
                                    email: session.user.email
                                },
                                profile: userInfo,
                                patient: patientInfo,
                                payments: payments || [],
                                payment_count: payments?.length || 0
                            }
                        });
                    }
                }
            }
        }

        // Ki·ªÉm tra c√°c thanh to√°n g·∫ßn ƒë√¢y
        const { data: recentPayments, error: paymentsError } = await supabase
            .from('payments')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(20);

        if (paymentsError) {
            console.error('‚ùå [Test DB] Error fetching recent payments:', paymentsError);
        }

        // Ki·ªÉm tra b·∫£ng patients
        const { data: patients, error: patientsError } = await supabase
            .from('patients')
            .select('*')
            .limit(10);

        if (patientsError) {
            console.error('‚ùå [Test DB] Error fetching patients:', patientsError);
        }

        console.log('‚úÖ [Test DB] Database check completed');
        return NextResponse.json({
            success: true,
            message: 'Database connection successful',
            session: session ? {
                user_id: session.user.id,
                email: session.user.email
            } : null,
            user_info: userInfo,
            patient_info: patientInfo,
            recent_payments: recentPayments || [],
            recent_payments_count: recentPayments?.length || 0,
            patients: patients || [],
            patients_count: patients?.length || 0
        });

    } catch (error) {
        console.error('‚ùå [Test DB] Unexpected error:', error);
        return NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error'
        }, { status: 500 });
    }
}
