"use client"

import React, { useState } from 'react';
import { Bot, X, Send } from 'lucide-react';
import FriendlyChatMessage from '../chat/FriendlyChatMessage';

export default function FriendlyChatbotTest() {
  const [isOpen, setIsOpen] = useState(true);
  const [inputValue, setInputValue] = useState('');

  // Test messages v·ªõi phong c√°ch th√¢n thi·ªán m·ªõi
  const [messages, setMessages] = useState([
    {
      id: '1',
      type: 'bot' as const,
      content: `Xin ch√†o! T√¥i l√† HealthBot, tr·ª£ l√Ω AI s·∫Ω gi√∫p b·∫°n t∆∞ v·∫•n s·ª©c kh·ªèe ban ƒë·∫ßu.

T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:
‚Ä¢ T∆∞ v·∫•n tri·ªáu ch·ª©ng
‚Ä¢ Khuy·∫øn ngh·ªã chuy√™n khoa
‚Ä¢ H∆∞·ªõng d·∫´n chu·∫©n b·ªã kh√°m
‚Ä¢ Nh·∫≠n di·ªán c·∫•p c·ª©u

B·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ g√¨ v·ªÅ s·ª©c kh·ªèe? H√£y m√¥ t·∫£ tri·ªáu ch·ª©ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n!`,
      severity: 'normal' as const,
      timestamp: new Date(),
      isTyping: false
    },
    {
      id: '2',
      type: 'user' as const,
      content: 't√¥i b·ªã ƒëau ƒë·∫ßu',
      timestamp: new Date(),
      isTyping: false
    },
    {
      id: '3',
      type: 'bot' as const,
      content: `T√¥i hi·ªÉu b·∫°n ƒëang c·∫£m th·∫•y kh√≥ ch·ªãu v√¨ c∆°n ƒëau ƒë·∫ßu n√†y üíô

ü§ó **Hi·ªÉu v·ªÅ t√¨nh tr·∫°ng n√†y:**
ƒêau ƒë·∫ßu th∆∞·ªùng do cƒÉng th·∫≥ng, thi·∫øu ng·ªß ho·∫∑c m·ªát m·ªèi g√¢y ra.

üí° **Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m:**
üõå Ngh·ªâ ng∆°i trong ph√≤ng t·ªëi, y√™n tƒ©nh
üíß U·ªëng nhi·ªÅu n∆∞·ªõc v√† massage nh·∫π th√°i d∆∞∆°ng  
üåø Ch∆∞·ªùm ·∫•m ho·∫∑c l·∫°nh t√πy c·∫£m gi√°c tho·∫£i m√°i

üè• N·∫øu ƒëau d·ªØ d·ªôi, k√®m s·ªët cao ho·∫∑c bu·ªìn n√¥n, b·∫°n n√™n ƒë·∫øn g·∫∑p b√°c sƒ© Th·∫ßn kinh ngay nh√©!

‚ùì C∆°n ƒëau ƒë·∫ßu c·ªßa b·∫°n c√≥ k√®m theo tri·ªáu ch·ª©ng n√†o kh√°c kh√¥ng?`,
      severity: 'normal' as const,
      timestamp: new Date(),
      isTyping: false
    },
    {
      id: '4',
      type: 'user' as const,
      content: 'ƒëau ng·ª±c v√† kh√≥ th·ªü',
      timestamp: new Date(),
      isTyping: false
    },
    {
      id: '5',
      type: 'bot' as const,
      content: `‚ö†Ô∏è T√¥i r·∫•t lo l·∫Øng v·ªÅ t√¨nh tr·∫°ng c·ªßa b·∫°n!

üö® H√£y g·ªçi 115 NGAY ho·∫∑c ƒë·∫øn c·∫•p c·ª©u g·∫ßn nh·∫•t!

ü§ó **Hi·ªÉu v·ªÅ t√¨nh tr·∫°ng n√†y:**
ƒêau ng·ª±c k√®m kh√≥ th·ªü c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa t√¨nh hu·ªëng nghi√™m tr·ªçng c·∫ßn ƒë∆∞·ª£c ch√∫ √Ω ngay l·∫≠p t·ª©c.

üí° **Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m ngay:**
ü™ë Ng·ªìi th·∫≥ng, th·ªü ch·∫≠m v√† s√¢u
üíä N·∫øu c√≥ thu·ªëc tim, h√£y u·ªëng theo ch·ªâ ƒë·ªãnh
üìû G·ªçi ng∆∞·ªùi th√¢n ƒë·∫øn h·ªó tr·ª£

üíô ƒê·ª´ng lo l·∫Øng, b√°c sƒ© s·∫Ω chƒÉm s√≥c b·∫°n t·ªët nh·∫•t!`,
      severity: 'emergency' as const,
      timestamp: new Date(),
      isTyping: false
    }
  ]);

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user' as const,
      content: inputValue,
      timestamp: new Date(),
      isTyping: false
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');

    // Simulate bot typing
    const typingMessage = {
      id: (Date.now() + 1).toString(),
      type: 'bot' as const,
      content: '',
      severity: 'normal' as const,
      timestamp: new Date(),
      isTyping: true
    };

    setMessages(prev => [...prev, typingMessage]);

    // Simulate response after 2 seconds
    setTimeout(() => {
      const botResponse = {
        id: (Date.now() + 2).toString(),
        type: 'bot' as const,
        content: `T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ "${inputValue}" üíô

ü§ó **C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª:**
T√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ.

üí° **G·ª£i √Ω:**
üíß H√£y m√¥ t·∫£ th√™m chi ti·∫øt v·ªÅ tri·ªáu ch·ª©ng
ü©∫ Cho t√¥i bi·∫øt khi n√†o b·∫°n b·∫Øt ƒë·∫ßu c·∫£m th·∫•y nh∆∞ v·∫≠y

üè• N·∫øu b·∫°n c·∫£m th·∫•y lo l·∫Øng, ƒë·ª´ng ng·∫ßn ng·∫°i ƒë·∫øn g·∫∑p b√°c sƒ© nh√©!

‚ùì B·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m v·ªÅ c·∫£m gi√°c n√†y kh√¥ng?`,
        severity: 'normal' as const,
        timestamp: new Date(),
        isTyping: false
      };

      setMessages(prev => prev.slice(0, -1).concat(botResponse));
    }, 2000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <button
          onClick={() => setIsOpen(true)}
          className="bg-cyan-500 text-white p-3 rounded-full shadow-lg hover:bg-cyan-600 transition-colors"
        >
          <Bot className="w-6 h-6" />
        </button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div className="chat-widget w-96 h-[600px] bg-white rounded-lg shadow-2xl border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="p-4 text-white flex items-center justify-between bg-cyan-500">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center">
              <Bot className="w-5 h-5 text-cyan-500" />
            </div>
            <div>
              <h3 className="font-semibold text-sm">HealthBot</h3>
              <p className="text-xs opacity-90">T∆∞ v·∫•n s·ª©c kh·ªèe AI</p>
            </div>
          </div>
          <button
            onClick={() => setIsOpen(false)}
            className="text-white hover:bg-white hover:bg-opacity-20 rounded p-1"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Messages */}
        <div className="flex-1 bg-gray-50 overflow-y-auto h-[480px]">
          <div className="p-4">
            {messages.map((message) => (
              <FriendlyChatMessage
                key={message.id}
                message={message}
                primaryColor="#06b6d4"
              />
            ))}
          </div>
        </div>

        {/* Input */}
        <div className="p-4 border-t border-gray-200 bg-white">
          <div className="flex space-x-2">
            <input 
              type="text" 
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Chia s·∫ª c·∫£m gi√°c c·ªßa b·∫°n..."
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent text-sm"
            />
            <button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim()}
              className="bg-cyan-500 text-white px-4 py-2 rounded-lg hover:bg-cyan-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
