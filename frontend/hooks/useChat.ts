import { useState, useCallback } from 'react';

export interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
  severity?: 'low' | 'medium' | 'high' | 'emergency';
}

export interface ChatState {
  messages: Message[];
  isLoading: boolean;
  isConnected: boolean;
}

export interface UseChatReturn {
  messages: Message[];
  isLoading: boolean;
  isConnected: boolean;
  isFullscreen: boolean;
  sendMessage: (content: string) => Promise<void>;
  clearChat: () => void;
  addMessage: (message: Omit<Message, 'id' | 'timestamp'>) => void;
  toggleFullscreen: () => void;
}

const INITIAL_MESSAGE: Message = {
  id: 'welcome',
  type: 'bot',
  content: `Xin ch√†o! T√¥i l√† HealthBot, tr·ª£ l√Ω AI s·∫Ω gi√∫p b·∫°n t∆∞ v·∫•n s·ª©c kh·ªèe ban ƒë·∫ßu.\n\nT√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n- T∆∞ v·∫•n tri·ªáu ch·ª©ng\n- Khuy·∫øn ngh·ªã chuy√™n khoa\n- H∆∞·ªõng d·∫´n chu·∫©n b·ªã kh√°m\n- Nh·∫≠n di·ªán c·∫•p c·ª©u\n\nB·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ g√¨ v·ªÅ s·ª©c kh·ªèe? H√£y m√¥ t·∫£ tri·ªáu ch·ª©ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n!`,
  timestamp: new Date(),
  severity: 'low'
};

export function useChat(): UseChatReturn {
  const [chatState, setChatState] = useState<ChatState>({
    messages: [INITIAL_MESSAGE],
    isLoading: false,
    isConnected: true
  });

  const [isFullscreen, setIsFullscreen] = useState(false);

  const addMessage = useCallback((message: Omit<Message, 'id' | 'timestamp'>) => {
    const newMessage: Message = {
      ...message,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      timestamp: new Date()
    };

    setChatState(prev => ({
      ...prev,
      messages: [...prev.messages, newMessage]
    }));
  }, []);

  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || chatState.isLoading) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setChatState(prev => ({
      ...prev,
      messages: [...prev.messages, userMessage],
      isLoading: true
    }));

    // Add typing indicator
    const typingMessage: Message = {
      id: 'typing-' + Date.now(),
      type: 'bot',
      content: 'ƒêang ph√¢n t√≠ch tri·ªáu ch·ª©ng v√† t√¨m ki·∫øm th√¥ng tin...',
      timestamp: new Date(),
      isTyping: true
    };

    setChatState(prev => ({
      ...prev,
      messages: [...prev.messages, typingMessage]
    }));

    try {
      console.log('Sending message to chatbot:', content);

      const CHATBOT_API_URL = process.env.NEXT_PUBLIC_CHATBOT_API_URL || 'http://localhost:3020';
      const response = await fetch(`${CHATBOT_API_URL}/api/health/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: content,
          conversation_history: chatState.messages.slice(-6).map(msg =>
            `${msg.type === 'user' ? 'User' : 'AI'}: ${msg.content}`
          )
        }),
      });

      console.log('Response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Chatbot response:', data);

      // Remove typing indicator
      setChatState(prev => ({
        ...prev,
        messages: prev.messages.filter(msg => !msg.isTyping),
        isLoading: false
      }));

      if (data.success && data.data) {
        // Determine severity based on response - CH·ªà emergency khi th·ª±c s·ª± nghi√™m tr·ªçng
        let severity: Message['severity'] = 'low';
        const responseText = (data.data.ai_response || data.data.response || '').toLowerCase();

        // CH·ªà ƒë√°nh d·∫•u emergency khi c√≥ c·∫£nh b√°o th·ª±c s·ª±
        if (responseText.includes('üö®') || responseText.includes('g·ªçi 115') || responseText.includes('ƒë·∫øn c·∫•p c·ª©u ngay')) {
          severity = 'emergency';
        } else if (responseText.includes('n√™n kh√°m') || responseText.includes('c·∫ßn theo d√µi') || responseText.includes('kh√°m ngay')) {
          severity = 'high';
        } else if (responseText.includes('c√≥ th·ªÉ') || responseText.includes('n√™n ch√∫ √Ω')) {
          severity = 'medium';
        }

        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'bot',
          content: data.data.ai_response || data.data.response || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.',
          timestamp: new Date(),
          severity
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, botMessage]
        }));

        // CH·ªà hi·ªÉn th·ªã c·∫£nh b√°o c·∫•p c·ª©u khi th·ª±c s·ª± nghi√™m tr·ªçng
        if (severity === 'emergency' && (data.data.ai_response || data.data.response || '').includes('üö®')) {
          const emergencyMessage: Message = {
            id: (Date.now() + 2).toString(),
            type: 'bot',
            content: 'üö® **KHUY·∫æN C√ÅO KH·∫®N C·∫§P**: Vui l√≤ng ƒë·∫øn c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t ho·∫∑c g·ªçi 115 ngay l·∫≠p t·ª©c!',
            timestamp: new Date(),
            severity: 'emergency'
          };

          setTimeout(() => {
            setChatState(prev => ({
              ...prev,
              messages: [...prev.messages, emergencyMessage]
            }));
          }, 1000);
        }

      } else {
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'bot',
          content: '‚ùå Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi ph√¢n t√≠ch tri·ªáu ch·ª©ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªánh vi·ªán qua hotline: **1900-xxxx**',
          timestamp: new Date(),
          severity: 'medium'
        };

        setChatState(prev => ({
          ...prev,
          messages: [...prev.messages, errorMessage]
        }));
      }

    } catch (error) {
      console.error('Chat error:', error);
      
      // Remove typing indicator
      setChatState(prev => ({
        ...prev,
        messages: prev.messages.filter(msg => !msg.isTyping),
        isLoading: false,
        isConnected: false
      }));

      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: 'üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi h·ªá th·ªëng t∆∞ v·∫•n. Vui l√≤ng:\n\n‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t\n‚Ä¢ Li√™n h·ªá hotline: **1900-xxxx** n·∫øu c·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p',
        timestamp: new Date(),
        severity: 'medium'
      };

      setChatState(prev => ({
        ...prev,
        messages: [...prev.messages, errorMessage]
      }));

      // Try to reconnect after 5 seconds
      setTimeout(() => {
        setChatState(prev => ({
          ...prev,
          isConnected: true
        }));
      }, 5000);
    }
  }, [chatState.isLoading]);

  const clearChat = useCallback(() => {
    setChatState({
      messages: [INITIAL_MESSAGE],
      isLoading: false,
      isConnected: true
    });
  }, []);

  const toggleFullscreen = useCallback(() => {
    setIsFullscreen(prev => !prev);
  }, []);

  return {
    messages: chatState.messages,
    isLoading: chatState.isLoading,
    isConnected: chatState.isConnected,
    isFullscreen,
    sendMessage,
    clearChat,
    addMessage,
    toggleFullscreen
  };
}
