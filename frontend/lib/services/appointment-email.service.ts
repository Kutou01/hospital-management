import emailjs from '@emailjs/browser';

// C·∫•u h√¨nh EmailJS t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const EMAILJS_SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || '';
const EMAILJS_TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || '';
const EMAILJS_PUBLIC_KEY = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || '';

// Interface cho d·ªØ li·ªáu email appointment
export interface AppointmentEmailData {
    patientName: string;
    patientEmail: string;
    patientPhone: string;
    appointmentId: string;
    doctorName: string;
    specialty: string;
    appointmentDate: string;
    appointmentTime: string;
    symptoms: string;
    hospitalName?: string;
    hospitalAddress?: string;
    hospitalPhone?: string;
}

// Interface cho response
export interface EmailResponse {
    success: boolean;
    message: string;
    error?: string;
}

/**
 * Service ƒë·ªÉ g·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m
 */
export class AppointmentEmailService {
    
    /**
     * Kh·ªüi t·∫°o EmailJS v·ªõi public key
     */
    static init() {
        if (EMAILJS_PUBLIC_KEY) {
            emailjs.init(EMAILJS_PUBLIC_KEY);
            console.log('‚úÖ EmailJS initialized successfully for appointments');
        } else {
            console.warn('‚ö†Ô∏è EmailJS public key not found in environment variables');
        }
    }

    /**
     * Ki·ªÉm tra c·∫•u h√¨nh EmailJS
     */
    static checkConfiguration(): boolean {
        return !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_PUBLIC_KEY);
    }

    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m
     */
    static async sendAppointmentConfirmationEmail(data: AppointmentEmailData): Promise<EmailResponse> {
        try {
            // Ki·ªÉm tra m√¥i tr∆∞·ªùng - EmailJS ch·ªâ ho·∫°t ƒë·ªông trong browser
            if (typeof window === 'undefined') {
                console.warn('‚ö†Ô∏è EmailJS ch·ªâ ho·∫°t ƒë·ªông trong browser, kh√¥ng th·ªÉ g·ª≠i t·ª´ server-side');
                
                // Fallback: G·ª≠i email t·ª´ server-side b·∫±ng c√°ch g·ªçi API route
                try {
                    const response = await fetch('/api/email/send-appointment-confirmation', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        return {
                            success: true,
                            message: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ª´ server'
                        };
                    }
                } catch (serverError) {
                    console.error('Server-side email fallback failed:', serverError);
                }

                return {
                    success: false,
                    message: 'Kh√¥ng th·ªÉ g·ª≠i email',
                    error: 'EMAIL_SEND_FAILED'
                };
            }

            // Ki·ªÉm tra c·∫•u h√¨nh
            if (!this.checkConfiguration()) {
                console.error('‚ùå EmailJS configuration missing');
                return {
                    success: false,
                    message: 'C·∫•u h√¨nh email ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p',
                    error: 'MISSING_CONFIG'
                };
            }

            // Kh·ªüi t·∫°o EmailJS n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
            emailjs.init(EMAILJS_PUBLIC_KEY);

            // Chu·∫©n b·ªã d·ªØ li·ªáu template - PH·∫¢I MATCH v·ªõi EmailJS template variables
            const templateParams = {
                // Th√¥ng tin ng∆∞·ªùi nh·∫≠n - QUAN TR·ªåNG cho EmailJS
                to_email: data.patientEmail,
                to_name: data.patientName,

                // Th√¥ng tin b·ªánh nh√¢n
                patient_name: data.patientName,
                patient_phone: data.patientPhone,

                // Th√¥ng tin l·ªãch kh√°m - MATCH v·ªõi template
                order_code: data.appointmentId, // M√£ ƒë∆°n h√†ng
                appointment_id: data.appointmentId,
                doctor_name: data.doctorName,
                specialty: data.specialty,
                appointment_date: new Date(data.appointmentDate).toLocaleDateString('vi-VN', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                }),
                appointment_time: data.appointmentTime,
                symptoms: data.symptoms,

                // Th√¥ng tin thanh to√°n
                payment_date: new Date().toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                record_id: data.appointmentId, // M√£ h·ªì s∆°
                amount: '200,000', // S·ªë ti·ªÅn formatted

                // Th√¥ng tin b·ªánh vi·ªán
                hospital_name: data.hospitalName || 'B·ªánh vi·ªán ƒêa khoa',
                hospital_address: data.hospitalAddress || '123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM',
                hospital_phone: data.hospitalPhone || '(028) 1234 5678',

                // Th√¥ng tin g·ª≠i email
                from_name: data.hospitalName || 'B·ªánh vi·ªán ƒêa khoa',
                reply_to: 'support@hospital.com',

                // Th·ªùi gian g·ª≠i
                sent_time: new Date().toLocaleString('vi-VN'),

                // L·ªùi nh·∫Øn
                message: `X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m th√†nh c√¥ng cho ${data.patientName}`,

                // L∆∞u √Ω quan tr·ªçng
                important_notes: `
‚Ä¢ Vui l√≤ng ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 15 ph√∫t
‚Ä¢ Mang theo CMND/CCCD v√† th·∫ª BHYT (n·∫øu c√≥)
‚Ä¢ Li√™n h·ªá hotline n·∫øu c·∫ßn thay ƒë·ªïi l·ªãch h·∫πn
‚Ä¢ C√≥ th·ªÉ h·ªßy l·ªãch tr∆∞·ªõc 24h m√† kh√¥ng m·∫•t ph√≠
                `.trim()
            };

            console.log('üìß [AppointmentEmailService] Sending appointment confirmation email:', {
                to: data.patientEmail,
                appointmentId: data.appointmentId,
                doctorName: data.doctorName,
                appointmentDate: data.appointmentDate
            });

            // G·ª≠i email
            const response = await emailjs.send(
                EMAILJS_SERVICE_ID,
                EMAILJS_TEMPLATE_ID,
                templateParams
            );

            console.log('‚úÖ [AppointmentEmailService] Email sent successfully:', response);

            return {
                success: true,
                message: 'Email x√°c nh·∫≠n ƒë·∫∑t l·ªãch ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
            };

        } catch (error: any) {
            console.error('‚ùå [AppointmentEmailService] Error sending email:', error);
            
            return {
                success: false,
                message: 'Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n',
                error: error.message || 'UNKNOWN_ERROR'
            };
        }
    }

    /**
     * G·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc 24h
     */
    static async sendAppointmentReminderEmail(data: AppointmentEmailData): Promise<EmailResponse> {
        // T∆∞∆°ng t·ª± nh∆∞ sendAppointmentConfirmationEmail nh∆∞ng v·ªõi template kh√°c
        // C√≥ th·ªÉ implement sau n·∫øu c·∫ßn
        return {
            success: false,
            message: 'Reminder email feature not implemented yet'
        };
    }
}

// Kh·ªüi t·∫°o EmailJS khi import module
if (typeof window !== 'undefined') {
    AppointmentEmailService.init();
}
