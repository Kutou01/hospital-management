import emailjs from '@emailjs/browser';

// C·∫•u h√¨nh EmailJS t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const EMAILJS_SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || '';
const EMAILJS_TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || '';
const EMAILJS_PUBLIC_KEY = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || '';

// Interface cho d·ªØ li·ªáu email thanh to√°n
export interface PaymentEmailData {
    patientName: string;
    patientEmail: string;
    orderCode: string;
    amount: number;
    doctorName: string;
    paymentDate: string;
    recordId?: string;
}

// Interface cho response
export interface EmailResponse {
    success: boolean;
    message: string;
    error?: string;
}

/**
 * Service ƒë·ªÉ g·ª≠i email th√¥ng b√°o thanh to√°n th√†nh c√¥ng
 */
export class EmailService {
    
    /**
     * Kh·ªüi t·∫°o EmailJS v·ªõi public key
     */
    static init() {
        if (EMAILJS_PUBLIC_KEY) {
            emailjs.init(EMAILJS_PUBLIC_KEY);
            console.log('‚úÖ EmailJS initialized successfully');
        } else {
            console.warn('‚ö†Ô∏è EmailJS public key not found in environment variables');
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o thanh to√°n th√†nh c√¥ng
     */
    static async sendPaymentSuccessEmail(data: PaymentEmailData): Promise<EmailResponse> {
        try {
            // Ki·ªÉm tra m√¥i tr∆∞·ªùng - EmailJS ch·ªâ ho·∫°t ƒë·ªông trong browser
            if (typeof window === 'undefined') {
                console.warn('‚ö†Ô∏è EmailJS ch·ªâ ho·∫°t ƒë·ªông trong browser, kh√¥ng th·ªÉ g·ª≠i t·ª´ server-side');
                return {
                    success: false,
                    message: 'EmailJS ch·ªâ ho·∫°t ƒë·ªông trong browser',
                    error: 'SERVER_SIDE_NOT_SUPPORTED'
                };
            }

            // Ki·ªÉm tra c·∫•u h√¨nh
            if (!EMAILJS_SERVICE_ID || !EMAILJS_TEMPLATE_ID || !EMAILJS_PUBLIC_KEY) {
                console.error('‚ùå EmailJS configuration missing');
                return {
                    success: false,
                    message: 'C·∫•u h√¨nh email ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p',
                    error: 'MISSING_CONFIG'
                };
            }

            // Kh·ªüi t·∫°o EmailJS n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
            emailjs.init(EMAILJS_PUBLIC_KEY);

            // Chu·∫©n b·ªã d·ªØ li·ªáu template
            const templateParams = {
                // Th√¥ng tin ng∆∞·ªùi nh·∫≠n - QUAN TR·ªåNG cho EmailJS
                to_email: data.patientEmail,
                to_name: data.patientName,

                // Th√¥ng tin b·ªánh nh√¢n
                patient_name: data.patientName,

                // Th√¥ng tin giao d·ªãch
                order_code: data.orderCode,
                amount: data.amount.toLocaleString('vi-VN'),
                doctor_name: data.doctorName,
                payment_date: new Date(data.paymentDate).toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                record_id: data.recordId || 'N/A',

                // Th√¥ng tin b·ªánh vi·ªán
                hospital_name: 'B·ªánh vi·ªán ƒêa khoa',
                hospital_address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM',
                hospital_phone: '(028) 1234 5678',

                // Th√¥ng tin g·ª≠i email (c√≥ th·ªÉ c·∫ßn thi·∫øt cho m·ªôt s·ªë template)
                from_name: 'B·ªánh vi·ªán ƒêa khoa',
                reply_to: 'support@hospital.com'
            };

            console.log('üìß [EmailService] Sending payment success email:', {
                to: data.patientEmail,
                orderCode: data.orderCode,
                amount: data.amount
            });

            // G·ª≠i email
            const response = await emailjs.send(
                EMAILJS_SERVICE_ID,
                EMAILJS_TEMPLATE_ID,
                templateParams
            );

            console.log('‚úÖ [EmailService] Email sent successfully:', response);

            return {
                success: true,
                message: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
            };

        } catch (error: any) {
            console.error('‚ùå [EmailService] Failed to send email:', error);
            
            let errorMessage = 'Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o';
            
            if (error.status === 400) {
                errorMessage = 'Th√¥ng tin email kh√¥ng h·ª£p l·ªá';
            } else if (error.status === 401) {
                errorMessage = 'L·ªói x√°c th·ª±c email service';
            } else if (error.status === 403) {
                errorMessage = 'Kh√¥ng c√≥ quy·ªÅn g·ª≠i email';
            } else if (error.status === 404) {
                errorMessage = 'Template email kh√¥ng t·ªìn t·∫°i';
            } else if (error.status >= 500) {
                errorMessage = 'L·ªói server email service';
            }

            return {
                success: false,
                message: errorMessage,
                error: error.message || 'UNKNOWN_ERROR'
            };
        }
    }

    /**
     * Ki·ªÉm tra c·∫•u h√¨nh EmailJS
     */
    static checkConfiguration(): boolean {
        const isConfigured = !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_PUBLIC_KEY);
        
        if (!isConfigured) {
            console.warn('‚ö†Ô∏è EmailJS configuration incomplete:', {
                serviceId: !!EMAILJS_SERVICE_ID,
                templateId: !!EMAILJS_TEMPLATE_ID,
                publicKey: !!EMAILJS_PUBLIC_KEY
            });
        }
        
        return isConfigured;
    }
}

// Kh·ªüi t·∫°o EmailJS khi import module
if (typeof window !== 'undefined') {
    EmailService.init();
}
