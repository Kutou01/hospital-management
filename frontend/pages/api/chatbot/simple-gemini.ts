import { NextApiRequest, NextApiResponse } from 'next';
import { geminiCircuitBreaker, withCircuitBreaker } from '../../../lib/utils/circuit-breaker';
import { chatbotCache, CacheKeys } from '../../../lib/utils/cache-manager';
import { InputValidator, chatbotRateLimiter, getClientIdentifier } from '../../../lib/utils/input-validator';
import { performanceTracker, recordMetric, logInfo, logError, recordHealthCheck } from '../../../lib/utils/monitoring';

/**
 * Simple Gemini-only Chatbot API with Circuit Breaker and Caching
 * Enhanced with reliability and performance optimizations
 */

interface ChatRequest {
  message: string;
  conversation_history?: any[];
  user_id?: string;
  session_id?: string;
  chat_type?: 'consultation' | 'booking' | 'emergency';
}

interface ChatResponse {
  success: boolean;
  data?: {
    ai_response: string;
    response_source: string;
    symptoms?: any[];
    severity?: string;
    user_id?: string;
    session_id?: string;
    response_time_ms?: number;
    timestamp?: string;
  };
  error?: string;
  message?: string;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ChatResponse>
) {
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'Method not allowed',
      message: 'Only POST requests are supported'
    });
  }

  const startTime = Date.now();
  const operationId = `gemini-api-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  // Start performance tracking
  performanceTracker.start(operationId);

  try {
    // Security: Rate limiting
    const clientId = getClientIdentifier(req);
    const rateLimitResult = chatbotRateLimiter.checkLimit(clientId);

    // Record rate limiting metrics
    recordMetric('api.rate_limit.requests', 1, 'count', {
      client: clientId.substring(0, 10),
      allowed: rateLimitResult.allowed.toString()
    });

    if (!rateLimitResult.allowed) {
      console.warn('üö® Rate limit exceeded for client:', clientId);
      return res.status(429).json({
        success: false,
        error: 'Rate limit exceeded',
        message: 'Too many requests. Please try again later.'
      });
    }

    // Security: Validate API request
    const apiValidation = InputValidator.validateApiRequest(req);
    if (!apiValidation.isValid && apiValidation.riskLevel === 'high') {
      console.warn('üö® High-risk API request detected:', apiValidation.errors);
      return res.status(400).json({
        success: false,
        error: 'Invalid request',
        message: 'Request validation failed'
      });
    }

    const { message, conversation_history, user_id, session_id, chat_type = 'consultation' }: ChatRequest = req.body;

    // Enhanced input validation
    const messageValidation = InputValidator.validateChatMessage(message);
    if (!messageValidation.isValid) {
      console.warn('üö® Message validation failed:', messageValidation.errors);
      return res.status(400).json({
        success: false,
        error: 'Invalid message',
        message: 'Message validation failed'
      });
    }

    // High risk content detection
    if (messageValidation.riskLevel === 'high') {
      console.error('üö® High risk content detected:', { message: message.substring(0, 50), clientId });
      return res.status(400).json({
        success: false,
        error: 'Content not allowed',
        message: 'Message contains potentially harmful content'
      });
    }

    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    if (!GEMINI_API_KEY) {
      return res.status(500).json({
        success: false,
        error: 'Configuration error',
        message: 'Gemini API key not configured'
      });
    }

    // Test API key first
    try {
      const testResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${GEMINI_API_KEY}`);
      if (!testResponse.ok) {
        console.error('‚ùå Gemini API Key Test Failed:', testResponse.status, testResponse.statusText);
        return res.status(500).json({
          success: false,
          error: 'Invalid API key',
          message: 'Gemini API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
        });
      }
      console.log('‚úÖ Gemini API Key Test Passed');
    } catch (keyTestError) {
      console.error('‚ùå Gemini API Key Test Error:', keyTestError);
      return res.status(500).json({
        success: false,
        error: 'API key test failed',
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API'
      });
    }

    // Enhanced Vietnamese text processing with comprehensive spell correction
    const VIETNAMESE_CORRECTIONS = [
      // Emergency terms
      { wrong: 'sot xuat huyet', correct: 's·ªët xu·∫•t huy·∫øt' },
      { wrong: 'sot dhd', correct: 's·ªët xu·∫•t huy·∫øt' },
      { wrong: 'dengue', correct: 's·ªët xu·∫•t huy·∫øt' },

      // Common symptoms
      { wrong: 'dau dau', correct: 'ƒëau ƒë·∫ßu' },
      { wrong: 'kho tho', correct: 'kh√≥ th·ªü' },
      { wrong: 'buon non', correct: 'bu·ªìn n√¥n' },
      { wrong: 'chong mat', correct: 'ch√≥ng m·∫∑t' },
      { wrong: 'met moi', correct: 'm·ªát m·ªèi' },
      { wrong: 'dau bung', correct: 'ƒëau b·ª•ng' },
      { wrong: 'dau nguc', correct: 'ƒëau ng·ª±c' },
      { wrong: 'tho gap', correct: 'th·ªü g·∫•p' },
      { wrong: 'hoa mat', correct: 'hoa m·∫Øt' },
      { wrong: 'choang vang', correct: 'cho√°ng v√°ng' },

      // Medical terms
      { wrong: 'bac si', correct: 'b√°c sƒ©' },
      { wrong: 'benh vien', correct: 'b·ªánh vi·ªán' },
      { wrong: 'kham benh', correct: 'kh√°m b·ªánh' },
      { wrong: 'thuoc men', correct: 'thu·ªëc men' },
      { wrong: 'chuyen khoa', correct: 'chuy√™n khoa' },
      { wrong: 'dat lich', correct: 'ƒë·∫∑t l·ªãch' },

      // Common typos
      { wrong: 'toi', correct: 't√¥i' },
      { wrong: 'bi', correct: 'b·ªã' },
      { wrong: 'muon', correct: 'mu·ªën' },
      { wrong: 'can', correct: 'c·∫ßn' },
      { wrong: 'giup', correct: 'gi√∫p' },
      { wrong: 'lam', correct: 'l√†m' },
      { wrong: 'nhu', correct: 'nh∆∞' },
      { wrong: 'co', correct: 'c√≥' },
      { wrong: 'duoc', correct: 'ƒë∆∞·ª£c' }
    ];

    // Process and correct Vietnamese text
    let processedMessage = message
      .toLowerCase()
      .trim()
      // Fix encoding corruption
      .replace(/tÔøΩi/gi, 't√¥i')
      .replace(/b?/gi, 'b·ªã')
      .replace(/s?t/gi, 's·ªët')
      .replace(/xu?t/gi, 'xu·∫•t')
      .replace(/huy?t/gi, 'huy·∫øt')
      .replace(/d?u/gi, 'ƒëau')
      .replace(/bu?ng/gi, 'b·ª•ng')
      .replace(/kh?/gi, 'kh√≥')
      .replace(/th?/gi, 'th·ªü')
      .replace(/bu?n/gi, 'bu·ªìn')
      .replace(/n?n/gi, 'n√¥n')
      .replace(/ch?ng/gi, 'ch√≥ng')
      .replace(/m?t/gi, 'm·∫∑t')
      .replace(/ÔøΩ/g, '') // Remove replacement characters
      .replace(/\s+/g, ' '); // Normalize spaces

    // Apply spell corrections
    VIETNAMESE_CORRECTIONS.forEach(correction => {
      const regex = new RegExp(`\\b${correction.wrong}\\b`, 'gi');
      processedMessage = processedMessage.replace(regex, correction.correct);
    });

    console.log('üî§ Text Processing:', {
      original: message,
      processed: processedMessage,
      corrected: processedMessage !== message.toLowerCase().trim()
    });

    // Check cache first
    const cacheKey = CacheKeys.chatbotResponse(processedMessage, user_id);
    const cachedResponse = chatbotCache.get(cacheKey);

    if (cachedResponse) {
      console.log('üíæ Cache hit for Gemini API');
      return res.status(200).json({
        success: true,
        response: cachedResponse.response,
        source: 'cache',
        severity: cachedResponse.severity || 'medium',
        symptoms: cachedResponse.symptoms || [],
        responseTime: Date.now() - startTime,
        cached: true
      });
    }

    // Build conversation context
    let conversationContext = '';
    if (conversation_history && conversation_history.length > 0) {
      conversationContext = conversation_history.slice(-6).join('\n') + '\n';
    }

    // Create system prompt for hospital chatbot
    const systemPrompt = `B·∫°n l√† AI H·ªó tr·ª£ c·ªßa b·ªánh vi·ªán, chuy√™n t∆∞ v·∫•n s·ª©c kh·ªèe v√† h·ªó tr·ª£ ƒë·∫∑t l·ªãch kh√°m b·ªánh.

NHI·ªÜM V·ª§ CH√çNH:
1. T∆∞ v·∫•n s·ª©c kh·ªèe c∆° b·∫£n (tri·ªáu ch·ª©ng, b·ªánh th∆∞·ªùng g·∫∑p)
2. H·ªó tr·ª£ ƒë·∫∑t l·ªãch kh√°m b·ªánh
3. Th√¥ng tin v·ªÅ c√°c chuy√™n khoa
4. H∆∞·ªõng d·∫´n chu·∫©n b·ªã kh√°m b·ªánh

CHUY√äN KHOA C√ì S·∫¥N:
- SPEC042: N·ªôi T·ªïng H·ª£p
- SPEC043: N·ªôi Ti·∫øt  
- SPEC045: Ph·∫´u Thu·∫≠t N·ªôi Soi
- SPEC032: Nhi Khoa

NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- Th√¢n thi·ªán, chuy√™n nghi·ªáp
- Kh√¥ng ch·∫©n ƒëo√°n b·ªánh c·ª• th·ªÉ
- Khuy·∫øn kh√≠ch kh√°m b√°c sƒ© khi c·∫ßn thi·∫øt
- Ph√°t hi·ªán t√¨nh hu·ªëng c·∫•p c·ª©u (s·ªët xu·∫•t huy·∫øt, ƒëau ng·ª±c, kh√≥ th·ªü)

T√åNH HU·ªêNG C·∫§P C·ª®U - Tr·∫£ l·ªùi ngay:
"üö® T√åNH HU·ªêNG C·∫§P C·ª®U! B·∫°n c·∫ßn ƒë·∫øn b·ªánh vi·ªán NGAY L·∫¨P T·ª®C ho·∫∑c g·ªçi 115. Tri·ªáu ch·ª©ng n√†y c√≥ th·ªÉ nguy hi·ªÉm ƒë·∫øn t√≠nh m·∫°ng."

H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch h·ªØu √≠ch v√† chuy√™n nghi·ªáp.`;

    // Enhanced emergency detection
    const EMERGENCY_PATTERNS = [
      {
        keywords: ['s·ªët xu·∫•t huy·∫øt', 'sot xuat huyet', 'dengue', 'xu·∫•t huy·∫øt', 'xuat huyet'],
        severity: 'emergency',
        response: 'üö® **C·∫¢NH B√ÅO KH·∫®N C·∫§P**: S·ªët xu·∫•t huy·∫øt l√† b·ªánh nguy hi·ªÉm ƒë·∫øn t√≠nh m·∫°ng! C·∫¶N ƒê·∫æN C·∫§P C·ª®U NGAY L·∫¨P T·ª®C ho·∫∑c G·ªåI 115!'
      },
      {
        keywords: ['ƒëau ng·ª±c', 'dau nguc', 'kh√≥ th·ªü', 'kho tho', 'th·ªü g·∫•p', 'tho gap'],
        severity: 'emergency',
        response: 'üö® **C·∫¢NH B√ÅO KH·∫®N C·∫§P**: ƒêau ng·ª±c k√®m kh√≥ th·ªü c√≥ th·ªÉ l√† d·∫•u hi·ªáu nh·ªìi m√°u c∆° tim! ƒê·∫æN C·∫§P C·ª®U NGAY ho·∫∑c G·ªåI 115!'
      },
      {
        keywords: ['ƒë·ªôt qu·ªµ', 'dot quy', 'li·ªát n·ª≠a ng∆∞·ªùi', 'liet nua nguoi', 'm√©o mi·ªáng', 'meo mieng'],
        severity: 'emergency',
        response: 'üö® **C·∫¢NH B√ÅO KH·∫®N C·∫§P**: Tri·ªáu ch·ª©ng ƒë·ªôt qu·ªµ! TH·ªúI GIAN L√Ä V√ÄNG - ƒê·∫æN C·∫§P C·ª®U NGAY ho·∫∑c G·ªåI 115!'
      }
    ];

    // Check for emergency symptoms
    let emergencyDetected = false;
    let emergencyResponse = '';

    for (const pattern of EMERGENCY_PATTERNS) {
      const hasEmergency = pattern.keywords.some(keyword =>
        processedMessage.includes(keyword.toLowerCase())
      );

      if (hasEmergency) {
        emergencyDetected = true;
        emergencyResponse = pattern.response;
        console.log('üö® EMERGENCY DETECTED:', {
          message: processedMessage,
          pattern: pattern.keywords,
          severity: pattern.severity
        });
        break;
      }
    }

    // If emergency detected, return immediate response
    if (emergencyDetected) {
      return res.status(200).json({
        success: true,
        response: emergencyResponse,
        source: 'emergency-detection',
        severity: 'emergency',
        symptoms: ['emergency'],
        responseTime: Date.now() - startTime
      });
    }

    const userMessage = `${conversationContext}Ng∆∞·ªùi d√πng: ${processedMessage}`;

    // Call Gemini API with Circuit Breaker protection
    const geminiApiCall = async () => {
      return fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: systemPrompt },
              { text: userMessage }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      })
      });
    };

    // Execute with circuit breaker
    const geminiResponse = await withCircuitBreaker('gemini-api', geminiApiCall);

    if (!geminiResponse.ok) {
      console.error('Gemini API Error:', geminiResponse.status, geminiResponse.statusText);
      throw new Error(`Gemini API error: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    
    if (!geminiData.candidates || geminiData.candidates.length === 0) {
      throw new Error('No response from Gemini API');
    }

    const aiResponse = geminiData.candidates[0].content.parts[0].text;
    const responseTime = Date.now() - startTime;

    // Enhanced symptom analysis using processed message
    const symptoms: string[] = [];
    let severity = 'low';

    // Comprehensive symptom detection
    const SYMPTOM_KEYWORDS = [
      'ƒëau ƒë·∫ßu', 'ƒëau b·ª•ng', 'ƒëau ng·ª±c', 'ƒëau l∆∞ng', 'ƒëau h·ªçng', 'ƒëau rƒÉng',
      's·ªët', 's·ªët cao', 's·ªët xu·∫•t huy·∫øt',
      'ho', 'ho khan', 'ho c√≥ ƒë·ªùm', 'ho ra m√°u',
      'bu·ªìn n√¥n', 'n√¥n', 'ti√™u ch·∫£y', 't√°o b√≥n',
      'ch√≥ng m·∫∑t', 'hoa m·∫Øt', 'cho√°ng v√°ng',
      'm·ªát m·ªèi', 'u·ªÉ o·∫£i', 'ki·ªát s·ª©c',
      'kh√≥ th·ªü', 'th·ªü g·∫•p', 'ng·∫°t th·ªü',
      'ƒëau', 's∆∞ng', 'vi√™m', 'ng·ª©a', 'ph√°t ban'
    ];

    // Detect symptoms from processed message
    SYMPTOM_KEYWORDS.forEach(symptom => {
      if (processedMessage.includes(symptom)) {
        symptoms.push(symptom);
      }
    });

    // Determine severity based on symptoms
    if (symptoms.length === 0) severity = 'low';
    else if (symptoms.length <= 2) severity = 'medium';
    else if (symptoms.length > 2) severity = 'medium';

    // High severity symptoms
    const highSeveritySymptoms = ['s·ªët cao', 'ƒëau ng·ª±c', 'kh√≥ th·ªü', 'th·ªü g·∫•p', 'ho ra m√°u', 'cho√°ng v√°ng'];
    if (symptoms.some(s => highSeveritySymptoms.includes(s))) {
      severity = 'high';
    }

    console.log(`‚úÖ Simple Gemini Response:`, {
      user_message: message.substring(0, 50) + '...',
      response_length: aiResponse.length,
      response_time: responseTime,
      severity,
      symptoms_count: symptoms.length
    });

    // Cache the successful response
    const responseData = {
      response: aiResponse,
      severity,
      symptoms,
      timestamp: Date.now()
    };

    // Cache for 10 minutes for non-emergency, 5 minutes for emergency
    const cacheTTL = severity === 'emergency' ? 5 * 60 * 1000 : 10 * 60 * 1000;
    chatbotCache.set(cacheKey, responseData, cacheTTL);

    // Record performance metrics
    const totalResponseTime = performanceTracker.end(operationId, 'api.chatbot.gemini.total', {
      severity,
      cached: 'false',
      symptoms_count: symptoms.length.toString()
    });

    // Record success metrics
    recordMetric('api.chatbot.gemini.success', 1, 'count', { severity });
    recordMetric('api.chatbot.gemini.response_length', aiResponse.length, 'chars');
    recordMetric('api.chatbot.gemini.symptoms_detected', symptoms.length, 'count');

    // Health check
    recordHealthCheck('gemini-api', 'healthy', totalResponseTime, {
      response_length: aiResponse.length,
      symptoms_count: symptoms.length
    });

    logInfo('Gemini API request completed successfully', {
      operationId,
      responseTime: totalResponseTime,
      severity,
      symptomsCount: symptoms.length,
      clientId: clientId.substring(0, 10)
    });

    return res.status(200).json({
      success: true,
      data: {
        ai_response: aiResponse,
        response_source: 'gemini-simple',
        symptoms,
        severity,
        user_id: user_id || `user_${Date.now()}`,
        session_id: session_id || `session_${Date.now()}`,
        response_time_ms: responseTime,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    // Record error metrics and performance
    const totalResponseTime = performanceTracker.end(operationId, 'api.chatbot.gemini.error', {
      error_type: error.constructor.name,
      error_message: error.message?.substring(0, 100)
    });

    // Categorize error
    let errorCategory = 'unknown';
    let errorMessage = 'C√≥ l·ªói x·∫£y ra trong h·ªá th·ªëng chatbot';
    let statusCode = 500;

    if (error.message?.includes('API key')) {
      errorCategory = 'auth';
      errorMessage = 'C·∫•u h√¨nh API kh√¥ng h·ª£p l·ªá';
      statusCode = 500;
    } else if (error.message?.includes('quota') || error.message?.includes('limit')) {
      errorCategory = 'quota';
      errorMessage = 'H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau.';
      statusCode = 503;
    } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
      errorCategory = 'network';
      errorMessage = 'K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.';
      statusCode = 503;
    } else if (error.message?.includes('Circuit breaker')) {
      errorCategory = 'circuit_breaker';
      errorMessage = 'D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
      statusCode = 503;
    }

    // Record error metrics
    recordMetric('api.chatbot.gemini.error', 1, 'count', {
      category: errorCategory,
      status_code: statusCode.toString()
    });

    // Health check
    recordHealthCheck('gemini-api', 'unhealthy', totalResponseTime, {
      error_category: errorCategory,
      error_message: error.message
    }, error.message);

    // Log error with context
    logError('Gemini API request failed', {
      operationId,
      error: error.message,
      errorCategory,
      statusCode,
      responseTime: totalResponseTime,
      stack: error.stack
    });

    console.error('‚ùå Simple Gemini API Error:', error);

    return res.status(statusCode).json({
      success: false,
      error: 'Chatbot service error',
      message: errorMessage
    });
  }
}

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '1mb',
    },
    responseLimit: '8mb',
  },
}
