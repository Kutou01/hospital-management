// Chatbot API utility functions
// Use enhanced chatbot API with fixed Vietnamese NLP (port 3021)
const CHATBOT_API_URL = process.env.NEXT_PUBLIC_ENHANCED_CHATBOT_API_URL || 'http://localhost:3021';

export const chatbotAPI = {
  // Send message to Gemini AI chatbot
  async sendMessage(message, conversationHistory = []) {
    try {
      const response = await fetch(`${CHATBOT_API_URL}/api/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json; charset=utf-8',
        },
        body: JSON.stringify({
          message: message,
          conversation_history: conversationHistory
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        return {
          success: true,
          response: data.data.ai_response,
          timestamp: data.data.timestamp
        };
      } else {
        throw new Error(data.message || 'API response error');
      }
    } catch (error) {
      console.error('Chatbot API error:', error);
      return {
        success: false,
        error: error.message,
        response: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng t∆∞ v·∫•n. Vui l√≤ng th·ª≠ l·∫°i sau.'
      };
    }
  },

  // Check chatbot service health
  async checkHealth() {
    try {
      const response = await fetch(`${CHATBOT_API_URL}/health`);
      const data = await response.json();
      return {
        healthy: data.status === 'healthy',
        geminiConnected: data.features?.gemini_ai || false,
        service: data.service
      };
    } catch (error) {
      console.error('Health check failed:', error);
      return {
        healthy: false,
        geminiConnected: false,
        error: error.message
      };
    }
  },

  // Get welcome message
  getWelcomeMessage() {
    return `Xin ch√†o! T√¥i l√† tr·ª£ l√Ω y t·∫ø AI c·ªßa b·ªánh vi·ªán. üëã

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
ü©∫ T∆∞ v·∫•n tri·ªáu ch·ª©ng c∆° b·∫£n
üè• Khuy·∫øn ngh·ªã chuy√™n khoa ph√π h·ª£p
üíä H∆∞·ªõng d·∫´n chu·∫©n b·ªã kh√°m b·ªánh
üö® Nh·∫≠n di·ªán t√¨nh hu·ªëng c·∫•p c·ª©u

H√£y m√¥ t·∫£ tri·ªáu ch·ª©ng ho·∫∑c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe b·∫°n ƒëang g·∫∑p ph·∫£i nh√©!

‚ö†Ô∏è L∆∞u √Ω: T√¥i ch·ªâ t∆∞ v·∫•n c∆° b·∫£n, kh√¥ng thay th·∫ø vi·ªác kh√°m b√°c sƒ©.`;
  },

  // Quick reply suggestions
  getQuickReplies() {
    return [
      'T√¥i b·ªã ƒëau ƒë·∫ßu',
      'T√¥i b·ªã s·ªët',
      'T√¥i b·ªã ho v√† kh√≥ th·ªü',
      'T√¥i b·ªã ƒëau b·ª•ng',
      'T√¥i c·∫ßn kh√°m chuy√™n khoa n√†o?',
      'Chu·∫©n b·ªã g√¨ khi ƒëi kh√°m?'
    ];
  }
};

export default chatbotAPI;
